var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { generateGUID } from '@airgap/beacon-utils';
import { toastTemplates } from './toast-templates';
import { getColorMode } from '../../utils/colorMode';
import { createIconSVGExternal, createSanitizedElement } from '../../utils/html-elements';
import { constructPoweredByBeacon, constructToastContainer } from '../../utils/templates';
let document;
if (typeof window !== 'undefined' && typeof window.document !== 'undefined') {
    document = window.document;
}
const EXPAND_AFTER = 5 * 1000;
let timeout;
let expandTimeout;
let globalToastConfig;
const createActionItem = (toastAction) => __awaiter(void 0, void 0, void 0, function* () {
    const { text, isBold, actionText, actionLogo, actionCallback } = toastAction;
    const id = yield generateGUID();
    const wrapper = document.createElement('div');
    wrapper.classList.add('beacon-toast__action__item');
    removeAllChildNodes(wrapper);
    const wrapBold = (element) => {
        return createSanitizedElement('strong', [], [], element);
    };
    if (actionCallback) {
        if (text.length > 0) {
            wrapper.appendChild(createSanitizedElement('p', [], [], text));
        }
        const textEl = createSanitizedElement('span', [], [], [
            createSanitizedElement('span', [], [], actionText),
            actionLogo && actionLogo === 'external' ? createIconSVGExternal() : undefined
        ]);
        wrapper.appendChild(createSanitizedElement('p', [], [], [createSanitizedElement('a', [], [['id', id]], [isBold ? wrapBold([textEl]) : textEl])]));
    }
    else if (actionText) {
        if (text.length > 0) {
            wrapper.appendChild(createSanitizedElement('p', ['beacon-toast__action__item__subtitle'], [], text));
        }
        const textEl = createSanitizedElement('span', [], [], actionText);
        wrapper.appendChild(createSanitizedElement('p', [], [], [isBold ? wrapBold([textEl]) : textEl]));
    }
    else {
        const textEl = createSanitizedElement('p', [], [], text);
        wrapper.appendChild(isBold ? wrapBold([textEl]) : textEl);
    }
    if (actionCallback) {
        wrapper.addEventListener('click', actionCallback);
    }
    return wrapper;
});
const removeAllChildNodes = (parent) => {
    while (parent.firstChild) {
        parent.removeChild(parent.firstChild);
    }
};
const formatToastText = (html) => {
    var _a, _b;
    const walletIcon = (_a = globalToastConfig === null || globalToastConfig === void 0 ? void 0 : globalToastConfig.walletInfo) === null || _a === void 0 ? void 0 : _a.icon;
    const walletName = (_b = globalToastConfig === null || globalToastConfig === void 0 ? void 0 : globalToastConfig.walletInfo) === null || _b === void 0 ? void 0 : _b.name;
    let walletEl;
    const walletNameEl = createSanitizedElement('strong', [], [], walletName !== null && walletName !== void 0 ? walletName : 'Wallet');
    if (walletIcon) {
        walletEl = createSanitizedElement('span', ['beacon-toast__wallet__container'], [], [
            createSanitizedElement('img', ['beacon-toast__content__img'], [['src', walletIcon]], ''),
            walletNameEl
        ]);
    }
    else {
        walletEl = walletNameEl;
    }
    const splits = html.split(`{{wallet}}`);
    if (splits.length === 1) {
        return [createSanitizedElement('span', [], [], html)];
    }
    else {
        const out = [];
        for (let x = 0; x < splits.length; x++) {
            out.push(createSanitizedElement('span', [], [], splits[x]));
            if (x < splits.length - 1) {
                out.push(walletEl);
            }
        }
        return out;
    }
};
const getToastHTML = (config) => {
    const text = config.body;
    const elements = formatToastText(text);
    const outerEl = createSanitizedElement('span', ['beacon-toast__wallet__outer'], [], elements);
    const toastContainerEl = constructToastContainer([outerEl]);
    return {
        style: toastTemplates.default.css,
        html: toastContainerEl
    };
};
/**
 * Close a toast
 */
const closeToast = () => new Promise((resolve) => {
    var _a;
    globalToastConfig = undefined;
    const wrapper = document.getElementById('beacon-toast-wrapper');
    if (!wrapper) {
        return resolve();
    }
    const elm = (_a = wrapper.shadowRoot) === null || _a === void 0 ? void 0 : _a.getElementById('beacon-toast');
    if (elm) {
        const animationDuration = 300;
        if (timeout) {
            clearTimeout(timeout);
            timeout = undefined;
        }
        elm.className = elm.className.replace('fadeIn', 'fadeOut');
        window.setTimeout(() => {
            const parent = wrapper.parentNode;
            if (parent) {
                parent.removeChild(wrapper);
            }
            resolve();
        }, animationDuration);
    }
    else {
        resolve();
    }
});
const registerClick = (shadowRoot, id, callback) => {
    const button = shadowRoot.getElementById(id);
    if (button) {
        button.addEventListener('click', () => __awaiter(void 0, void 0, void 0, function* () {
            yield callback(button);
        }));
    }
    return button;
};
const showElement = (shadowRoot, id) => {
    const el = shadowRoot.getElementById(id);
    if (el) {
        el.classList.remove('hide');
        el.classList.add('show');
    }
};
const hideElement = (shadowRoot, id) => {
    const el = shadowRoot.getElementById(id);
    if (el) {
        el.classList.add('hide');
        el.classList.remove('show');
    }
};
// const showLoader = (): void => {
//   showElement('beacon-toast-loader')
// }
const hideLoader = (shadowRoot) => {
    hideElement(shadowRoot, 'beacon-toast-loader');
    showElement(shadowRoot, 'beacon-toast-loader-placeholder');
};
const showExpand = (shadowRoot) => {
    showElement(shadowRoot, 'beacon-toast-button-expand');
    hideElement(shadowRoot, 'beacon-toast-button-close');
};
const showClose = (shadowRoot) => {
    showElement(shadowRoot, 'beacon-toast-button-close');
    hideElement(shadowRoot, 'beacon-toast-button-expand');
};
const collapseList = (shadowRoot) => {
    const expandButton = shadowRoot.getElementById('beacon-toast-button-expand');
    const list = shadowRoot.getElementById('beacon-toast-list');
    if (expandButton && list) {
        expandButton.classList.remove('beacon-toast__upside_down');
        list.classList.add('hide');
        list.classList.remove('show');
    }
};
const expandList = (shadowRoot) => {
    const expandButton = shadowRoot.getElementById('beacon-toast-button-expand');
    const list = shadowRoot.getElementById('beacon-toast-list');
    if (expandButton && list) {
        expandButton.classList.add('beacon-toast__upside_down');
        list.classList.remove('hide');
        list.classList.add('show');
    }
};
const expandOrCollapseList = (shadowRoot) => {
    const expandButton = shadowRoot.getElementById('beacon-toast-button-expand');
    const list = shadowRoot.getElementById('beacon-toast-list');
    if (expandButton && list) {
        if (expandButton.classList.contains('beacon-toast__upside_down')) {
            collapseList(shadowRoot);
        }
        else {
            expandList(shadowRoot);
        }
    }
};
const addActionsToToast = (shadowRoot, toastConfig, list) => __awaiter(void 0, void 0, void 0, function* () {
    const actions = toastConfig.actions;
    if (actions && actions.length > 0) {
        const actionPromises = actions.map((action) => __awaiter(void 0, void 0, void 0, function* () {
            // eslint-disable-next-line @typescript-eslint/unbound-method
            return createActionItem(action);
        }));
        const actionItems = yield Promise.all(actionPromises);
        actionItems.forEach((item) => list.appendChild(item));
        const poweredByBeacon = document.createElement('small');
        poweredByBeacon.classList.add('beacon-toast__powered');
        poweredByBeacon.appendChild(constructPoweredByBeacon());
        list.appendChild(poweredByBeacon);
        showExpand(shadowRoot);
    }
    else {
        showClose(shadowRoot);
        collapseList(shadowRoot);
    }
});
const createNewToast = (toastConfig) => __awaiter(void 0, void 0, void 0, function* () {
    globalToastConfig = toastConfig;
    const timer = toastConfig.timer;
    const shadowRootEl = document.createElement('div');
    shadowRootEl.setAttribute('id', 'beacon-toast-wrapper');
    const shadowRoot = shadowRootEl.attachShadow({ mode: 'open' });
    const wrapper = document.createElement('div');
    const { style, html } = getToastHTML(toastConfig);
    wrapper.appendChild(html);
    const styleEl = document.createElement('style');
    styleEl.textContent = style;
    shadowRoot.appendChild(wrapper);
    shadowRoot.appendChild(styleEl);
    if (timer) {
        timeout = window.setTimeout(() => __awaiter(void 0, void 0, void 0, function* () {
            yield closeToast();
        }), timer);
    }
    document.body.prepend(shadowRootEl);
    const colorMode = getColorMode();
    const elm = shadowRoot.getElementById(`beacon-toast`);
    if (elm) {
        elm.classList.add(`theme__${colorMode}`);
    }
    const list = shadowRoot.getElementById('beacon-toast-list');
    if (list) {
        yield addActionsToToast(shadowRoot, toastConfig, list);
    }
    const openWalletButtonEl = shadowRoot.getElementById('beacon-open-wallet');
    if (openWalletButtonEl) {
        if (toastConfig.openWalletAction) {
            openWalletButtonEl.addEventListener('click', () => {
                if (toastConfig.openWalletAction) {
                    toastConfig.openWalletAction();
                }
            });
        }
        else {
            openWalletButtonEl.classList.add('hide');
        }
    }
    if (globalToastConfig.state === 'loading') {
        expandTimeout = window.setTimeout(() => __awaiter(void 0, void 0, void 0, function* () {
            const expandButton = shadowRoot.getElementById('beacon-toast-button-expand');
            if (expandButton && !expandButton.classList.contains('beacon-toast__upside_down')) {
                expandOrCollapseList(shadowRoot);
            }
        }), EXPAND_AFTER);
    }
    registerClick(shadowRoot, 'beacon-toast-button-done', () => __awaiter(void 0, void 0, void 0, function* () {
        yield closeToast();
    }));
    const closeButton = registerClick(shadowRoot, 'beacon-toast-button-close', () => __awaiter(void 0, void 0, void 0, function* () {
        yield closeToast();
    }));
    if (closeButton && globalToastConfig.state === 'loading') {
        closeButton.classList.add('hide');
    }
    registerClick(shadowRoot, 'beacon-toast-button-expand', () => __awaiter(void 0, void 0, void 0, function* () {
        expandOrCollapseList(shadowRoot);
    }));
});
const updateToast = (toastConfig) => __awaiter(void 0, void 0, void 0, function* () {
    globalToastConfig = Object.assign(Object.assign({}, globalToastConfig), toastConfig);
    const timer = toastConfig.timer;
    const wrapper = document.getElementById('beacon-toast-wrapper');
    if (!wrapper) {
        return;
    }
    const shadowRoot = wrapper.shadowRoot;
    if (!shadowRoot) {
        return;
    }
    const list = shadowRoot.getElementById('beacon-toast-list');
    if (list) {
        removeAllChildNodes(list);
        yield addActionsToToast(shadowRoot, toastConfig, list);
    }
    if (globalToastConfig.state === 'loading') {
        expandTimeout = window.setTimeout(() => __awaiter(void 0, void 0, void 0, function* () {
            const expandButton = shadowRoot.getElementById('beacon-toast-button-expand');
            if (expandButton && !expandButton.classList.contains('beacon-toast__upside_down')) {
                expandOrCollapseList(shadowRoot);
            }
        }), EXPAND_AFTER);
    }
    const toastTextEl = shadowRoot.getElementById('beacon-text-content');
    if (toastTextEl) {
        removeAllChildNodes(toastTextEl);
        toastTextEl.appendChild(createSanitizedElement('span', ['beacon-toast__wallet__outer'], [], formatToastText(toastConfig.body)));
    }
    const openWalletButtonEl = shadowRoot.getElementById('beacon-open-wallet');
    if (openWalletButtonEl) {
        if (toastConfig.openWalletAction) {
            openWalletButtonEl.classList.remove('hide');
            openWalletButtonEl.addEventListener('click', () => {
                if (toastConfig.openWalletAction) {
                    toastConfig.openWalletAction();
                }
            });
        }
        else {
            openWalletButtonEl.classList.add('hide');
        }
    }
    if (timer) {
        timeout = window.setTimeout(() => __awaiter(void 0, void 0, void 0, function* () {
            yield closeToast();
        }), timer);
    }
    const doneButton = shadowRoot.getElementById('beacon-toast-button-done');
    if (doneButton) {
        doneButton.addEventListener('click', () => __awaiter(void 0, void 0, void 0, function* () {
            yield closeToast();
        }));
    }
});
/**
 * Create a new toast
 *
 * @param toastConfig Configuration of the toast
 */
const openToast = (toastConfig) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    if (expandTimeout) {
        clearTimeout(expandTimeout);
    }
    const wrapper = document.getElementById('beacon-toast-wrapper');
    if (wrapper) {
        if (toastConfig.forceNew) {
            yield closeToast();
            yield createNewToast(toastConfig);
        }
        else {
            yield updateToast(toastConfig);
        }
    }
    else {
        yield createNewToast(toastConfig);
    }
    if (globalToastConfig && globalToastConfig.state === 'finished') {
        const shadowRoot = (_a = document.getElementById('beacon-toast-wrapper')) === null || _a === void 0 ? void 0 : _a.shadowRoot;
        if (shadowRoot) {
            hideLoader(shadowRoot);
            showClose(shadowRoot);
            expandList(shadowRoot);
        }
    }
    return;
});
export { closeToast, openToast };
//# sourceMappingURL=Toast.js.map