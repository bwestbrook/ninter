{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ExposedPromise } from '@airgap/beacon-utils';\nimport { getKeypairFromSeed, toHex, generateGUID } from '@airgap/beacon-utils';\nimport { StorageKey } from '@airgap/beacon-types';\nimport { SDK_VERSION } from '../../constants';\nimport { windowRef } from '../../MockWindow';\n/**\n * @internalapi\n *\n * The beacon client is an abstract client that handles everything that is shared between all other clients.\n * Specifically, it handles managing the beaconId and and the local keypair.\n */\n\nexport class BeaconClient {\n  constructor(config) {\n    /** The beaconId is a public key that is used to identify one specific application (dapp or wallet).\n     * This is used inside a message to specify the sender, for example.\n     */\n    this._beaconId = new ExposedPromise();\n    /**\n     * The local keypair that is used for the communication encryption\n     */\n\n    this._keyPair = new ExposedPromise();\n\n    if (!config.name) {\n      throw new Error('Name not set');\n    }\n\n    if (!config.storage) {\n      throw new Error('Storage not set');\n    }\n\n    this.name = config.name;\n    this.iconUrl = config.iconUrl;\n    this.appUrl = config.appUrl;\n    this.storage = config.storage; // TODO: This is a temporary \"fix\" to prevent users from creating multiple Client instances\n\n    if (windowRef.beaconCreatedClientInstance) {\n      console.warn('[BEACON] It looks like you created multiple Beacon SDK Client instances. This can lead to problems. Only create one instance and re-use it everywhere.');\n    } else {\n      ;\n      windowRef.beaconCreatedClientInstance = true;\n    }\n\n    this.initSDK().catch(console.error);\n  }\n\n  get beaconId() {\n    return this._beaconId.promise;\n  }\n\n  get keyPair() {\n    return this._keyPair.promise;\n  }\n  /**\n   * This resets the SDK. After using this method, this instance is no longer usable. You will have to instanciate a new client.\n   */\n\n\n  destroy() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.removeBeaconEntriesFromStorage();\n      windowRef.beaconCreatedClientInstance = false;\n    });\n  }\n  /**\n   * This method initializes the SDK by setting some values in the storage and generating a keypair.\n   */\n\n\n  initSDK() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.storage.set(StorageKey.BEACON_SDK_VERSION, SDK_VERSION).catch(console.error);\n      this.loadOrCreateBeaconSecret().catch(console.error);\n      return this.keyPair.then(keyPair => {\n        this._beaconId.resolve(toHex(keyPair.publicKey));\n      });\n    });\n  }\n  /**\n   * Removes all beacon values from the storage.\n   */\n\n\n  removeBeaconEntriesFromStorage() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const allKeys = Object.values(StorageKey);\n      yield Promise.all(allKeys.map(key => this.storage.delete(key)));\n    });\n  }\n  /**\n   * This method tries to load the seed from storage, if it doesn't exist, a new one will be created and persisted.\n   */\n\n\n  loadOrCreateBeaconSecret() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const storageValue = yield this.storage.get(StorageKey.BEACON_SDK_SECRET_SEED);\n\n      if (storageValue && typeof storageValue === 'string') {\n        this._keyPair.resolve(yield getKeypairFromSeed(storageValue));\n      } else {\n        const key = yield generateGUID();\n        yield this.storage.set(StorageKey.BEACON_SDK_SECRET_SEED, key);\n\n        this._keyPair.resolve(yield getKeypairFromSeed(key));\n      }\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["ExposedPromise","getKeypairFromSeed","toHex","generateGUID","StorageKey","SDK_VERSION","windowRef","BeaconClient","constructor","config","name","Error","storage","iconUrl","appUrl","beaconCreatedClientInstance","console","warn","initSDK","catch","error","beaconId","_beaconId","promise","keyPair","_keyPair","destroy","removeBeaconEntriesFromStorage","set","BEACON_SDK_VERSION","loadOrCreateBeaconSecret","then","resolve","publicKey","allKeys","Object","values","Promise","all","map","key","delete","storageValue","get","BEACON_SDK_SECRET_SEED"],"sourceRoot":"","sources":["../../../../src/clients/beacon-client/BeaconClient.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}