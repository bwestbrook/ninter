{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isArray,_util_isScheduler PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { map } from '../operators/map';\nimport { canReportError } from '../util/canReportError';\nimport { isArray } from '../util/isArray';\nimport { isScheduler } from '../util/isScheduler';\nexport function bindCallback(callbackFunc, resultSelector, scheduler) {\n  if (resultSelector) {\n    if (isScheduler(resultSelector)) {\n      scheduler = resultSelector;\n    } else {\n      return function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        return bindCallback(callbackFunc, scheduler).apply(void 0, args).pipe(map(function (args) {\n          return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args);\n        }));\n      };\n    }\n  }\n\n  return function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var context = this;\n    var subject;\n    var params = {\n      context: context,\n      subject: subject,\n      callbackFunc: callbackFunc,\n      scheduler: scheduler\n    };\n    return new Observable(function (subscriber) {\n      if (!scheduler) {\n        if (!subject) {\n          subject = new AsyncSubject();\n\n          var handler = function () {\n            var innerArgs = [];\n\n            for (var _i = 0; _i < arguments.length; _i++) {\n              innerArgs[_i] = arguments[_i];\n            }\n\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          };\n\n          try {\n            callbackFunc.apply(context, args.concat([handler]));\n          } catch (err) {\n            if (canReportError(subject)) {\n              subject.error(err);\n            } else {\n              console.warn(err);\n            }\n          }\n        }\n\n        return subject.subscribe(subscriber);\n      } else {\n        var state = {\n          args: args,\n          subscriber: subscriber,\n          params: params\n        };\n        return scheduler.schedule(dispatch, 0, state);\n      }\n    });\n  };\n}\n\nfunction dispatch(state) {\n  var _this = this;\n\n  var self = this;\n  var args = state.args,\n      subscriber = state.subscriber,\n      params = state.params;\n  var callbackFunc = params.callbackFunc,\n      context = params.context,\n      scheduler = params.scheduler;\n  var subject = params.subject;\n\n  if (!subject) {\n    subject = params.subject = new AsyncSubject();\n\n    var handler = function () {\n      var innerArgs = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        innerArgs[_i] = arguments[_i];\n      }\n\n      var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n\n      _this.add(scheduler.schedule(dispatchNext, 0, {\n        value: value,\n        subject: subject\n      }));\n    };\n\n    try {\n      callbackFunc.apply(context, args.concat([handler]));\n    } catch (err) {\n      subject.error(err);\n    }\n  }\n\n  this.add(subject.subscribe(subscriber));\n}\n\nfunction dispatchNext(state) {\n  var value = state.value,\n      subject = state.subject;\n  subject.next(value);\n  subject.complete();\n}\n\nfunction dispatchError(state) {\n  var err = state.err,\n      subject = state.subject;\n  subject.error(err);\n}","map":{"version":3,"mappings":"AACA;AACA,SAASA,UAAT,QAAuB,eAAvB;AAEA,SAASC,YAAT,QAAoB,iBAApB;AACA,SAASC,GAAT,QAAS,kBAAT;AACA,SAASC,cAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAsB,iBAAtB;AA4KA,SAAMC,WAAN,QAA4B,qBAA5B;OAKE,SAAIC,YAAJ,CAAoBC,YAApB,EAAoBC,cAApB,EAAoBC,SAApB,EAAoB;MAClBD,gBAAgB;QACdH,WAAS,CAAGG,cAAH,GAAkB;MAC5BC;WAEC;aAAQ,YAAc;gBAAd;;aAAA,0BAAc;;QAAK;;QAEzB;UAAA;QAAA;MACH;IACF;EAED;;SAA4B,YAAc;YAAd;;SAAA,0BAAc;;IACxC;;IACA,IAAIC,OAAwB,GAAC,IAA7B;IACA,IAAMC,OAAN;QACEC,SAAO;MACPF,OAAO,SADA;MAEPC,gBAFO;MAGPJ,YAAS,cAHF;MAIPE;IAJO;WAMP,IAAKT,UAAL,CAAgB;UACd,YAAY;YACV,UAAU;UACVW,OAAM,OAAUV,YAAV,EAAN;;cAAiBY,sBAAmB;yBAAnB,GAAmB;;iBAAnB,mCAAmBC;;YAClC;;YACAH,OAAO,CAACI,IAAR,CAAQC,SAAW,OAAX,IAAW,CAAX,GAAWA,YAAX,GAAWA,SAAnB;YACAL;UAEF;;cACE;YACDJ;UAAC,SACAU,KAAI;gBACFd,cAAc,WAAK;cACpBQ;mBACC;cACDO;YACF;UACF;QACD;;QACD;aACC;YACEC,KAAI;UACJC,UADI;UACJC,sBADI;UACJT;QADI;QAGP;MACA;IACH,CA1BE;EA2BL;AAeD;;SAAAU,gBAqBC;EApBC,IAAMC,KAAI,GAAG,IAAb;;EACQ;EACA;EAAA,sBAAc,WAAd;EAAA,IAAcX,cAAS,OAAvB;EACF;EAAA,IAAmBF,wBAAnB;EAAA,IAAmBD,4BAAnB;EACN,IAAIE,OAAC,GAASC,cAAd;;MACE,UAAU;IAEVD,OAAM,SAAU,QAAV,GAAU,kBAAhB;;QAAiBE,sBAAmB;mBAAnB,GAAmB;;WAAnB,mCAAmBC;;MAClC;;MACA,SAAQ,GAACE,SAAU,OAAV,IAAiC,CAAjC,GAAiCA,SAAe,CAAE,CAAF,CAAhD,GAAoDA,SAA7D;;MACAO;QAAAC;QAAAb;MAAA;IAEF;;QACE;MACDJ;IAAC,SACAU,KAAQ;MACTN;IACF;EAED;;EACD;AAOD;;SACUc,oBAAO;EACf,SAAQ,GAAIN,KAAC,CAAKK,KAAlB;EAAA,IAAoBb,uBAApB;EACAA,OAAO,CAACI,IAAR,CAAQS,KAAR;EACDb;AAOD;;SACUe,cAAGP,OAAE;EACb,OAAO,GAACA,KAAM,IAAd;EAAA,IAAmBR,uBAAnB;EACDA","names":["Observable","AsyncSubject","map","canReportError","isArray","isScheduler","bindCallback","callbackFunc","resultSelector","scheduler","context","subject","params","handler","_i","next","innerArgs","err","console","state","args","subscriber","dispatch","_this","value","dispatchNext","dispatchError"],"sources":["../../../src/internal/observable/bindCallback.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}