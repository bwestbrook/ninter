{"ast":null,"code":"import \"core-js/modules/es.array.at.js\";\nimport \"core-js/modules/es.string.at-alternative.js\";\nimport { BeaconWallet } from '@taquito/beacon-wallet';\nimport { TezosToolkit } from '@taquito/taquito';\nimport { bytes2Char } from '@taquito/utils';\nimport { NODE_URL, NFT_CONTRACT, NULL_STR } from '../constants';\nconst Tezos = new TezosToolkit(NODE_URL);\nconst wallet_options = {\n  name: 'TXLWallet',\n  preferredNetwork: \"mainnet\",\n  eventHandlers: {\n    PERMISSION_REQUEST_SUCCESS: {\n      handler: async data => {\n        console.log('permission data:', data);\n      }\n    }\n  }\n}; //let globalWallet: BeaconWallet | undefined\n\nlet globalWallet = undefined;\nexport const getBeaconInstance = async () => {\n  if (!globalWallet) {\n    // Create a new BeaconWallet instance. The options will be passed to the DAppClient constructor.\n    const wallet = new BeaconWallet(wallet_options); // Setting the wallet as the wallet provider for Taquito.\n\n    Tezos.setWalletProvider(wallet);\n    globalWallet = wallet;\n  }\n\n  console.log('globalWallet just after creating instance');\n  console.log(globalWallet);\n  return globalWallet;\n};\nexport const connectToBeacon = async () => {\n  console.log('CONNECTING TO BEACON');\n  const wallet = await getBeaconInstance();\n  console.log(wallet.client.getActiveAccount());\n\n  if (await wallet.client.getActiveAccount()) {\n    // Check if we already have an account connected, so we can skip requestPermissions.\n    return wallet;\n  }\n\n  console.log('wallet just after creating instance');\n  console.log(wallet); // Send permission request to the connected wallet. This will either be the browser extension, or a wallet over the P2P network.\n\n  console.log(\"Trying to request permissions\");\n  await wallet.requestPermissions();\n  return wallet;\n};\nexport const connectToWallet = async () => {\n  const wallet = await connectToBeacon();\n  console.log(wallet);\n  return wallet;\n};\nexport const disconnectFromBeacon = async () => {\n  const wallet = await getBeaconInstance();\n  await wallet.clearActiveAccount();\n};\nexport const getMyAddress = async () => {\n  const wallet = await getBeaconInstance();\n  const activeAccount = await wallet.client.getActiveAccount();\n  return activeAccount?.address ?? '';\n};\nexport const getMyNfts = async () => {\n  const wallet = await getBeaconInstance();\n  const activeAccount = await wallet.client.getActiveAccount();\n  const activeAccountStr = activeAccount?.address ?? '';\n  return activeAccountStr;\n};\nexport const getIpfsLink = async () => {\n  const user_token_id = 0;\n  const contract = await Tezos.wallet.at(NFT_CONTRACT);\n  const storage = await contract.storage();\n  const all_token_metadata = await storage.token_metadata;\n  const user_token_metadata = await all_token_metadata.get(user_token_id);\n  console.log(user_token_metadata);\n  const user_token_ipfs_dict = await user_token_metadata.token_info.valueMap;\n  console.log(user_token_ipfs_dict);\n  const user_token_ipfs_as_bytes = await user_token_ipfs_dict.get(NULL_STR);\n  console.log(user_token_ipfs_as_bytes);\n  const ipfs_data = bytes2Char(user_token_ipfs_as_bytes);\n  return ipfs_data;\n};\nexport const helloWorld = async () => {\n  const hw = 'hello world';\n  return hw;\n};","map":{"version":3,"names":["BeaconWallet","TezosToolkit","bytes2Char","NODE_URL","NFT_CONTRACT","NULL_STR","Tezos","wallet_options","name","preferredNetwork","eventHandlers","PERMISSION_REQUEST_SUCCESS","handler","data","console","log","globalWallet","undefined","getBeaconInstance","wallet","setWalletProvider","connectToBeacon","client","getActiveAccount","requestPermissions","connectToWallet","disconnectFromBeacon","clearActiveAccount","getMyAddress","activeAccount","address","getMyNfts","activeAccountStr","getIpfsLink","user_token_id","contract","at","storage","all_token_metadata","token_metadata","user_token_metadata","get","user_token_ipfs_dict","token_info","valueMap","user_token_ipfs_as_bytes","ipfs_data","helloWorld","hw"],"sources":["/Users/benjaminwestbrook/Repositories/ninter/src/services/beacon-services.js"],"sourcesContent":["import { BeaconWallet } from '@taquito/beacon-wallet'\nimport { TezosToolkit } from '@taquito/taquito'\nimport { bytes2Char } from '@taquito/utils'\nimport { NODE_URL, NFT_CONTRACT, NULL_STR } from '../constants'\n\nconst Tezos = new TezosToolkit(NODE_URL);\n\nconst wallet_options = {\n  name: 'TXLWallet',\n  preferredNetwork: \"mainnet\",\n  eventHandlers: {\n    PERMISSION_REQUEST_SUCCESS: {\n      handler: async (data) => {\n        console.log('permission data:', data);\n      },\n    },\n  },\n};\n\n//let globalWallet: BeaconWallet | undefined\n\nlet globalWallet = undefined\n\nexport const getBeaconInstance = async () => {\n\n  if (!globalWallet) {\n    // Create a new BeaconWallet instance. The options will be passed to the DAppClient constructor.\n    const wallet = new BeaconWallet(wallet_options)\n    // Setting the wallet as the wallet provider for Taquito.\n    Tezos.setWalletProvider(wallet)\n    globalWallet = wallet\n  }\n  console.log('globalWallet just after creating instance')\n  console.log(globalWallet)\n  return globalWallet\n}\n\nexport const connectToBeacon = async () => {\n  console.log('CONNECTING TO BEACON')\n  const wallet = await getBeaconInstance()\n  console.log(wallet.client.getActiveAccount())\n\n  if (await wallet.client.getActiveAccount()) {\n    // Check if we already have an account connected, so we can skip requestPermissions.\n    return wallet\n  }\n  console.log('wallet just after creating instance')\n  console.log(wallet)\n  // Send permission request to the connected wallet. This will either be the browser extension, or a wallet over the P2P network.\n  console.log(\"Trying to request permissions\")\n  await wallet.requestPermissions()\n  return wallet\n}\n\nexport const connectToWallet = async () => {\n  const wallet = await connectToBeacon()\n  console.log(wallet)\n  return wallet \n}\n\nexport const disconnectFromBeacon = async () => {\n  const wallet = await getBeaconInstance()\n  await wallet.clearActiveAccount()\n}\n\nexport const getMyAddress = async () => {\n  const wallet = await getBeaconInstance()\n  const activeAccount = await wallet.client.getActiveAccount()\n  return activeAccount?.address ?? ''\n}\n\nexport const getMyNfts = async () => {\n  const wallet = await getBeaconInstance()\n  const activeAccount = await wallet.client.getActiveAccount()\n  const activeAccountStr = activeAccount?.address ?? ''\n  return activeAccountStr\n}\n\n\nexport const getIpfsLink = async() => {\n  const user_token_id = 0\n  const contract = await Tezos.wallet.at(NFT_CONTRACT)\n  const storage = await contract.storage()\n  const all_token_metadata = await storage.token_metadata\n  const user_token_metadata = await all_token_metadata.get(user_token_id)\n  console.log(user_token_metadata)\n  const user_token_ipfs_dict = await user_token_metadata.token_info.valueMap\n  console.log(user_token_ipfs_dict) \n  const user_token_ipfs_as_bytes = await user_token_ipfs_dict.get(NULL_STR)\n  console.log(user_token_ipfs_as_bytes)\n  const ipfs_data = bytes2Char(user_token_ipfs_as_bytes)\n  return ipfs_data\n}\n\nexport const helloWorld = async() => {\n  const hw = 'hello world'\n  return hw\n}\n\n\n\n"],"mappings":";;AAAA,SAASA,YAAT,QAA6B,wBAA7B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAASC,QAAT,EAAmBC,YAAnB,EAAiCC,QAAjC,QAAiD,cAAjD;AAEA,MAAMC,KAAK,GAAG,IAAIL,YAAJ,CAAiBE,QAAjB,CAAd;AAEA,MAAMI,cAAc,GAAG;EACrBC,IAAI,EAAE,WADe;EAErBC,gBAAgB,EAAE,SAFG;EAGrBC,aAAa,EAAE;IACbC,0BAA0B,EAAE;MAC1BC,OAAO,EAAE,MAAOC,IAAP,IAAgB;QACvBC,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,IAAhC;MACD;IAHyB;EADf;AAHM,CAAvB,C,CAYA;;AAEA,IAAIG,YAAY,GAAGC,SAAnB;AAEA,OAAO,MAAMC,iBAAiB,GAAG,YAAY;EAE3C,IAAI,CAACF,YAAL,EAAmB;IACjB;IACA,MAAMG,MAAM,GAAG,IAAInB,YAAJ,CAAiBO,cAAjB,CAAf,CAFiB,CAGjB;;IACAD,KAAK,CAACc,iBAAN,CAAwBD,MAAxB;IACAH,YAAY,GAAGG,MAAf;EACD;;EACDL,OAAO,CAACC,GAAR,CAAY,2CAAZ;EACAD,OAAO,CAACC,GAAR,CAAYC,YAAZ;EACA,OAAOA,YAAP;AACD,CAZM;AAcP,OAAO,MAAMK,eAAe,GAAG,YAAY;EACzCP,OAAO,CAACC,GAAR,CAAY,sBAAZ;EACA,MAAMI,MAAM,GAAG,MAAMD,iBAAiB,EAAtC;EACAJ,OAAO,CAACC,GAAR,CAAYI,MAAM,CAACG,MAAP,CAAcC,gBAAd,EAAZ;;EAEA,IAAI,MAAMJ,MAAM,CAACG,MAAP,CAAcC,gBAAd,EAAV,EAA4C;IAC1C;IACA,OAAOJ,MAAP;EACD;;EACDL,OAAO,CAACC,GAAR,CAAY,qCAAZ;EACAD,OAAO,CAACC,GAAR,CAAYI,MAAZ,EAVyC,CAWzC;;EACAL,OAAO,CAACC,GAAR,CAAY,+BAAZ;EACA,MAAMI,MAAM,CAACK,kBAAP,EAAN;EACA,OAAOL,MAAP;AACD,CAfM;AAiBP,OAAO,MAAMM,eAAe,GAAG,YAAY;EACzC,MAAMN,MAAM,GAAG,MAAME,eAAe,EAApC;EACAP,OAAO,CAACC,GAAR,CAAYI,MAAZ;EACA,OAAOA,MAAP;AACD,CAJM;AAMP,OAAO,MAAMO,oBAAoB,GAAG,YAAY;EAC9C,MAAMP,MAAM,GAAG,MAAMD,iBAAiB,EAAtC;EACA,MAAMC,MAAM,CAACQ,kBAAP,EAAN;AACD,CAHM;AAKP,OAAO,MAAMC,YAAY,GAAG,YAAY;EACtC,MAAMT,MAAM,GAAG,MAAMD,iBAAiB,EAAtC;EACA,MAAMW,aAAa,GAAG,MAAMV,MAAM,CAACG,MAAP,CAAcC,gBAAd,EAA5B;EACA,OAAOM,aAAa,EAAEC,OAAf,IAA0B,EAAjC;AACD,CAJM;AAMP,OAAO,MAAMC,SAAS,GAAG,YAAY;EACnC,MAAMZ,MAAM,GAAG,MAAMD,iBAAiB,EAAtC;EACA,MAAMW,aAAa,GAAG,MAAMV,MAAM,CAACG,MAAP,CAAcC,gBAAd,EAA5B;EACA,MAAMS,gBAAgB,GAAGH,aAAa,EAAEC,OAAf,IAA0B,EAAnD;EACA,OAAOE,gBAAP;AACD,CALM;AAQP,OAAO,MAAMC,WAAW,GAAG,YAAW;EACpC,MAAMC,aAAa,GAAG,CAAtB;EACA,MAAMC,QAAQ,GAAG,MAAM7B,KAAK,CAACa,MAAN,CAAaiB,EAAb,CAAgBhC,YAAhB,CAAvB;EACA,MAAMiC,OAAO,GAAG,MAAMF,QAAQ,CAACE,OAAT,EAAtB;EACA,MAAMC,kBAAkB,GAAG,MAAMD,OAAO,CAACE,cAAzC;EACA,MAAMC,mBAAmB,GAAG,MAAMF,kBAAkB,CAACG,GAAnB,CAAuBP,aAAvB,CAAlC;EACApB,OAAO,CAACC,GAAR,CAAYyB,mBAAZ;EACA,MAAME,oBAAoB,GAAG,MAAMF,mBAAmB,CAACG,UAApB,CAA+BC,QAAlE;EACA9B,OAAO,CAACC,GAAR,CAAY2B,oBAAZ;EACA,MAAMG,wBAAwB,GAAG,MAAMH,oBAAoB,CAACD,GAArB,CAAyBpC,QAAzB,CAAvC;EACAS,OAAO,CAACC,GAAR,CAAY8B,wBAAZ;EACA,MAAMC,SAAS,GAAG5C,UAAU,CAAC2C,wBAAD,CAA5B;EACA,OAAOC,SAAP;AACD,CAbM;AAeP,OAAO,MAAMC,UAAU,GAAG,YAAW;EACnC,MAAMC,EAAE,GAAG,aAAX;EACA,OAAOA,EAAP;AACD,CAHM"},"metadata":{},"sourceType":"module"}