{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/* eslint-disable prefer-arrow/prefer-arrow-functions */\n\n\nimport { ready, randombytes_buf } from 'libsodium-wrappers';\n/**\n * Generate a random GUID\n */\n\nexport function generateGUID() {\n  return __awaiter(this, void 0, void 0, function* () {\n    yield ready;\n    const buf = randombytes_buf(16);\n    return [buf.slice(0, 4), buf.slice(4, 6), buf.slice(6, 8), buf.slice(8, 10), buf.slice(10, 16)].map(function (subbuf) {\n      return Buffer.from(subbuf).toString('hex');\n    }).join('-');\n  });\n}\n/* eslint-enable prefer-arrow/prefer-arrow-functions */","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AACA,SAASA,KAAT,EAAgBC,eAAhB,QAAuC,oBAAvC;AAEA;;;;AAGA,OAAM,SAAgBC,YAAhB,GAA4B;;IAChC,MAAMF,KAAN;IACA,MAAMG,GAAG,GAAGF,eAAe,CAAC,EAAD,CAA3B;IAEA,OAAO,CAACE,GAAG,CAACC,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAD,EAAkBD,GAAG,CAACC,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAlB,EAAmCD,GAAG,CAACC,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAnC,EAAoDD,GAAG,CAACC,KAAJ,CAAU,CAAV,EAAa,EAAb,CAApD,EAAsED,GAAG,CAACC,KAAJ,CAAU,EAAV,EAAc,EAAd,CAAtE,EACJC,GADI,CACA,UAAUC,MAAV,EAAgB;MACnB,OAAOC,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBG,QAApB,CAA6B,KAA7B,CAAP;IACD,CAHI,EAIJC,IAJI,CAIC,GAJD,CAAP;EAKD;AAAA;AAED","names":["ready","randombytes_buf","generateGUID","buf","slice","map","subbuf","Buffer","from","toString","join"],"sourceRoot":"","sources":["../../../src/utils/generate-uuid.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}