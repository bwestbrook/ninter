{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_util_isArray,_operators_map,_util_isObject,_from PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { map } from '../operators/map';\nimport { isObject } from '../util/isObject';\nimport { from } from './from';\nexport function forkJoin() {\n  var sources = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    sources[_i] = arguments[_i];\n  }\n\n  if (sources.length === 1) {\n    var first_1 = sources[0];\n\n    if (isArray(first_1)) {\n      return forkJoinInternal(first_1, null);\n    }\n\n    if (isObject(first_1) && Object.getPrototypeOf(first_1) === Object.prototype) {\n      var keys = Object.keys(first_1);\n      return forkJoinInternal(keys.map(function (key) {\n        return first_1[key];\n      }), keys);\n    }\n  }\n\n  if (typeof sources[sources.length - 1] === 'function') {\n    var resultSelector_1 = sources.pop();\n    sources = sources.length === 1 && isArray(sources[0]) ? sources[0] : sources;\n    return forkJoinInternal(sources, null).pipe(map(function (args) {\n      return resultSelector_1.apply(void 0, args);\n    }));\n  }\n\n  return forkJoinInternal(sources, null);\n}\n\nfunction forkJoinInternal(sources, keys) {\n  return new Observable(function (subscriber) {\n    var len = sources.length;\n\n    if (len === 0) {\n      subscriber.complete();\n      return;\n    }\n\n    var values = new Array(len);\n    var completed = 0;\n    var emitted = 0;\n\n    var _loop_1 = function (i) {\n      var source = from(sources[i]);\n      var hasValue = false;\n      subscriber.add(source.subscribe({\n        next: function (value) {\n          if (!hasValue) {\n            hasValue = true;\n            emitted++;\n          }\n\n          values[i] = value;\n        },\n        error: function (err) {\n          return subscriber.error(err);\n        },\n        complete: function () {\n          completed++;\n\n          if (completed === len || !hasValue) {\n            if (emitted === len) {\n              subscriber.next(keys ? keys.reduce(function (result, key, i) {\n                return result[key] = values[i], result;\n              }, {}) : values);\n            }\n\n            subscriber.complete();\n          }\n        }\n      }));\n    };\n\n    for (var i = 0; i < len; i++) {\n      _loop_1(i);\n    }\n  });\n}","map":{"version":3,"mappings":"AAAA;AAEA,SAASA,UAAT,QAAwB,eAAxB;AACA,SAASC,OAAT,QAAoB,iBAApB;AACA,SAASC,GAAT,QAAmB,kBAAnB;AAEA,SAASC,QAAT,QAAqB,kBAArB;AAsIA,SAAMC,IAAN,QAAgB,QAAhB;OACE,oBAAiB;aAAjB;;OAAA,2BAAiBC;;EAEjB;;MACEC,OAAM,OAAN,KAAc,GAAQ;IACtB,IAAIC,OAAO,GAACD,OAAM,CAAE,CAAF,CAAlB;;QACEL,OAAO;MACR;IAED;;QACEE,QAAU,SAAV,IAAoBK,MAAK,eAAL,CAAYD,OAAZ,MAAYC;MAChC,QAAO,eAAgBD,OAAhB,CAAP;MACD;QAAA;MAAA;IACF;EAGD;;MACE,OAAMD,eAAc,CAAGD,MAAjB,GAAyB,CAAzB,CAAN,KAAiD;IACjD,oBAAmB,UAAW,CAACI,GAAZ,EAAnB;IACAH,OAAO,sBAAiB,CAAjB,IAA0BL,OAAM,CAAIK,OACrC,GADiC,CAAhC,GACAA,OAAW,CAAK,CAAL,CADX,GACgBA,OADvB;IAGD;MAAA;IAAA;EAED;;EACD;AAED;;SACEI,iBAAsBJ;SACpB,IAASN,UAAT,CAAoB,UAAOW,UAAP,EAAO;IAC3B,IAAIC,GAAG,UAAQ,OAAf;;QACEA,WAAW;MACXD,UAAO,SAAP;MACD;IACD;;IACA,IAAIE,SAAS,IAAIC,KAAJ,CAAKF,GAAL,CAAb;IACA,IAAIG,SAAO,GAAK,CAAhB;;;QAEEC,OAAM,GAAM,UAAQC,CAAR,EAAQ;MACpB,IAAIC,SAAQd,IAAG,QAAM,GAAN,CAAf;MACA,YAAW,GAAI,KAAf;gBACQ,sBAAK;YACT,YAAKe,KAAL,EAAe;cACb,WAAW;YACXC,QAAO,GAAG,IAAV;YACDC;UACD;;UACDR;QACD,CAPW;QAQXS,iBAAUC,GAAV,EAAU;UAAA;QAAA,CARC;gBAST,cAAY;UACZR,SAAI;;cACFA,SAAI,KAAOH,GAAX,IAAqB;gBACnBS,YAAWT,KAAK;wBACT,MAAOY,OACZA,YAAQ;gBAAA;cAAA,CAAR,EAAQ,EAAR,CADY,GAEfX;YACD;;YACDF;UACF;QACC;MAnBS,CAAL;IAJV;;iBAAU;MAwBTK;IACA;EACJ,CAlCG","names":["Observable","isArray","map","isObject","from","length","sources","first_1","Object","pop","forkJoinInternal","subscriber","len","values","Array","completed","_loop_1","i","source","value","hasValue","emitted","error","err","keys"],"sources":["../../../src/internal/observable/forkJoin.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}