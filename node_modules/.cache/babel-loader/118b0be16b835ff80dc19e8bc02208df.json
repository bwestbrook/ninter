{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { NetworkType } from '@airgap/beacon-types';\nimport { BlockExplorer } from './block-explorer';\nexport class TezblockBlockExplorer extends BlockExplorer {\n  constructor(rpcUrls = {\n    [NetworkType.MAINNET]: 'https://tezblock.io',\n    [NetworkType.DELPHINET]: 'https://delphinet.tezblock.io',\n    [NetworkType.EDONET]: 'https://edonet.tezblock.io',\n    [NetworkType.FLORENCENET]: 'https://florencenet.tezblock.io',\n    [NetworkType.GRANADANET]: 'https://granadanet.tezblock.io',\n    [NetworkType.HANGZHOUNET]: 'https://hangzhounet.tezblock.io',\n    [NetworkType.ITHACANET]: 'https://ithacanet.tezblock.io',\n    [NetworkType.JAKARTANET]: 'https://jakartanet.tezblock.io',\n    [NetworkType.CUSTOM]: 'https://jakartanet.tezblock.io'\n  }) {\n    super(rpcUrls);\n    this.rpcUrls = rpcUrls;\n  }\n\n  getAddressLink(address, network) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const blockExplorer = yield this.getLinkForNetwork(network);\n      return `${blockExplorer}/account/${address}`;\n    });\n  }\n\n  getTransactionLink(transactionId, network) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const blockExplorer = yield this.getLinkForNetwork(network);\n      return `${blockExplorer}/transaction/${transactionId}`;\n    });\n  }\n\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAkBA,WAAlB,QAAqC,sBAArC;AACA,SAASC,aAAT,QAA8B,kBAA9B;AAEA,OAAM,MAAOC,qBAAP,SAAqCD,aAArC,CAAkD;EACtDE,YACkBC,UAA4C;IAC1D,CAACJ,WAAW,CAACK,OAAb,GAAuB,qBADmC;IAE1D,CAACL,WAAW,CAACM,SAAb,GAAyB,+BAFiC;IAG1D,CAACN,WAAW,CAACO,MAAb,GAAsB,4BAHoC;IAI1D,CAACP,WAAW,CAACQ,WAAb,GAA2B,iCAJ+B;IAK1D,CAACR,WAAW,CAACS,UAAb,GAA0B,gCALgC;IAM1D,CAACT,WAAW,CAACU,WAAb,GAA2B,iCAN+B;IAO1D,CAACV,WAAW,CAACW,SAAb,GAAyB,+BAPiC;IAQ1D,CAACX,WAAW,CAACY,UAAb,GAA0B,gCARgC;IAS1D,CAACZ,WAAW,CAACa,MAAb,GAAsB;EAToC,CAD9D,EAWG;IAED,MAAMT,OAAN;IAZgB;EAajB;;EAEYU,cAAc,CAACC,OAAD,EAAkBC,OAAlB,EAAkC;;MAC3D,MAAMC,aAAa,GAAG,MAAM,KAAKC,iBAAL,CAAuBF,OAAvB,CAA5B;MAEA,OAAO,GAAGC,aAAa,YAAYF,OAAO,EAA1C;IACD;EAAA;;EACYI,kBAAkB,CAACC,aAAD,EAAwBJ,OAAxB,EAAwC;;MACrE,MAAMC,aAAa,GAAG,MAAM,KAAKC,iBAAL,CAAuBF,OAAvB,CAA5B;MAEA,OAAO,GAAGC,aAAa,gBAAgBG,aAAa,EAApD;IACD;EAAA;;AA1BqD","names":["NetworkType","BlockExplorer","TezblockBlockExplorer","constructor","rpcUrls","MAINNET","DELPHINET","EDONET","FLORENCENET","GRANADANET","HANGZHOUNET","ITHACANET","JAKARTANET","CUSTOM","getAddressLink","address","network","blockExplorer","getLinkForNetwork","getTransactionLink","transactionId"],"sourceRoot":"","sources":["../../../src/utils/tezblock-blockexplorer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}