{"ast":null,"code":"export var BeaconErrorType;\n\n(function (BeaconErrorType) {\n  /**\n   * {@link BroadcastBeaconError}\n   *\n   * Will be returned if the user chooses that the transaction is broadcast but there is an error (eg. node not available).\n   *\n   * Returned by: Broadcast | Operation Request\n   */\n  BeaconErrorType[\"BROADCAST_ERROR\"] = \"BROADCAST_ERROR\";\n  /**\n   * {@link NetworkNotSupportedBeaconError}\n   *\n   * Will be returned if the selected network is not supported by the wallet / extension.\n   *\n   * Returned by: Permission\n   */\n\n  BeaconErrorType[\"NETWORK_NOT_SUPPORTED\"] = \"NETWORK_NOT_SUPPORTED\";\n  /**\n   * {@link NoAddressBeaconError}\n   *\n   * Will be returned if there is no address present for the protocol / network requested.\n   *\n   * Returned by: Permission\n   */\n\n  BeaconErrorType[\"NO_ADDRESS_ERROR\"] = \"NO_ADDRESS_ERROR\";\n  /**\n   * {@link NoPrivateKeyBeaconError}\n   *\n   * Will be returned if the private key matching the sourceAddress could not be found.\n   *\n   * Returned by: Sign\n   */\n\n  BeaconErrorType[\"NO_PRIVATE_KEY_FOUND_ERROR\"] = \"NO_PRIVATE_KEY_FOUND_ERROR\";\n  /**\n   * {@link NotGrantedBeaconError}\n   *\n   * Will be returned if the signature was blocked // (Not needed?) Permission: Will be returned if the permissions requested by the App were not granted.\n   *\n   * Returned by: Sign\n   */\n\n  BeaconErrorType[\"NOT_GRANTED_ERROR\"] = \"NOT_GRANTED_ERROR\";\n  /**\n   * {@link ParametersInvalidBeaconError}\n   *\n   * Will be returned if any of the parameters are invalid.\n   *\n   * Returned by: Operation Request\n   */\n\n  BeaconErrorType[\"PARAMETERS_INVALID_ERROR\"] = \"PARAMETERS_INVALID_ERROR\";\n  /**\n   * {@link TooManyOperationsBeaconError}\n   *\n   * Will be returned if too many operations were in the request and they were not able to fit into a single operation group.\n   *\n   * Returned by: Operation Request\n   */\n\n  BeaconErrorType[\"TOO_MANY_OPERATIONS\"] = \"TOO_MANY_OPERATIONS\";\n  /**\n   * {@link TransactionInvalidBeaconError}\n   *\n   * Will be returned if the transaction is not parsable or is rejected by the node.\n   *\n   * Returned by: Broadcast\n   */\n\n  BeaconErrorType[\"TRANSACTION_INVALID_ERROR\"] = \"TRANSACTION_INVALID_ERROR\";\n  /**\n   * {@link SignatureTypeNotSupportedBeaconError}\n   *\n   * Will be returned if the signing type is not supported.\n   *\n   * Returned by: Sign\n   */\n\n  BeaconErrorType[\"SIGNATURE_TYPE_NOT_SUPPORTED\"] = \"SIGNATURE_TYPE_NOT_SUPPORTED\"; // TODO: ENCRYPTION\n  // /**\n  //  * {@link EncryptionTypeNotSupportedBeaconError}\n  //  *\n  //  * Will be returned if the encryption type is not supported.\n  //  *\n  //  * Returned by: Encrypt\n  //  */\n  // ENCRYPTION_TYPE_NOT_SUPPORTED = 'ENCRYPTION_TYPE_NOT_SUPPORTED',\n\n  /**\n   * {@link AbortedBeaconError}\n   *\n   * Will be returned if the request was aborted by the user or the wallet.\n   *\n   * Returned by: Permission | Operation Request | Sign Request | Broadcast\n   */\n\n  BeaconErrorType[\"ABORTED_ERROR\"] = \"ABORTED_ERROR\";\n  /**\n   * {@link UnknownBeaconError}\n   *\n   * Used as a wildcard if an unexpected error occured.\n   *\n   * Returned by: Permission | Operation Request | Sign Request | Broadcast\n   */\n\n  BeaconErrorType[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n})(BeaconErrorType || (BeaconErrorType = {}));","map":{"version":3,"mappings":"AAAA,WAAYA,eAAZ;;AAAA,WAAYA,eAAZ,EAA2B;EACzB;;;;;;;EAOAA;EAEA;;;;;;;;EAOAA;EAEA;;;;;;;;EAOAA;EAEA;;;;;;;;EAOAA;EAEA;;;;;;;;EAOAA;EAEA;;;;;;;;EAOAA;EAEA;;;;;;;;EAOAA;EAEA;;;;;;;;EAOAA;EAEA;;;;;;;;EAOAA,iFAhFyB,CAkFzB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;;;;;;;EAOAA;EAEA;;;;;;;;EAOAA;AACD,CA7GD,EAAYA,eAAe,KAAfA,eAAe,MAA3B","names":["BeaconErrorType"],"sourceRoot":"","sources":["../../../src/types/BeaconErrorType.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}