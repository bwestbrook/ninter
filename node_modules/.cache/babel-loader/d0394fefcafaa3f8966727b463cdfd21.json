{"ast":null,"code":"import { MatrixMessageType } from '../models/MatrixMessage';\n/**\n * Check if an event is a create event\n *\n * @param event MatrixStateEvent\n */\n\nexport const isCreateEvent = event => event.type === 'm.room.create' && event.content instanceof Object && 'creator' in event.content;\n/**\n * Check if an event is a join event\n *\n * @param event MatrixStateEvent\n */\n\nexport const isJoinEvent = event => event.type === 'm.room.member' && event.content instanceof Object && 'membership' in event.content && // eslint-disable-next-line dot-notation\nevent.content['membership'] === 'join';\n/**\n * Check if an event is a message event\n *\n * @param event MatrixStateEvent\n */\n\nexport const isMessageEvent = event => event.type === 'm.room.message';\n/**\n * Check if an event is a text message event\n *\n * @param event MatrixStateEvent\n */\n\nexport const isTextMessageEvent = event => isMessageEvent(event) && event.content instanceof Object && 'msgtype' in event.content && // eslint-disable-next-line dot-notation\nevent.content['msgtype'] === MatrixMessageType.TEXT;","map":{"version":3,"mappings":"AACA,SAASA,iBAAT,QAAkC,yBAAlC;AAEA;;;;;;AAKA,OAAO,MAAMC,aAAa,GAAIC,KAAD,IAC3BA,KAAK,CAACC,IAAN,KAAe,eAAf,IAAkCD,KAAK,CAACE,OAAN,YAAyBC,MAA3D,IAAqE,aAAaH,KAAK,CAACE,OADnF;AAGP;;;;;;AAKA,OAAO,MAAME,WAAW,GAAIJ,KAAD,IACzBA,KAAK,CAACC,IAAN,KAAe,eAAf,IACAD,KAAK,CAACE,OAAN,YAAyBC,MADzB,IAEA,gBAAgBH,KAAK,CAACE,OAFtB,IAGA;AACAF,KAAK,CAACE,OAAN,CAAc,YAAd,MAAgC,MAL3B;AAOP;;;;;;AAKA,OAAO,MAAMG,cAAc,GAAIL,KAAD,IAAsCA,KAAK,CAACC,IAAN,KAAe,gBAA5E;AAEP;;;;;;AAKA,OAAO,MAAMK,kBAAkB,GAAIN,KAAD,IAChCK,cAAc,CAACL,KAAD,CAAd,IACAA,KAAK,CAACE,OAAN,YAAyBC,MADzB,IAEA,aAAaH,KAAK,CAACE,OAFnB,IAGA;AACAF,KAAK,CAACE,OAAN,CAAc,SAAd,MAA6BJ,iBAAiB,CAACS,IAL1C","names":["MatrixMessageType","isCreateEvent","event","type","content","Object","isJoinEvent","isMessageEvent","isTextMessageEvent","TEXT"],"sourceRoot":"","sources":["../../../../src/matrix-client/utils/events.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}