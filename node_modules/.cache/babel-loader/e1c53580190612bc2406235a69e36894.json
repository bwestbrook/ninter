{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_map,_observable_from,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeMap(project, resultSelector, concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Number.POSITIVE_INFINITY;\n  }\n\n  if (typeof resultSelector === 'function') {\n    return function (source) {\n      return source.pipe(mergeMap(function (a, i) {\n        return from(project(a, i)).pipe(map(function (b, ii) {\n          return resultSelector(a, b, i, ii);\n        }));\n      }, concurrent));\n    };\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n\n  return function (source) {\n    return source.lift(new MergeMapOperator(project, concurrent));\n  };\n}\n\nvar MergeMapOperator = /*@__PURE__*/function () {\n  function MergeMapOperator(project, concurrent) {\n    if (concurrent === void 0) {\n      concurrent = Number.POSITIVE_INFINITY;\n    }\n\n    this.project = project;\n    this.concurrent = concurrent;\n  }\n\n  MergeMapOperator.prototype.call = function (observer, source) {\n    return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n  };\n\n  return MergeMapOperator;\n}();\n\nexport { MergeMapOperator };\n\nvar MergeMapSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(MergeMapSubscriber, _super);\n\n  function MergeMapSubscriber(destination, project, concurrent) {\n    if (concurrent === void 0) {\n      concurrent = Number.POSITIVE_INFINITY;\n    }\n\n    var _this = _super.call(this, destination) || this;\n\n    _this.project = project;\n    _this.concurrent = concurrent;\n    _this.hasCompleted = false;\n    _this.buffer = [];\n    _this.active = 0;\n    _this.index = 0;\n    return _this;\n  }\n\n  MergeMapSubscriber.prototype._next = function (value) {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  };\n\n  MergeMapSubscriber.prototype._tryNext = function (value) {\n    var result;\n    var index = this.index++;\n\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    this.active++;\n\n    this._innerSub(result);\n  };\n\n  MergeMapSubscriber.prototype._innerSub = function (ish) {\n    var innerSubscriber = new SimpleInnerSubscriber(this);\n    var destination = this.destination;\n    destination.add(innerSubscriber);\n    var innerSubscription = innerSubscribe(ish, innerSubscriber);\n\n    if (innerSubscription !== innerSubscriber) {\n      destination.add(innerSubscription);\n    }\n  };\n\n  MergeMapSubscriber.prototype._complete = function () {\n    this.hasCompleted = true;\n\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n\n    this.unsubscribe();\n  };\n\n  MergeMapSubscriber.prototype.notifyNext = function (innerValue) {\n    this.destination.next(innerValue);\n  };\n\n  MergeMapSubscriber.prototype.notifyComplete = function () {\n    var buffer = this.buffer;\n    this.active--;\n\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  };\n\n  return MergeMapSubscriber;\n}(SimpleOuterSubscriber);\n\nexport { MergeMapSubscriber };\nexport var flatMap = mergeMap;","map":{"version":3,"mappings":";AAKA,OAAO,KAAKA,OAAZ,MAAoB,OAApB;AACA,SAASC,GAAT,QAAe,OAAf;AACA,SAASC,IAAT,QAAS,oBAAT;AAgEA,SAAMC,qBAAN,EACyCC,qBADzC,EAGEC,cAHF,QAG+C,mBAH/C;OAGE,2CAAqBC,UAArB,EAA4B;EAE5B,IAAIA,UAAO,WAAX,EAAyB;IAEvBA,UAAO,SAAC,kBAAR;EAKD;;aAAUC,mBAAqB,YAAK;IACnC,iBAAaC,MAAb,EAAa;MAAc,OAACA;QAAA;UAAA;QAAA;MAAA,eAAD;IAAC,CAA5B;EACD,OACD,IAAO,0BAA2B,QAAlC,EAA6C;IAC9CF;EAED;;EACE;IAAoB,OAAwDE,MACxD,KADwD,CACX,yCADW,CAAxD;EAC6C,CADjE;;;oBAA2B,GAAP,aAAwD;WACxDC,0BAA6CH;IAChE;MAEDA;IACE;;IAGD;IACH;EAAC;;;IAOD;EAA8C;;EAM5C;CAtB4E;;SAsB5EG;;sBAC2B,GAAP,aAAwD;SACxD,+BAA6CC;;WAPzDC,mBAAwBC,aAAMC;IAC9B,cAAM,KAAW,MAAjB,EAAiB;MACjBP,UAAM,GAAaQ,wBAAnB;IACE;;;;IAMTC;IAESA;IACRA,KAAI,aAAJ,GAAkB,KAAlB;SACE,UAAK;SACN;SAAM;WACLA;;;EAEJJ,kBAAC,UAAD,CAACK,KAAD,GAAC;IAES,mCAAQ;MACZ,cAA2BC,KAA3B;IACJ,CAFQ,MAGJ;MACF,YAASC,IAAT,CAAcD,KAAd;IACD;GAPH;;oBAQS,WAAYE,WAAY;QAC7BC;QACDC;;IACD,IAAI;MACAD,MAAC,QAAUP,OAAV,CAAkBI,KAAlB,EAAkBI,KAAlB,CAAD;IACL,CAFC,CAIM;MACA,iBAAeC,KAAf,CAAsBC,GAAtB;MACA;IACN;;IACA,KAAMC,MAAN;;IAIA,KAAIC,SAAJ,CAAIL,MAAJ;;;oBAEC;IACF;IAES;IACRR,WAAK,IAAL,CAAKc,eAAL;IACA,IAAIC,iBAAiB,iBAAgB,MAAMD,eAAN,CAArC;;QACEC,iBAAiB,sBAAY;MAC9Bf;IACD;EACD;;EAEDD,yCAAU,YAAC;IACT,KAAKiB,YAAL,GAAiB,IAAjB;;IACD;MAED;IACE;;IACA,KAAKC,WAAL;GANF;;oBAQc,CAACC,UAAOC,aAAU;SAC7BnB;;;oBACM,WAAYoB,iBAAY;QAC9BC;IACF;;IACH,uBAAC;MAnE6C,WAAqBA,MAmElE,MAnEkE,EAArB;KAmE9C,MAKa,SAAUT,MAAV,KAAmB,CAAnB,IAAmB,iBAAnB,EAAmB;;;;;;CAjE8C","names":["tslib_1","map","from","SimpleOuterSubscriber","SimpleInnerSubscriber","innerSubscribe","concurrent","resultSelector","source","MergeMapOperator","_super","MergeMapSubscriber","destination","project","Number","_this","_next","value","push","_tryNext","result","index","error","err","active","_innerSub","innerSubscriber","innerSubscription","hasCompleted","unsubscribe","prototype","notifyNext","notifyComplete","buffer"],"sources":["../../../src/internal/operators/mergeMap.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}