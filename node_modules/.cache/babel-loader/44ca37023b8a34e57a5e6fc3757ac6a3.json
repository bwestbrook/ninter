{"ast":null,"code":"import * as qrcode from 'qrcode-generator';\nimport { Logger } from '@airgap/beacon-core';\nconst logger = new Logger('QR');\n/**\n * Convert data to a QR code\n *\n * @param payload The data to be encoded as a QR code\n * @param type How the QR code will be encoded\n */\n\nexport const getQrData = (payload, type) => {\n  const typeNumber = 0;\n  const errorCorrectionLevel = 'L';\n  const qr = qrcode(typeNumber, errorCorrectionLevel);\n\n  if (payload.length > 500) {\n    logger.warn('getQrData', 'The size of the payload in the QR code is quite long and some devices might not be able to scan it anymore. To reduce the QR size, try using a shorter \"name\", \"appUrl\" and \"iconUrl\"');\n  }\n\n  try {\n    qr.addData(payload);\n    qr.make();\n\n    if (type === 'svg') {\n      return qr.createSvgTag();\n    } else if (type === 'ascii') {\n      const length = qr.getModuleCount();\n      const black = '\\x1B[40m  \\x1B[0m';\n      const white = '\\x1B[47m  \\x1B[0m';\n      const whiteLine = new Array(length + 3).join(white);\n      const blackLine = new Array(length + 3).join(black);\n      let ascii = '';\n      ascii += `${blackLine}\\n`;\n      ascii += `${whiteLine}\\n`;\n\n      for (let x = 0; x < length; x++) {\n        ascii += white;\n\n        for (let y = 0; y < length; y++) {\n          ascii += qr.isDark(x, y) ? black : white;\n        }\n\n        ascii += `${white}\\n`;\n      }\n\n      ascii += whiteLine;\n      ascii += blackLine;\n      return ascii;\n    } else {\n      return qr.createDataURL();\n    }\n  } catch (qrError) {\n    console.error('error', qrError);\n    throw qrError;\n  }\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,kBAAxB;AACA,SAASC,MAAT,QAAuB,qBAAvB;AAEA,MAAMC,MAAM,GAAG,IAAID,MAAJ,CAAW,IAAX,CAAf;AAEA;;;;;;;AAMA,OAAO,MAAME,SAAS,GAAG,CAACC,OAAD,EAAkBC,IAAlB,KAA6D;EACpF,MAAMC,UAAU,GAAe,CAA/B;EACA,MAAMC,oBAAoB,GAAyB,GAAnD;EACA,MAAMC,EAAE,GAAIR,MAAc,CAACM,UAAD,EAAaC,oBAAb,CAA1B;;EAEA,IAAIH,OAAO,CAACK,MAAR,GAAiB,GAArB,EAA0B;IACxBP,MAAM,CAACQ,IAAP,CACE,WADF,EAEE,uLAFF;EAID;;EAED,IAAI;IACFF,EAAE,CAACG,OAAH,CAAWP,OAAX;IACAI,EAAE,CAACI,IAAH;;IACA,IAAIP,IAAI,KAAK,KAAb,EAAoB;MAClB,OAAOG,EAAE,CAACK,YAAH,EAAP;IACD,CAFD,MAEO,IAAIR,IAAI,KAAK,OAAb,EAAsB;MAC3B,MAAMI,MAAM,GAAWD,EAAE,CAACM,cAAH,EAAvB;MACA,MAAMC,KAAK,GAAG,mBAAd;MACA,MAAMC,KAAK,GAAG,mBAAd;MACA,MAAMC,SAAS,GAAG,IAAIC,KAAJ,CAAUT,MAAM,GAAG,CAAnB,EAAsBU,IAAtB,CAA2BH,KAA3B,CAAlB;MACA,MAAMI,SAAS,GAAG,IAAIF,KAAJ,CAAUT,MAAM,GAAG,CAAnB,EAAsBU,IAAtB,CAA2BJ,KAA3B,CAAlB;MAEA,IAAIM,KAAK,GAAG,EAAZ;MACAA,KAAK,IAAI,GAAGD,SAAS,IAArB;MACAC,KAAK,IAAI,GAAGJ,SAAS,IAArB;;MACA,KAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,MAApB,EAA4Ba,CAAC,EAA7B,EAAiC;QAC/BD,KAAK,IAAIL,KAAT;;QAEA,KAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,MAApB,EAA4Bc,CAAC,EAA7B,EAAiC;UAC/BF,KAAK,IAAIb,EAAE,CAACgB,MAAH,CAAUF,CAAV,EAAaC,CAAb,IAAkBR,KAAlB,GAA0BC,KAAnC;QACD;;QAEDK,KAAK,IAAI,GAAGL,KAAK,IAAjB;MACD;;MACDK,KAAK,IAAIJ,SAAT;MACAI,KAAK,IAAID,SAAT;MAEA,OAAOC,KAAP;IACD,CAvBM,MAuBA;MACL,OAAOb,EAAE,CAACiB,aAAH,EAAP;IACD;EACF,CA/BD,CA+BE,OAAOC,OAAP,EAAgB;IAChBC,OAAO,CAACC,KAAR,CAAc,OAAd,EAAuBF,OAAvB;IACA,MAAMA,OAAN;EACD;AACF,CA/CM","names":["qrcode","Logger","logger","getQrData","payload","type","typeNumber","errorCorrectionLevel","qr","length","warn","addData","make","createSvgTag","getModuleCount","black","white","whiteLine","Array","join","blackLine","ascii","x","y","isDark","createDataURL","qrError","console","error"],"sourceRoot":"","sources":["../../../src/utils/qr.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}