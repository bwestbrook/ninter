{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { StorageManager } from './StorageManager';\n/**\n * @internalapi\n *\n * The PeerManager provides CRUD functionality for peer entities and persists them to the provided storage.\n */\n\nexport class PeerManager {\n  constructor(storage, key) {\n    this.storageManager = new StorageManager(storage, key);\n  }\n\n  hasPeer(publicKey) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return (yield this.getPeer(publicKey)) ? true : false;\n    });\n  }\n\n  getPeers() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.getAll();\n    });\n  }\n\n  getPeer(publicKey) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.getOne(peer => peer.publicKey === publicKey);\n    });\n  }\n\n  addPeer(peerInfo) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.addOne(peerInfo, peer => peer.publicKey === peerInfo.publicKey);\n    });\n  }\n\n  removePeer(publicKey) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.remove(peer => peer.publicKey === publicKey);\n    });\n  }\n\n  removePeers(publicKeys) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.remove(peer => publicKeys.includes(peer.publicKey));\n    });\n  }\n\n  removeAllPeers() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.removeAll();\n    });\n  }\n\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,cAAT,QAA0C,kBAA1C;AAEA;;;;;;AAKA,OAAM,MAAOC,WAAP,CAAkB;EAStBC,YAAYC,OAAZ,EAA8BC,GAA9B,EAAoC;IAClC,KAAKC,cAAL,GAAsB,IAAIL,cAAJ,CAAmBG,OAAnB,EAA4BC,GAA5B,CAAtB;EACD;;EAEYE,OAAO,CAACC,SAAD,EAAkB;;MACpC,OAAO,CAAC,MAAM,KAAKC,OAAL,CAAaD,SAAb,CAAP,IAAkC,IAAlC,GAAyC,KAAhD;IACD;EAAA;;EAEYE,QAAQ;;MACnB,OAAO,KAAKJ,cAAL,CAAoBK,MAApB,EAAP;IACD;EAAA;;EAEYF,OAAO,CAACD,SAAD,EAAkB;;MACpC,OAAO,KAAKF,cAAL,CAAoBM,MAApB,CAA4BC,IAAD,IAAUA,IAAI,CAACL,SAAL,KAAmBA,SAAxD,CAAP;IACD;EAAA;;EAEYM,OAAO,CAACC,QAAD,EAA6C;;MAC/D,OAAO,KAAKT,cAAL,CAAoBU,MAApB,CAA2BD,QAA3B,EAAsCF,IAAD,IAAUA,IAAI,CAACL,SAAL,KAAmBO,QAAQ,CAACP,SAA3E,CAAP;IACD;EAAA;;EAEYS,UAAU,CAACT,SAAD,EAAkB;;MACvC,OAAO,KAAKF,cAAL,CAAoBY,MAApB,CAA4BL,IAAD,IAAUA,IAAI,CAACL,SAAL,KAAmBA,SAAxD,CAAP;IACD;EAAA;;EAEYW,WAAW,CAACC,UAAD,EAAqB;;MAC3C,OAAO,KAAKd,cAAL,CAAoBY,MAApB,CAA4BL,IAAD,IAAUO,UAAU,CAACC,QAAX,CAAoBR,IAAI,CAACL,SAAzB,CAArC,CAAP;IACD;EAAA;;EAEYc,cAAc;;MACzB,OAAO,KAAKhB,cAAL,CAAoBiB,SAApB,EAAP;IACD;EAAA;;AAvCqB","names":["StorageManager","PeerManager","constructor","storage","key","storageManager","hasPeer","publicKey","getPeer","getPeers","getAll","getOne","peer","addPeer","peerInfo","addOne","removePeer","remove","removePeers","publicKeys","includes","removeAllPeers","removeAll"],"sourceRoot":"","sources":["../../../src/managers/PeerManager.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}