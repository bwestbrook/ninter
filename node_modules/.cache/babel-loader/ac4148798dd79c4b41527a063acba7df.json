{"ast":null,"code":"import { EventEmitter } from 'events';\nimport { keys } from '@airgap/beacon-utils';\nimport { MatrixRoomStatus } from './models/MatrixRoom';\nimport { MatrixClientEventType } from './models/MatrixClientEvent';\nexport class MatrixClientEventEmitter extends EventEmitter {\n  constructor() {\n    super(...arguments);\n    this.eventEmitProviders = new Map([[MatrixClientEventType.INVITE, () => [this.isInvite, this.emitInvite.bind(this)]], [MatrixClientEventType.MESSAGE, () => [this.isMessage, this.emitMessage.bind(this)]]]);\n  }\n  /**\n   * This method is called every time the state is changed\n   *\n   * @param _oldState\n   * @param _newState\n   * @param stateChange\n   */\n\n\n  onStateChanged(_oldState, _newState, stateChange) {\n    for (const event of keys(MatrixClientEventType)) {\n      this.emitIfEvent(MatrixClientEventType[event], stateChange);\n    }\n  }\n  /**\n   * Emit the message if we have listeners registered for that type\n   *\n   * @param eventType\n   * @param object\n   */\n\n\n  emitIfEvent(eventType, object) {\n    const provider = this.eventEmitProviders.get(eventType);\n\n    if (provider) {\n      const [predicate, emitter] = provider();\n\n      if (predicate(object)) {\n        emitter(eventType, object);\n      }\n    }\n  }\n  /**\n   * Emit a client event\n   *\n   * @param eventType\n   * @param content\n   */\n\n\n  emitClientEvent(eventType, content, timestamp) {\n    this.emit(eventType, {\n      type: eventType,\n      content,\n      timestamp\n    });\n  }\n  /**\n   * Check if event is an invite\n   *\n   * @param stateChange\n   */\n\n\n  isInvite(stateChange) {\n    return stateChange.rooms ? stateChange.rooms.some(room => room.status === MatrixRoomStatus.INVITED) : false;\n  }\n  /**\n   * Emit an invite\n   *\n   * @param eventType\n   * @param stateChange\n   */\n\n\n  emitInvite(eventType, stateChange) {\n    stateChange.rooms.filter(room => room.status === MatrixRoomStatus.INVITED).map(room => [room.id, room.members]).forEach(([id, members]) => {\n      this.emitClientEvent(eventType, {\n        roomId: id,\n        members: members\n      });\n    });\n  }\n  /**\n   * Check if event is a message\n   *\n   * @param stateChange\n   */\n\n\n  isMessage(stateChange) {\n    return stateChange.rooms ? stateChange.rooms.some(room => room.messages.length > 0) : false;\n  }\n  /**\n   * Emit an event to all rooms\n   *\n   * @param eventType\n   * @param stateChange\n   */\n\n\n  emitMessage(eventType, stateChange) {\n    stateChange.rooms.filter(room => room.messages.length > 0).map(room => room.messages.map(message => [room.id, message, message.timestamp])).reduce((flatten, toFlatten) => flatten.concat(toFlatten), []).forEach(([roomId, message, timestamp]) => {\n      this.emitClientEvent(eventType, {\n        roomId,\n        message\n      }, timestamp);\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["EventEmitter","keys","MatrixRoomStatus","MatrixClientEventType","MatrixClientEventEmitter","constructor","Map","INVITE","isInvite","emitInvite","bind","MESSAGE","isMessage","emitMessage","onStateChanged","_oldState","_newState","stateChange","event","emitIfEvent","eventType","object","provider","eventEmitProviders","get","predicate","emitter","emitClientEvent","content","timestamp","emit","type","rooms","some","room","status","INVITED","filter","map","id","members","forEach","roomId","messages","length","message","reduce","flatten","toFlatten","concat"],"sourceRoot":"","sources":["../../../src/matrix-client/MatrixClientEventEmitter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}