{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { StorageKey } from '@airgap/beacon-types';\nimport { StorageManager } from './StorageManager';\nimport { PermissionValidator } from './PermissionValidator';\n/**\n * @internalapi\n *\n * The PermissionManager provides CRUD functionality for permission entities and persists them to the provided storage.\n */\n\nexport class PermissionManager {\n  constructor(storage) {\n    this.storageManager = new StorageManager(storage, StorageKey.PERMISSION_LIST);\n  }\n\n  getPermissions() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.getAll();\n    });\n  }\n\n  getPermission(accountIdentifier) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.getOne(permission => permission.accountIdentifier === accountIdentifier);\n    });\n  }\n\n  addPermission(permissionInfo) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.addOne(permissionInfo, permission => permission.accountIdentifier === permissionInfo.accountIdentifier);\n    });\n  }\n\n  removePermission(accountIdentifier) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.remove(permissionInfo => permissionInfo.accountIdentifier === accountIdentifier);\n    });\n  }\n\n  removePermissions(accountIdentifiers) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.remove(permission => accountIdentifiers.includes(permission.accountIdentifier));\n    });\n  }\n\n  removeAllPermissions() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.removeAll();\n    });\n  }\n\n  hasPermission(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return PermissionValidator.hasPermission(message, this.getPermission.bind(this), this.getPermissions.bind(this));\n    });\n  }\n\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAiCA,UAAjC,QAAmE,sBAAnE;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,mBAAT,QAAoC,uBAApC;AAEA;;;;;;AAKA,OAAM,MAAOC,iBAAP,CAAwB;EAG5BC,YAAYC,OAAZ,EAA4B;IAC1B,KAAKC,cAAL,GAAsB,IAAIL,cAAJ,CAAmBI,OAAnB,EAA4BL,UAAU,CAACO,eAAvC,CAAtB;EACD;;EAEYC,cAAc;;MACzB,OAAO,KAAKF,cAAL,CAAoBG,MAApB,EAAP;IACD;EAAA;;EAEYC,aAAa,CAACC,iBAAD,EAA0B;;MAClD,OAAO,KAAKL,cAAL,CAAoBM,MAApB,CACJC,UAAD,IAAgCA,UAAU,CAACF,iBAAX,KAAiCA,iBAD5D,CAAP;IAGD;EAAA;;EAEYG,aAAa,CAACC,cAAD,EAA+B;;MACvD,OAAO,KAAKT,cAAL,CAAoBU,MAApB,CACLD,cADK,EAEJF,UAAD,IACEA,UAAU,CAACF,iBAAX,KAAiCI,cAAc,CAACJ,iBAH7C,CAAP;IAKD;EAAA;;EAEYM,gBAAgB,CAACN,iBAAD,EAA0B;;MACrD,OAAO,KAAKL,cAAL,CAAoBY,MAApB,CACJH,cAAD,IAAoCA,cAAc,CAACJ,iBAAf,KAAqCA,iBADpE,CAAP;IAGD;EAAA;;EAEYQ,iBAAiB,CAACC,kBAAD,EAA6B;;MACzD,OAAO,KAAKd,cAAL,CAAoBY,MAApB,CAA4BL,UAAD,IAChCO,kBAAkB,CAACC,QAAnB,CAA4BR,UAAU,CAACF,iBAAvC,CADK,CAAP;IAGD;EAAA;;EAEYW,oBAAoB;;MAC/B,OAAO,KAAKhB,cAAL,CAAoBiB,SAApB,EAAP;IACD;EAAA;;EAEYC,aAAa,CAACC,OAAD,EAAuB;;MAC/C,OAAOvB,mBAAmB,CAACsB,aAApB,CACLC,OADK,EAEL,KAAKf,aAAL,CAAmBgB,IAAnB,CAAwB,IAAxB,CAFK,EAGL,KAAKlB,cAAL,CAAoBkB,IAApB,CAAyB,IAAzB,CAHK,CAAP;IAKD;EAAA;;AA/C2B","names":["StorageKey","StorageManager","PermissionValidator","PermissionManager","constructor","storage","storageManager","PERMISSION_LIST","getPermissions","getAll","getPermission","accountIdentifier","getOne","permission","addPermission","permissionInfo","addOne","removePermission","remove","removePermissions","accountIdentifiers","includes","removeAllPermissions","removeAll","hasPermission","message","bind"],"sourceRoot":"","sources":["../../../src/managers/PermissionManager.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}