{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n/** PURE_IMPORTS_START _util_canReportError,_util_toSubscriber,_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */\nimport { canReportError } from './util/canReportError';\nimport { toSubscriber } from './util/toSubscriber';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\n\nvar Observable = /*@__PURE__*/function () {\n  function Observable(subscribe) {\n    this._isScalar = false;\n\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  Observable.prototype.lift = function (operator) {\n    var observable = new Observable();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  };\n\n  Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n    var operator = this.operator;\n    var sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      sink.add(operator.call(sink, this.source));\n    } else {\n      sink.add(this.source || config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      if (sink.syncErrorThrowable) {\n        sink.syncErrorThrowable = false;\n\n        if (sink.syncErrorThrown) {\n          throw sink.syncErrorValue;\n        }\n      }\n    }\n\n    return sink;\n  };\n\n  Observable.prototype._trySubscribe = function (sink) {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        sink.syncErrorThrown = true;\n        sink.syncErrorValue = err;\n      }\n\n      if (canReportError(sink)) {\n        sink.error(err);\n      } else {\n        console.warn(err);\n      }\n    }\n  };\n\n  Observable.prototype.forEach = function (next, promiseCtor) {\n    var _this = this;\n\n    promiseCtor = getPromiseCtor(promiseCtor);\n    return new promiseCtor(function (resolve, reject) {\n      var subscription;\n      subscription = _this.subscribe(function (value) {\n        try {\n          next(value);\n        } catch (err) {\n          reject(err);\n\n          if (subscription) {\n            subscription.unsubscribe();\n          }\n        }\n      }, reject, resolve);\n    });\n  };\n\n  Observable.prototype._subscribe = function (subscriber) {\n    var source = this.source;\n    return source && source.subscribe(subscriber);\n  };\n\n  Observable.prototype[Symbol_observable] = function () {\n    return this;\n  };\n\n  Observable.prototype.pipe = function () {\n    var operations = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      operations[_i] = arguments[_i];\n    }\n\n    if (operations.length === 0) {\n      return this;\n    }\n\n    return pipeFromArray(operations)(this);\n  };\n\n  Observable.prototype.toPromise = function (promiseCtor) {\n    var _this = this;\n\n    promiseCtor = getPromiseCtor(promiseCtor);\n    return new promiseCtor(function (resolve, reject) {\n      var value;\n\n      _this.subscribe(function (x) {\n        return value = x;\n      }, function (err) {\n        return reject(err);\n      }, function () {\n        return resolve(value);\n      });\n    });\n  };\n\n  Observable.create = function (subscribe) {\n    return new Observable(subscribe);\n  };\n\n  return Observable;\n}();\n\nexport { Observable };\n\nfunction getPromiseCtor(promiseCtor) {\n  if (!promiseCtor) {\n    promiseCtor = config.Promise || Promise;\n  }\n\n  if (!promiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return promiseCtor;\n}","map":{"version":3,"mappings":";;AAIA;AACA,SAASA,cAAT,QAA6B,uBAA7B;AAGA,SAASC,YAAT,QAAuB,qBAAvB;AACA,SAASC,cAAaC,iBAAtB,QAA4C,qBAA5C;AACA,SAASC,aAAT,QAAuB,aAAvB;AAQA;;IAkBEC,0BAAY,YAA6E;WAflFA,WAASC,WAAkB;IAgBhC,KAAIC,SAAJ,GAAe,KAAf;;QACED,WAAK;MACN;IACF;EAyBD;;YACQ,WAAaE,OAAI,UAAgBC,QAAhB,EAAgB;IACvC,cAAW,GAAM,IAAGJ,UAAH,EAAjB;IACAH,UAAU,CAACQ,MAAX,GAAmB,IAAnB;IACAR,UAAO,SAAP,GAAkBO,QAAlB;IACD;EAuID;;YAIU,uBAAkB;IAC1B,IAAMA,QAAO,gBAAb;IAEA,IAAIE,mBAAU,iCAAd;;QACEF,UAAS;MACVE;WACC;UAEE,KAAK,eAAgBC,MAAE,sCAAF,IAAE,wBAAlB,GACL,KAAKC,UAAL,CAAKF,IAAL,CADK,GAGR;IAED;;QACEC,MAAI,wCAAyB;UAC3BD,IAAI,CAACG,oBAAkB;QACvBH,IAAI,mBAAJ,GAA0B,KAA1B;;YACEA,sBAAW;UACZ;QACF;MACF;IAED;;IACD;EAGD;;YACM;QACF;MACD;IAAC,SACAI,KAAI;UACFH,MAAK,wCAAuB;QAC5BD,IAAI,CAACK,eAAL,GAAsB,IAAtB;QACDL;MACD;;UACEX,cAAc,CAACW,IAAD,GAAE;QACjBA;aACC;QACDM;MACF;IACF;EASD;;YAAA,WAkBCC;IAjBC,YAAW,IAAX;;IAEAC,WAAW,iBAAkB,aAA7B;WAGE,IAAIA,WAAJ,CAA+B;MAC/B;kBACM;YACF;UACDC;QAAC,SACAL,KAAO;UACPM,MAAI,KAAJ;;cACEC,cAAa;YACdA;UACF;QACA;MACe,CATZ,EASYD,MATZ,EASYE,OATZ;IAUT,CAZG;EAeJ;;YACU,wBAAgB;IACxB,UAAO,GAAM,KAAIb,MAAjB;IACD;EAoBD;;YACE,CAAOc,UAAKrB;IACb;EAoCD;;YAAK,kBAA2C;kBAA3C;;SAAA,mCAA2CsB;;IAC9C;;QACEC,UAAO,CAAWC,MAAlB,KAAmB;MACpB;IAED;;IACD;EAQD;;YAAA,WAOCC;IANC,YAAW,IAAX;;IAEAT,WAAW,iBAAY,aAAvB;WACE,IAAIA,WAAJ,CAAe;MACf;;MACeU;QAAA;MAAA;QAAA;MAAA;QAAA;MAAA;IAClB,CAHG;EAhTG;;YACL,CAAOC,SAAI,UAAcxB,SAAd,EAAyB;IACrC;EAkTH;;EAxVA,OAwVCD,UAxVD;CAkBc;;AA+Ud,SAASA,UAAT;;SACO0B,eAAaZ;MAChB,cAAc;IACfA;EAED;;MACE,cAAU;IACX;EAED;;EACD","names":["canReportError","toSubscriber","observable","Symbol_observable","pipeFromArray","Observable","subscribe","_isScalar","lift","operator","source","sink","config","_subscribe","syncErrorThrowable","err","syncErrorThrown","console","forEach","promiseCtor","next","reject","subscription","resolve","prototype","_i","operations","length","toPromise","_this","create","getPromiseCtor"],"sources":["../../src/internal/Observable.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}