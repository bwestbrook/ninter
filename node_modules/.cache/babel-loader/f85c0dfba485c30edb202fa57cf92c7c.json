{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nexport var ExposedPromiseStatus;\n\n(function (ExposedPromiseStatus) {\n  ExposedPromiseStatus[\"PENDING\"] = \"pending\";\n  ExposedPromiseStatus[\"RESOLVED\"] = \"resolved\";\n  ExposedPromiseStatus[\"REJECTED\"] = \"rejected\";\n})(ExposedPromiseStatus || (ExposedPromiseStatus = {}));\n\nconst notInitialized = () => {\n  throw new Error('ExposedPromise not initialized yet.');\n};\n/**\n * Exposed promise allow you to create a promise and then resolve it later, from the outside\n */\n\n\nexport class ExposedPromise {\n  constructor() {\n    this._resolve = notInitialized;\n    this._reject = notInitialized;\n    this._status = ExposedPromiseStatus.PENDING;\n    this._promise = new Promise((innerResolve, innerReject) => {\n      this._resolve = value => {\n        if (this.isSettled()) {\n          return;\n        }\n\n        this._promiseResult = value;\n        innerResolve(value);\n        this._status = ExposedPromiseStatus.RESOLVED;\n        return;\n      };\n\n      this._reject = reason => {\n        if (this.isSettled()) {\n          return;\n        }\n\n        this._promiseError = reason;\n        innerReject(reason);\n        this._status = ExposedPromiseStatus.REJECTED;\n        return;\n      };\n    });\n  }\n\n  get promise() {\n    return this._promise;\n  }\n\n  get resolve() {\n    return this._resolve;\n  }\n\n  get reject() {\n    return this._reject;\n  }\n\n  get status() {\n    return this._status;\n  }\n\n  get promiseResult() {\n    return this._promiseResult;\n  }\n\n  get promiseError() {\n    return this._promiseError;\n  }\n\n  static resolve(value) {\n    const promise = new ExposedPromise();\n    promise.resolve(value);\n    return promise;\n  }\n\n  static reject(reason) {\n    const promise = new ExposedPromise();\n    promise.reject(reason);\n    return promise;\n  }\n\n  isPending() {\n    return this.status === ExposedPromiseStatus.PENDING;\n  }\n\n  isResolved() {\n    return this.status === ExposedPromiseStatus.RESOLVED;\n  }\n\n  isRejected() {\n    return this.status === ExposedPromiseStatus.REJECTED;\n  }\n\n  isSettled() {\n    return this.isResolved() || this.isRejected();\n  }\n\n}","map":{"version":3,"mappings":";AAAA,WAAYA,oBAAZ;;AAAA,WAAYA,oBAAZ,EAAgC;EAC9BA;EACAA;EACAA;AACD,CAJD,EAAYA,oBAAoB,KAApBA,oBAAoB,MAAhC;;AASA,MAAMC,cAAc,GAAG,MAAY;EACjC,MAAM,IAAIC,KAAJ,CAAU,qCAAV,CAAN;AACD,CAFD;AAIA;;;;;AAGA,OAAM,MAAOC,cAAP,CAAqB;EA6BzBC;IA1BQ,gBAAuBH,cAAvB;IACA,eAAqBA,cAArB;IACA,eAAgCD,oBAAoB,CAACK,OAArD;IAyBN,KAAKC,QAAL,GAAgB,IAAIC,OAAJ,CAAe,CAACC,YAAD,EAA2BC,WAA3B,KAA2D;MACxF,KAAKC,QAAL,GAAiBC,KAAD,IAAmB;QACjC,IAAI,KAAKC,SAAL,EAAJ,EAAsB;UACpB;QACD;;QAED,KAAKC,cAAL,GAAsBF,KAAtB;QAEAH,YAAY,CAACG,KAAD,CAAZ;QAEA,KAAKG,OAAL,GAAed,oBAAoB,CAACe,QAApC;QAEA;MACD,CAZD;;MAaA,KAAKC,OAAL,GAAgBC,MAAD,IAAqB;QAClC,IAAI,KAAKL,SAAL,EAAJ,EAAsB;UACpB;QACD;;QAED,KAAKM,aAAL,GAAqBD,MAArB;QAEAR,WAAW,CAACQ,MAAD,CAAX;QAEA,KAAKH,OAAL,GAAed,oBAAoB,CAACmB,QAApC;QAEA;MACD,CAZD;IAaD,CA3Be,CAAhB;EA4BD;;EAjDiB,IAAPC,OAAO;IAChB,OAAO,KAAKd,QAAZ;EACD;;EAEiB,IAAPe,OAAO;IAChB,OAAO,KAAKX,QAAZ;EACD;;EACgB,IAANY,MAAM;IACf,OAAO,KAAKN,OAAZ;EACD;;EACgB,IAANO,MAAM;IACf,OAAO,KAAKT,OAAZ;EACD;;EACuB,IAAbU,aAAa;IACtB,OAAO,KAAKX,cAAZ;EACD;;EACsB,IAAZY,YAAY;IACrB,OAAO,KAAKP,aAAZ;EACD;;EAiCoB,OAAPG,OAAO,CAAIV,KAAJ,EAAY;IAC/B,MAAMS,OAAO,GAAG,IAAIjB,cAAJ,EAAhB;IACAiB,OAAO,CAACC,OAAR,CAAgBV,KAAhB;IAEA,OAAOS,OAAP;EACD;;EAEmB,OAANE,MAAM,CAAyBL,MAAzB,EAAmC;IACrD,MAAMG,OAAO,GAAG,IAAIjB,cAAJ,EAAhB;IACAiB,OAAO,CAACE,MAAR,CAAeL,MAAf;IAEA,OAAOG,OAAP;EACD;;EAEMM,SAAS;IACd,OAAO,KAAKH,MAAL,KAAgBvB,oBAAoB,CAACK,OAA5C;EACD;;EAEMsB,UAAU;IACf,OAAO,KAAKJ,MAAL,KAAgBvB,oBAAoB,CAACe,QAA5C;EACD;;EAEMa,UAAU;IACf,OAAO,KAAKL,MAAL,KAAgBvB,oBAAoB,CAACmB,QAA5C;EACD;;EAEMP,SAAS;IACd,OAAO,KAAKe,UAAL,MAAqB,KAAKC,UAAL,EAA5B;EACD;;AAxFwB","names":["ExposedPromiseStatus","notInitialized","Error","ExposedPromise","constructor","PENDING","_promise","Promise","innerResolve","innerReject","_resolve","value","isSettled","_promiseResult","_status","RESOLVED","_reject","reason","_promiseError","REJECTED","promise","resolve","reject","status","promiseResult","promiseError","isPending","isResolved","isRejected"],"sourceRoot":"","sources":["../../../src/utils/exposed-promise.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}