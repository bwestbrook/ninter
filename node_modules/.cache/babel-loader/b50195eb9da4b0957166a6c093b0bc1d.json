{"ast":null,"code":"exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream);\nexports.writableStream = isFunction(global.WritableStream);\nexports.abortController = isFunction(global.AbortController); // The xhr request to example.com may violate some restrictive CSP configurations,\n// so if we're running in a browser that supports `fetch`, avoid calling getXHR()\n// and assume support for certain features below.\n\nvar xhr;\n\nfunction getXHR() {\n  // Cache the xhr value\n  if (xhr !== undefined) return xhr;\n\n  if (global.XMLHttpRequest) {\n    xhr = new global.XMLHttpRequest(); // If XDomainRequest is available (ie only, where xhr might not work\n    // cross domain), use the page location. Otherwise use example.com\n    // Note: this doesn't actually make an http request.\n\n    try {\n      xhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com');\n    } catch (e) {\n      xhr = null;\n    }\n  } else {\n    // Service workers don't have XHR\n    xhr = null;\n  }\n\n  return xhr;\n}\n\nfunction checkTypeSupport(type) {\n  var xhr = getXHR();\n  if (!xhr) return false;\n\n  try {\n    xhr.responseType = type;\n    return xhr.responseType === type;\n  } catch (e) {}\n\n  return false;\n} // If fetch is supported, then arraybuffer will be supported too. Skip calling\n// checkTypeSupport(), since that calls getXHR().\n\n\nexports.arraybuffer = exports.fetch || checkTypeSupport('arraybuffer'); // These next two tests unavoidably show warnings in Chrome. Since fetch will always\n// be used if it's available, just return false for these to avoid the warnings.\n\nexports.msstream = !exports.fetch && checkTypeSupport('ms-stream');\nexports.mozchunkedarraybuffer = !exports.fetch && checkTypeSupport('moz-chunked-arraybuffer'); // If fetch is supported, then overrideMimeType will be supported too. Skip calling\n// getXHR().\n\nexports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false);\n\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\n\nxhr = null; // Help gc","map":{"version":3,"names":["exports","fetch","isFunction","global","ReadableStream","writableStream","WritableStream","abortController","AbortController","xhr","getXHR","undefined","XMLHttpRequest","open","XDomainRequest","e","checkTypeSupport","type","responseType","arraybuffer","msstream","mozchunkedarraybuffer","overrideMimeType","value"],"sources":["/Users/benjaminwestbrook/Repositories/ninter/node_modules/stream-http/lib/capability.js"],"sourcesContent":["exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream)\n\nexports.writableStream = isFunction(global.WritableStream)\n\nexports.abortController = isFunction(global.AbortController)\n\n// The xhr request to example.com may violate some restrictive CSP configurations,\n// so if we're running in a browser that supports `fetch`, avoid calling getXHR()\n// and assume support for certain features below.\nvar xhr\nfunction getXHR () {\n\t// Cache the xhr value\n\tif (xhr !== undefined) return xhr\n\n\tif (global.XMLHttpRequest) {\n\t\txhr = new global.XMLHttpRequest()\n\t\t// If XDomainRequest is available (ie only, where xhr might not work\n\t\t// cross domain), use the page location. Otherwise use example.com\n\t\t// Note: this doesn't actually make an http request.\n\t\ttry {\n\t\t\txhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com')\n\t\t} catch(e) {\n\t\t\txhr = null\n\t\t}\n\t} else {\n\t\t// Service workers don't have XHR\n\t\txhr = null\n\t}\n\treturn xhr\n}\n\nfunction checkTypeSupport (type) {\n\tvar xhr = getXHR()\n\tif (!xhr) return false\n\ttry {\n\t\txhr.responseType = type\n\t\treturn xhr.responseType === type\n\t} catch (e) {}\n\treturn false\n}\n\n// If fetch is supported, then arraybuffer will be supported too. Skip calling\n// checkTypeSupport(), since that calls getXHR().\nexports.arraybuffer = exports.fetch || checkTypeSupport('arraybuffer')\n\n// These next two tests unavoidably show warnings in Chrome. Since fetch will always\n// be used if it's available, just return false for these to avoid the warnings.\nexports.msstream = !exports.fetch && checkTypeSupport('ms-stream')\nexports.mozchunkedarraybuffer = !exports.fetch && checkTypeSupport('moz-chunked-arraybuffer')\n\n// If fetch is supported, then overrideMimeType will be supported too. Skip calling\n// getXHR().\nexports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false)\n\nfunction isFunction (value) {\n\treturn typeof value === 'function'\n}\n\nxhr = null // Help gc\n"],"mappings":"AAAAA,OAAO,CAACC,KAAR,GAAgBC,UAAU,CAACC,MAAM,CAACF,KAAR,CAAV,IAA4BC,UAAU,CAACC,MAAM,CAACC,cAAR,CAAtD;AAEAJ,OAAO,CAACK,cAAR,GAAyBH,UAAU,CAACC,MAAM,CAACG,cAAR,CAAnC;AAEAN,OAAO,CAACO,eAAR,GAA0BL,UAAU,CAACC,MAAM,CAACK,eAAR,CAApC,C,CAEA;AACA;AACA;;AACA,IAAIC,GAAJ;;AACA,SAASC,MAAT,GAAmB;EAClB;EACA,IAAID,GAAG,KAAKE,SAAZ,EAAuB,OAAOF,GAAP;;EAEvB,IAAIN,MAAM,CAACS,cAAX,EAA2B;IAC1BH,GAAG,GAAG,IAAIN,MAAM,CAACS,cAAX,EAAN,CAD0B,CAE1B;IACA;IACA;;IACA,IAAI;MACHH,GAAG,CAACI,IAAJ,CAAS,KAAT,EAAgBV,MAAM,CAACW,cAAP,GAAwB,GAAxB,GAA8B,qBAA9C;IACA,CAFD,CAEE,OAAMC,CAAN,EAAS;MACVN,GAAG,GAAG,IAAN;IACA;EACD,CAVD,MAUO;IACN;IACAA,GAAG,GAAG,IAAN;EACA;;EACD,OAAOA,GAAP;AACA;;AAED,SAASO,gBAAT,CAA2BC,IAA3B,EAAiC;EAChC,IAAIR,GAAG,GAAGC,MAAM,EAAhB;EACA,IAAI,CAACD,GAAL,EAAU,OAAO,KAAP;;EACV,IAAI;IACHA,GAAG,CAACS,YAAJ,GAAmBD,IAAnB;IACA,OAAOR,GAAG,CAACS,YAAJ,KAAqBD,IAA5B;EACA,CAHD,CAGE,OAAOF,CAAP,EAAU,CAAE;;EACd,OAAO,KAAP;AACA,C,CAED;AACA;;;AACAf,OAAO,CAACmB,WAAR,GAAsBnB,OAAO,CAACC,KAAR,IAAiBe,gBAAgB,CAAC,aAAD,CAAvD,C,CAEA;AACA;;AACAhB,OAAO,CAACoB,QAAR,GAAmB,CAACpB,OAAO,CAACC,KAAT,IAAkBe,gBAAgB,CAAC,WAAD,CAArD;AACAhB,OAAO,CAACqB,qBAAR,GAAgC,CAACrB,OAAO,CAACC,KAAT,IAAkBe,gBAAgB,CAAC,yBAAD,CAAlE,C,CAEA;AACA;;AACAhB,OAAO,CAACsB,gBAAR,GAA2BtB,OAAO,CAACC,KAAR,KAAkBS,MAAM,KAAKR,UAAU,CAACQ,MAAM,GAAGY,gBAAV,CAAf,GAA6C,KAArE,CAA3B;;AAEA,SAASpB,UAAT,CAAqBqB,KAArB,EAA4B;EAC3B,OAAO,OAAOA,KAAP,KAAiB,UAAxB;AACA;;AAEDd,GAAG,GAAG,IAAN,C,CAAW"},"metadata":{},"sourceType":"script"}