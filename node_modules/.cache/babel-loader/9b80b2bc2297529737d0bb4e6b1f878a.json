{"ast":null,"code":"require(\"core-js/modules/es.error.cause.js\");\n\nvar capability = require('./capability');\n\nvar inherits = require('inherits');\n\nvar response = require('./response');\n\nvar stream = require('readable-stream');\n\nvar IncomingMessage = response.IncomingMessage;\nvar rStates = response.readyStates;\n\nfunction decideMode(preferBinary, useFetch) {\n  if (capability.fetch && useFetch) {\n    return 'fetch';\n  } else if (capability.mozchunkedarraybuffer) {\n    return 'moz-chunked-arraybuffer';\n  } else if (capability.msstream) {\n    return 'ms-stream';\n  } else if (capability.arraybuffer && preferBinary) {\n    return 'arraybuffer';\n  } else {\n    return 'text';\n  }\n}\n\nvar ClientRequest = module.exports = function (opts) {\n  var self = this;\n  stream.Writable.call(self);\n  self._opts = opts;\n  self._body = [];\n  self._headers = {};\n  if (opts.auth) self.setHeader('Authorization', 'Basic ' + Buffer.from(opts.auth).toString('base64'));\n  Object.keys(opts.headers).forEach(function (name) {\n    self.setHeader(name, opts.headers[name]);\n  });\n  var preferBinary;\n  var useFetch = true;\n\n  if (opts.mode === 'disable-fetch' || 'requestTimeout' in opts && !capability.abortController) {\n    // If the use of XHR should be preferred. Not typically needed.\n    useFetch = false;\n    preferBinary = true;\n  } else if (opts.mode === 'prefer-streaming') {\n    // If streaming is a high priority but binary compatibility and\n    // the accuracy of the 'content-type' header aren't\n    preferBinary = false;\n  } else if (opts.mode === 'allow-wrong-content-type') {\n    // If streaming is more important than preserving the 'content-type' header\n    preferBinary = !capability.overrideMimeType;\n  } else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {\n    // Use binary if text streaming may corrupt data or the content-type header, or for speed\n    preferBinary = true;\n  } else {\n    throw new Error('Invalid value for opts.mode');\n  }\n\n  self._mode = decideMode(preferBinary, useFetch);\n  self._fetchTimer = null;\n  self._socketTimeout = null;\n  self._socketTimer = null;\n  self.on('finish', function () {\n    self._onFinish();\n  });\n};\n\ninherits(ClientRequest, stream.Writable);\n\nClientRequest.prototype.setHeader = function (name, value) {\n  var self = this;\n  var lowerName = name.toLowerCase(); // This check is not necessary, but it prevents warnings from browsers about setting unsafe\n  // headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but\n  // http-browserify did it, so I will too.\n\n  if (unsafeHeaders.indexOf(lowerName) !== -1) return;\n  self._headers[lowerName] = {\n    name: name,\n    value: value\n  };\n};\n\nClientRequest.prototype.getHeader = function (name) {\n  var header = this._headers[name.toLowerCase()];\n\n  if (header) return header.value;\n  return null;\n};\n\nClientRequest.prototype.removeHeader = function (name) {\n  var self = this;\n  delete self._headers[name.toLowerCase()];\n};\n\nClientRequest.prototype._onFinish = function () {\n  var self = this;\n  if (self._destroyed) return;\n  var opts = self._opts;\n\n  if ('timeout' in opts && opts.timeout !== 0) {\n    self.setTimeout(opts.timeout);\n  }\n\n  var headersObj = self._headers;\n  var body = null;\n\n  if (opts.method !== 'GET' && opts.method !== 'HEAD') {\n    body = new Blob(self._body, {\n      type: (headersObj['content-type'] || {}).value || ''\n    });\n  } // create flattened list of headers\n\n\n  var headersList = [];\n  Object.keys(headersObj).forEach(function (keyName) {\n    var name = headersObj[keyName].name;\n    var value = headersObj[keyName].value;\n\n    if (Array.isArray(value)) {\n      value.forEach(function (v) {\n        headersList.push([name, v]);\n      });\n    } else {\n      headersList.push([name, value]);\n    }\n  });\n\n  if (self._mode === 'fetch') {\n    var signal = null;\n\n    if (capability.abortController) {\n      var controller = new AbortController();\n      signal = controller.signal;\n      self._fetchAbortController = controller;\n\n      if ('requestTimeout' in opts && opts.requestTimeout !== 0) {\n        self._fetchTimer = global.setTimeout(function () {\n          self.emit('requestTimeout');\n          if (self._fetchAbortController) self._fetchAbortController.abort();\n        }, opts.requestTimeout);\n      }\n    }\n\n    global.fetch(self._opts.url, {\n      method: self._opts.method,\n      headers: headersList,\n      body: body || undefined,\n      mode: 'cors',\n      credentials: opts.withCredentials ? 'include' : 'same-origin',\n      signal: signal\n    }).then(function (response) {\n      self._fetchResponse = response;\n\n      self._resetTimers(false);\n\n      self._connect();\n    }, function (reason) {\n      self._resetTimers(true);\n\n      if (!self._destroyed) self.emit('error', reason);\n    });\n  } else {\n    var xhr = self._xhr = new global.XMLHttpRequest();\n\n    try {\n      xhr.open(self._opts.method, self._opts.url, true);\n    } catch (err) {\n      process.nextTick(function () {\n        self.emit('error', err);\n      });\n      return;\n    } // Can't set responseType on really old browsers\n\n\n    if ('responseType' in xhr) xhr.responseType = self._mode;\n    if ('withCredentials' in xhr) xhr.withCredentials = !!opts.withCredentials;\n    if (self._mode === 'text' && 'overrideMimeType' in xhr) xhr.overrideMimeType('text/plain; charset=x-user-defined');\n\n    if ('requestTimeout' in opts) {\n      xhr.timeout = opts.requestTimeout;\n\n      xhr.ontimeout = function () {\n        self.emit('requestTimeout');\n      };\n    }\n\n    headersList.forEach(function (header) {\n      xhr.setRequestHeader(header[0], header[1]);\n    });\n    self._response = null;\n\n    xhr.onreadystatechange = function () {\n      switch (xhr.readyState) {\n        case rStates.LOADING:\n        case rStates.DONE:\n          self._onXHRProgress();\n\n          break;\n      }\n    }; // Necessary for streaming in Firefox, since xhr.response is ONLY defined\n    // in onprogress, not in onreadystatechange with xhr.readyState = 3\n\n\n    if (self._mode === 'moz-chunked-arraybuffer') {\n      xhr.onprogress = function () {\n        self._onXHRProgress();\n      };\n    }\n\n    xhr.onerror = function () {\n      if (self._destroyed) return;\n\n      self._resetTimers(true);\n\n      self.emit('error', new Error('XHR error'));\n    };\n\n    try {\n      xhr.send(body);\n    } catch (err) {\n      process.nextTick(function () {\n        self.emit('error', err);\n      });\n      return;\n    }\n  }\n};\n/**\n * Checks if xhr.status is readable and non-zero, indicating no error.\n * Even though the spec says it should be available in readyState 3,\n * accessing it throws an exception in IE8\n */\n\n\nfunction statusValid(xhr) {\n  try {\n    var status = xhr.status;\n    return status !== null && status !== 0;\n  } catch (e) {\n    return false;\n  }\n}\n\nClientRequest.prototype._onXHRProgress = function () {\n  var self = this;\n\n  self._resetTimers(false);\n\n  if (!statusValid(self._xhr) || self._destroyed) return;\n  if (!self._response) self._connect();\n\n  self._response._onXHRProgress(self._resetTimers.bind(self));\n};\n\nClientRequest.prototype._connect = function () {\n  var self = this;\n  if (self._destroyed) return;\n  self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode, self._resetTimers.bind(self));\n\n  self._response.on('error', function (err) {\n    self.emit('error', err);\n  });\n\n  self.emit('response', self._response);\n};\n\nClientRequest.prototype._write = function (chunk, encoding, cb) {\n  var self = this;\n\n  self._body.push(chunk);\n\n  cb();\n};\n\nClientRequest.prototype._resetTimers = function (done) {\n  var self = this;\n  global.clearTimeout(self._socketTimer);\n  self._socketTimer = null;\n\n  if (done) {\n    global.clearTimeout(self._fetchTimer);\n    self._fetchTimer = null;\n  } else if (self._socketTimeout) {\n    self._socketTimer = global.setTimeout(function () {\n      self.emit('timeout');\n    }, self._socketTimeout);\n  }\n};\n\nClientRequest.prototype.abort = ClientRequest.prototype.destroy = function (err) {\n  var self = this;\n  self._destroyed = true;\n\n  self._resetTimers(true);\n\n  if (self._response) self._response._destroyed = true;\n  if (self._xhr) self._xhr.abort();else if (self._fetchAbortController) self._fetchAbortController.abort();\n  if (err) self.emit('error', err);\n};\n\nClientRequest.prototype.end = function (data, encoding, cb) {\n  var self = this;\n\n  if (typeof data === 'function') {\n    cb = data;\n    data = undefined;\n  }\n\n  stream.Writable.prototype.end.call(self, data, encoding, cb);\n};\n\nClientRequest.prototype.setTimeout = function (timeout, cb) {\n  var self = this;\n  if (cb) self.once('timeout', cb);\n  self._socketTimeout = timeout;\n\n  self._resetTimers(false);\n};\n\nClientRequest.prototype.flushHeaders = function () {};\n\nClientRequest.prototype.setNoDelay = function () {};\n\nClientRequest.prototype.setSocketKeepAlive = function () {}; // Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method\n\n\nvar unsafeHeaders = ['accept-charset', 'accept-encoding', 'access-control-request-headers', 'access-control-request-method', 'connection', 'content-length', 'cookie', 'cookie2', 'date', 'dnt', 'expect', 'host', 'keep-alive', 'origin', 'referer', 'te', 'trailer', 'transfer-encoding', 'upgrade', 'via'];","map":{"version":3,"names":["capability","require","inherits","response","stream","IncomingMessage","rStates","readyStates","decideMode","preferBinary","useFetch","fetch","mozchunkedarraybuffer","msstream","arraybuffer","ClientRequest","module","exports","opts","self","Writable","call","_opts","_body","_headers","auth","setHeader","Buffer","from","toString","Object","keys","headers","forEach","name","mode","abortController","overrideMimeType","Error","_mode","_fetchTimer","_socketTimeout","_socketTimer","on","_onFinish","prototype","value","lowerName","toLowerCase","unsafeHeaders","indexOf","getHeader","header","removeHeader","_destroyed","timeout","setTimeout","headersObj","body","method","Blob","type","headersList","keyName","Array","isArray","v","push","signal","controller","AbortController","_fetchAbortController","requestTimeout","global","emit","abort","url","undefined","credentials","withCredentials","then","_fetchResponse","_resetTimers","_connect","reason","xhr","_xhr","XMLHttpRequest","open","err","process","nextTick","responseType","ontimeout","setRequestHeader","_response","onreadystatechange","readyState","LOADING","DONE","_onXHRProgress","onprogress","onerror","send","statusValid","status","e","bind","_write","chunk","encoding","cb","done","clearTimeout","destroy","end","data","once","flushHeaders","setNoDelay","setSocketKeepAlive"],"sources":["/Users/benjaminwestbrook/Repositories/ninter/node_modules/stream-http/lib/request.js"],"sourcesContent":["var capability = require('./capability')\nvar inherits = require('inherits')\nvar response = require('./response')\nvar stream = require('readable-stream')\n\nvar IncomingMessage = response.IncomingMessage\nvar rStates = response.readyStates\n\nfunction decideMode (preferBinary, useFetch) {\n\tif (capability.fetch && useFetch) {\n\t\treturn 'fetch'\n\t} else if (capability.mozchunkedarraybuffer) {\n\t\treturn 'moz-chunked-arraybuffer'\n\t} else if (capability.msstream) {\n\t\treturn 'ms-stream'\n\t} else if (capability.arraybuffer && preferBinary) {\n\t\treturn 'arraybuffer'\n\t} else {\n\t\treturn 'text'\n\t}\n}\n\nvar ClientRequest = module.exports = function (opts) {\n\tvar self = this\n\tstream.Writable.call(self)\n\n\tself._opts = opts\n\tself._body = []\n\tself._headers = {}\n\tif (opts.auth)\n\t\tself.setHeader('Authorization', 'Basic ' + Buffer.from(opts.auth).toString('base64'))\n\tObject.keys(opts.headers).forEach(function (name) {\n\t\tself.setHeader(name, opts.headers[name])\n\t})\n\n\tvar preferBinary\n\tvar useFetch = true\n\tif (opts.mode === 'disable-fetch' || ('requestTimeout' in opts && !capability.abortController)) {\n\t\t// If the use of XHR should be preferred. Not typically needed.\n\t\tuseFetch = false\n\t\tpreferBinary = true\n\t} else if (opts.mode === 'prefer-streaming') {\n\t\t// If streaming is a high priority but binary compatibility and\n\t\t// the accuracy of the 'content-type' header aren't\n\t\tpreferBinary = false\n\t} else if (opts.mode === 'allow-wrong-content-type') {\n\t\t// If streaming is more important than preserving the 'content-type' header\n\t\tpreferBinary = !capability.overrideMimeType\n\t} else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {\n\t\t// Use binary if text streaming may corrupt data or the content-type header, or for speed\n\t\tpreferBinary = true\n\t} else {\n\t\tthrow new Error('Invalid value for opts.mode')\n\t}\n\tself._mode = decideMode(preferBinary, useFetch)\n\tself._fetchTimer = null\n\tself._socketTimeout = null\n\tself._socketTimer = null\n\n\tself.on('finish', function () {\n\t\tself._onFinish()\n\t})\n}\n\ninherits(ClientRequest, stream.Writable)\n\nClientRequest.prototype.setHeader = function (name, value) {\n\tvar self = this\n\tvar lowerName = name.toLowerCase()\n\t// This check is not necessary, but it prevents warnings from browsers about setting unsafe\n\t// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but\n\t// http-browserify did it, so I will too.\n\tif (unsafeHeaders.indexOf(lowerName) !== -1)\n\t\treturn\n\n\tself._headers[lowerName] = {\n\t\tname: name,\n\t\tvalue: value\n\t}\n}\n\nClientRequest.prototype.getHeader = function (name) {\n\tvar header = this._headers[name.toLowerCase()]\n\tif (header)\n\t\treturn header.value\n\treturn null\n}\n\nClientRequest.prototype.removeHeader = function (name) {\n\tvar self = this\n\tdelete self._headers[name.toLowerCase()]\n}\n\nClientRequest.prototype._onFinish = function () {\n\tvar self = this\n\n\tif (self._destroyed)\n\t\treturn\n\tvar opts = self._opts\n\n\tif ('timeout' in opts && opts.timeout !== 0) {\n\t\tself.setTimeout(opts.timeout)\n\t}\n\n\tvar headersObj = self._headers\n\tvar body = null\n\tif (opts.method !== 'GET' && opts.method !== 'HEAD') {\n        body = new Blob(self._body, {\n            type: (headersObj['content-type'] || {}).value || ''\n        });\n    }\n\n\t// create flattened list of headers\n\tvar headersList = []\n\tObject.keys(headersObj).forEach(function (keyName) {\n\t\tvar name = headersObj[keyName].name\n\t\tvar value = headersObj[keyName].value\n\t\tif (Array.isArray(value)) {\n\t\t\tvalue.forEach(function (v) {\n\t\t\t\theadersList.push([name, v])\n\t\t\t})\n\t\t} else {\n\t\t\theadersList.push([name, value])\n\t\t}\n\t})\n\n\tif (self._mode === 'fetch') {\n\t\tvar signal = null\n\t\tif (capability.abortController) {\n\t\t\tvar controller = new AbortController()\n\t\t\tsignal = controller.signal\n\t\t\tself._fetchAbortController = controller\n\n\t\t\tif ('requestTimeout' in opts && opts.requestTimeout !== 0) {\n\t\t\t\tself._fetchTimer = global.setTimeout(function () {\n\t\t\t\t\tself.emit('requestTimeout')\n\t\t\t\t\tif (self._fetchAbortController)\n\t\t\t\t\t\tself._fetchAbortController.abort()\n\t\t\t\t}, opts.requestTimeout)\n\t\t\t}\n\t\t}\n\n\t\tglobal.fetch(self._opts.url, {\n\t\t\tmethod: self._opts.method,\n\t\t\theaders: headersList,\n\t\t\tbody: body || undefined,\n\t\t\tmode: 'cors',\n\t\t\tcredentials: opts.withCredentials ? 'include' : 'same-origin',\n\t\t\tsignal: signal\n\t\t}).then(function (response) {\n\t\t\tself._fetchResponse = response\n\t\t\tself._resetTimers(false)\n\t\t\tself._connect()\n\t\t}, function (reason) {\n\t\t\tself._resetTimers(true)\n\t\t\tif (!self._destroyed)\n\t\t\t\tself.emit('error', reason)\n\t\t})\n\t} else {\n\t\tvar xhr = self._xhr = new global.XMLHttpRequest()\n\t\ttry {\n\t\t\txhr.open(self._opts.method, self._opts.url, true)\n\t\t} catch (err) {\n\t\t\tprocess.nextTick(function () {\n\t\t\t\tself.emit('error', err)\n\t\t\t})\n\t\t\treturn\n\t\t}\n\n\t\t// Can't set responseType on really old browsers\n\t\tif ('responseType' in xhr)\n\t\t\txhr.responseType = self._mode\n\n\t\tif ('withCredentials' in xhr)\n\t\t\txhr.withCredentials = !!opts.withCredentials\n\n\t\tif (self._mode === 'text' && 'overrideMimeType' in xhr)\n\t\t\txhr.overrideMimeType('text/plain; charset=x-user-defined')\n\n\t\tif ('requestTimeout' in opts) {\n\t\t\txhr.timeout = opts.requestTimeout\n\t\t\txhr.ontimeout = function () {\n\t\t\t\tself.emit('requestTimeout')\n\t\t\t}\n\t\t}\n\n\t\theadersList.forEach(function (header) {\n\t\t\txhr.setRequestHeader(header[0], header[1])\n\t\t})\n\n\t\tself._response = null\n\t\txhr.onreadystatechange = function () {\n\t\t\tswitch (xhr.readyState) {\n\t\t\t\tcase rStates.LOADING:\n\t\t\t\tcase rStates.DONE:\n\t\t\t\t\tself._onXHRProgress()\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\t// Necessary for streaming in Firefox, since xhr.response is ONLY defined\n\t\t// in onprogress, not in onreadystatechange with xhr.readyState = 3\n\t\tif (self._mode === 'moz-chunked-arraybuffer') {\n\t\t\txhr.onprogress = function () {\n\t\t\t\tself._onXHRProgress()\n\t\t\t}\n\t\t}\n\n\t\txhr.onerror = function () {\n\t\t\tif (self._destroyed)\n\t\t\t\treturn\n\t\t\tself._resetTimers(true)\n\t\t\tself.emit('error', new Error('XHR error'))\n\t\t}\n\n\t\ttry {\n\t\t\txhr.send(body)\n\t\t} catch (err) {\n\t\t\tprocess.nextTick(function () {\n\t\t\t\tself.emit('error', err)\n\t\t\t})\n\t\t\treturn\n\t\t}\n\t}\n}\n\n/**\n * Checks if xhr.status is readable and non-zero, indicating no error.\n * Even though the spec says it should be available in readyState 3,\n * accessing it throws an exception in IE8\n */\nfunction statusValid (xhr) {\n\ttry {\n\t\tvar status = xhr.status\n\t\treturn (status !== null && status !== 0)\n\t} catch (e) {\n\t\treturn false\n\t}\n}\n\nClientRequest.prototype._onXHRProgress = function () {\n\tvar self = this\n\n\tself._resetTimers(false)\n\n\tif (!statusValid(self._xhr) || self._destroyed)\n\t\treturn\n\n\tif (!self._response)\n\t\tself._connect()\n\n\tself._response._onXHRProgress(self._resetTimers.bind(self))\n}\n\nClientRequest.prototype._connect = function () {\n\tvar self = this\n\n\tif (self._destroyed)\n\t\treturn\n\n\tself._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode, self._resetTimers.bind(self))\n\tself._response.on('error', function(err) {\n\t\tself.emit('error', err)\n\t})\n\n\tself.emit('response', self._response)\n}\n\nClientRequest.prototype._write = function (chunk, encoding, cb) {\n\tvar self = this\n\n\tself._body.push(chunk)\n\tcb()\n}\n\nClientRequest.prototype._resetTimers = function (done) {\n\tvar self = this\n\n\tglobal.clearTimeout(self._socketTimer)\n\tself._socketTimer = null\n\n\tif (done) {\n\t\tglobal.clearTimeout(self._fetchTimer)\n\t\tself._fetchTimer = null\n\t} else if (self._socketTimeout) {\n\t\tself._socketTimer = global.setTimeout(function () {\n\t\t\tself.emit('timeout')\n\t\t}, self._socketTimeout)\n\t}\n}\n\nClientRequest.prototype.abort = ClientRequest.prototype.destroy = function (err) {\n\tvar self = this\n\tself._destroyed = true\n\tself._resetTimers(true)\n\tif (self._response)\n\t\tself._response._destroyed = true\n\tif (self._xhr)\n\t\tself._xhr.abort()\n\telse if (self._fetchAbortController)\n\t\tself._fetchAbortController.abort()\n\n\tif (err)\n\t\tself.emit('error', err)\n}\n\nClientRequest.prototype.end = function (data, encoding, cb) {\n\tvar self = this\n\tif (typeof data === 'function') {\n\t\tcb = data\n\t\tdata = undefined\n\t}\n\n\tstream.Writable.prototype.end.call(self, data, encoding, cb)\n}\n\nClientRequest.prototype.setTimeout = function (timeout, cb) {\n\tvar self = this\n\n\tif (cb)\n\t\tself.once('timeout', cb)\n\n\tself._socketTimeout = timeout\n\tself._resetTimers(false)\n}\n\nClientRequest.prototype.flushHeaders = function () {}\nClientRequest.prototype.setNoDelay = function () {}\nClientRequest.prototype.setSocketKeepAlive = function () {}\n\n// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method\nvar unsafeHeaders = [\n\t'accept-charset',\n\t'accept-encoding',\n\t'access-control-request-headers',\n\t'access-control-request-method',\n\t'connection',\n\t'content-length',\n\t'cookie',\n\t'cookie2',\n\t'date',\n\t'dnt',\n\t'expect',\n\t'host',\n\t'keep-alive',\n\t'origin',\n\t'referer',\n\t'te',\n\t'trailer',\n\t'transfer-encoding',\n\t'upgrade',\n\t'via'\n]\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}