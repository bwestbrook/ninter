{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Logger } from '../utils/Logger';\nimport { ChromeStorage, LocalStorage } from '..';\nconst logger = new Logger('STORAGE');\n/**\n * Get a supported storage on this platform\n */\n\nexport const getStorage = () => __awaiter(void 0, void 0, void 0, function* () {\n  if (yield ChromeStorage.isSupported()) {\n    logger.log('getStorage', 'USING CHROME STORAGE');\n    return new ChromeStorage();\n  } else if (yield LocalStorage.isSupported()) {\n    logger.log('getStorage', 'USING LOCAL STORAGE');\n    return new LocalStorage();\n  } else {\n    throw new Error('no storage type supported');\n  }\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,MAAT,QAAuB,iBAAvB;AACA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,IAA5C;AAGA,MAAMC,MAAM,GAAG,IAAIH,MAAJ,CAAW,SAAX,CAAf;AAEA;;;;AAGA,OAAO,MAAMI,UAAU,GAA2B,MAA6BC;EAC7E,IAAI,MAAMJ,aAAa,CAACK,WAAd,EAAV,EAAuC;IACrCH,MAAM,CAACI,GAAP,CAAW,YAAX,EAAyB,sBAAzB;IAEA,OAAO,IAAIN,aAAJ,EAAP;EACD,CAJD,MAIO,IAAI,MAAMC,YAAY,CAACI,WAAb,EAAV,EAAsC;IAC3CH,MAAM,CAACI,GAAP,CAAW,YAAX,EAAyB,qBAAzB;IAEA,OAAO,IAAIL,YAAJ,EAAP;EACD,CAJM,MAIA;IACL,MAAM,IAAIM,KAAJ,CAAU,2BAAV,CAAN;EACD;AACF,CAZ8E,CAAxE","names":["Logger","ChromeStorage","LocalStorage","logger","getStorage","__awaiter","isSupported","log","Error"],"sourceRoot":"","sources":["../../../src/storage/getStorage.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}