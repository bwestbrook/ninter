{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\n// Michelson abstract syntax tree types https://tezos.gitlab.io/whitedoc/michelson.html#concrete-syntax\nconst sourceReference = Symbol('source_reference');\n/**\r\n *  @category Error\r\n *  @description Error that indicates a failure when performing the scan step when parsing Michelson\r\n */\n\nclass ScanError extends Error {\n  constructor(src, idx, message) {\n    super(message);\n    this.src = src;\n    this.idx = idx;\n    Object.setPrototypeOf(this, ScanError.prototype);\n  }\n\n}\n\nvar Literal;\n\n(function (Literal) {\n  Literal[Literal[\"Comment\"] = 0] = \"Comment\";\n  Literal[Literal[\"Number\"] = 1] = \"Number\";\n  Literal[Literal[\"String\"] = 2] = \"String\";\n  Literal[Literal[\"Bytes\"] = 3] = \"Bytes\";\n  Literal[Literal[\"Ident\"] = 4] = \"Ident\";\n})(Literal || (Literal = {}));\n\nconst isSpace = new RegExp('\\\\s');\nconst isIdentStart = new RegExp('[:@%_A-Za-z]');\nconst isIdent = new RegExp('[@%_\\\\.A-Za-z0-9]');\nconst isDigit = new RegExp('[0-9]');\nconst isHex = new RegExp('[0-9a-fA-F]');\n\nfunction* scan(src, scanComments = false) {\n  let i = 0;\n\n  while (i < src.length) {\n    // Skip space\n    while (i < src.length && isSpace.test(src[i])) {\n      i++;\n    }\n\n    if (i === src.length) {\n      return;\n    }\n\n    const s = src[i];\n    const start = i;\n\n    if (isIdentStart.test(s)) {\n      // Identifier\n      i++;\n\n      while (i < src.length && isIdent.test(src[i])) {\n        i++;\n      }\n\n      yield {\n        t: Literal.Ident,\n        v: src.slice(start, i),\n        first: start,\n        last: i\n      };\n    } else if (src.length - i > 1 && src.substr(i, 2) === '0x') {\n      // Bytes\n      i += 2;\n\n      while (i < src.length && isHex.test(src[i])) {\n        i++;\n      }\n\n      if ((i - start & 1) !== 0) {\n        throw new ScanError(src, i, 'Bytes literal length is expected to be power of two');\n      }\n\n      yield {\n        t: Literal.Bytes,\n        v: src.slice(start, i),\n        first: start,\n        last: i\n      };\n    } else if (isDigit.test(s) || s === '-') {\n      // Number\n      if (s === '-') {\n        i++;\n      }\n\n      const ii = i;\n\n      while (i < src.length && isDigit.test(src[i])) {\n        i++;\n      }\n\n      if (ii === i) {\n        throw new ScanError(src, i, 'Number literal is too short');\n      }\n\n      yield {\n        t: Literal.Number,\n        v: src.slice(start, i),\n        first: start,\n        last: i\n      };\n    } else if (s === '\"') {\n      // String\n      i++;\n      let esc = false;\n\n      for (; i < src.length && (esc || src[i] !== '\"'); i++) {\n        if (!esc && src[i] === '\\\\') {\n          esc = true;\n        } else {\n          esc = false;\n        }\n      }\n\n      if (i === src.length) {\n        throw new ScanError(src, i, 'Unterminated string literal');\n      }\n\n      i++;\n      yield {\n        t: Literal.String,\n        v: src.slice(start, i),\n        first: start,\n        last: i\n      };\n    } else if (s === '#') {\n      // Comment\n      i++;\n\n      while (i < src.length && src[i] !== '\\n') {\n        i++;\n      }\n\n      if (scanComments) {\n        yield {\n          t: Literal.Comment,\n          v: src.slice(start, i),\n          first: start,\n          last: i\n        };\n      }\n    } else if (src.length - i > 1 && src.substr(i, 2) === '/*') {\n      // C style comment\n      i += 2;\n\n      while (i < src.length && !(src.length - i > 1 && src.substr(i, 2) === '*/')) {\n        i++;\n      }\n\n      if (i === src.length) {\n        throw new ScanError(src, i, 'Unterminated C style comment');\n      }\n\n      i += 2;\n\n      if (scanComments) {\n        yield {\n          t: Literal.Comment,\n          v: src.slice(start, i),\n          first: start,\n          last: i\n        };\n      }\n    } else if (s === '(' || s === ')' || s === '{' || s === '}' || s === ';') {\n      i++;\n      yield {\n        t: s,\n        v: s,\n        first: start,\n        last: i\n      };\n    } else {\n      throw new ScanError(src, i, `Invalid character at offset ${i}: \\`${s}'`);\n    }\n  }\n} // Michelson types\n\n\nconst refContract = Symbol('ref_contract');\nvar Protocol;\n\n(function (Protocol) {\n  Protocol[\"Ps9mPmXa\"] = \"Ps9mPmXaRzmzk35gbAYNCAw6UXdE2qoABTHbN2oEEc1qM7CwT9P\";\n  Protocol[\"PtCJ7pwo\"] = \"PtCJ7pwoxe8JasnHY8YonnLYjcVHmhiARPJvqcC6VfHT5s8k8sY\";\n  Protocol[\"PsYLVpVv\"] = \"PsYLVpVvgbLhAhoqAkMFUo6gudkJ9weNXhUYCiLDzcUpFpkk8Wt\";\n  Protocol[\"PsddFKi3\"] = \"PsddFKi32cMJ2qPjf43Qv5GDWLDPZb3T3bF6fLKiF5HtvHNU7aP\";\n  Protocol[\"Pt24m4xi\"] = \"Pt24m4xiPbLDhVgVfABUjirbmda3yohdN82Sp9FeuAXJ4eV9otd\";\n  Protocol[\"PsBABY5H\"] = \"PsBABY5HQTSkA4297zNHfsZNKtxULfL18y95qb3m53QJiXGmrbU\";\n  Protocol[\"PsBabyM1\"] = \"PsBabyM1eUXZseaJdmXFApDSBqj8YBfwELoxZHHW77EMcAbbwAS\";\n  Protocol[\"PsCARTHA\"] = \"PsCARTHAGazKbHtnKfLzQg3kms52kSRpgnDY982a9oYsSXRLQEb\";\n  Protocol[\"PsDELPH1\"] = \"PsDELPH1Kxsxt8f9eWbxQeRxkjfbxoqM52jvs5Y5fBxWWh4ifpo\";\n  Protocol[\"PtEdoTez\"] = \"PtEdoTezd3RHSC31mpxxo1npxFjoWWcFgQtxapi51Z8TLu6v6Uq\";\n  Protocol[\"PtEdo2Zk\"] = \"PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA\";\n  Protocol[\"PsFLoren\"] = \"PsFLorenaUUuikDWvMDr6fGBRG8kt3e3D3fHoXK1j1BFRxeSH4i\";\n  Protocol[\"PsFLorena\"] = \"PsFLorenaUUuikDWvMDr6fGBRG8kt3e3D3fHoXK1j1BFRxeSH4i\";\n  Protocol[\"PtGRANAD\"] = \"PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV\";\n  Protocol[\"PtGRANADs\"] = \"PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV\";\n  Protocol[\"PtHangzH\"] = \"PtHangzHogokSuiMHemCuowEavgYTP8J5qQ9fQS793MHYFpCY3r\";\n  Protocol[\"PtHangz2\"] = \"PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx\";\n  Protocol[\"PsiThaCa\"] = \"PsiThaCaT47Zboaw71QWScM8sXeMM7bbQFncK9FLqYc6EKdpjVP\";\n  Protocol[\"Psithaca2\"] = \"Psithaca2MLRFYargivpo7YvUr7wUDqyxrdhC5CQq78mRvimz6A\";\n  Protocol[\"PtJakarta\"] = \"PtJakartaiDz69SfDDLXJSiuZqTSeSKRDbKVZC8MNzJnvRjvnGw\";\n  Protocol[\"ProtoALpha\"] = \"ProtoALphaALphaALphaALphaALphaALphaALphaALphaDdp3zK\";\n})(Protocol || (Protocol = {}));\n\nconst DefaultProtocol = Protocol.Psithaca2;\nconst protoLevel = {\n  Ps9mPmXaRzmzk35gbAYNCAw6UXdE2qoABTHbN2oEEc1qM7CwT9P: 0,\n  PtCJ7pwoxe8JasnHY8YonnLYjcVHmhiARPJvqcC6VfHT5s8k8sY: 1,\n  PsYLVpVvgbLhAhoqAkMFUo6gudkJ9weNXhUYCiLDzcUpFpkk8Wt: 2,\n  PsddFKi32cMJ2qPjf43Qv5GDWLDPZb3T3bF6fLKiF5HtvHNU7aP: 3,\n  Pt24m4xiPbLDhVgVfABUjirbmda3yohdN82Sp9FeuAXJ4eV9otd: 4,\n  PsBABY5HQTSkA4297zNHfsZNKtxULfL18y95qb3m53QJiXGmrbU: 5,\n  PsBabyM1eUXZseaJdmXFApDSBqj8YBfwELoxZHHW77EMcAbbwAS: 5,\n  PsCARTHAGazKbHtnKfLzQg3kms52kSRpgnDY982a9oYsSXRLQEb: 6,\n  PsDELPH1Kxsxt8f9eWbxQeRxkjfbxoqM52jvs5Y5fBxWWh4ifpo: 7,\n  PtEdoTezd3RHSC31mpxxo1npxFjoWWcFgQtxapi51Z8TLu6v6Uq: 8,\n  PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA: 8,\n  PsFLorenaUUuikDWvMDr6fGBRG8kt3e3D3fHoXK1j1BFRxeSH4i: 9,\n  PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV: 10,\n  PtHangzHogokSuiMHemCuowEavgYTP8J5qQ9fQS793MHYFpCY3r: 11,\n  PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx: 11,\n  PsiThaCaT47Zboaw71QWScM8sXeMM7bbQFncK9FLqYc6EKdpjVP: 12,\n  Psithaca2MLRFYargivpo7YvUr7wUDqyxrdhC5CQq78mRvimz6A: 12,\n  PtJakartaiDz69SfDDLXJSiuZqTSeSKRDbKVZC8MNzJnvRjvnGw: 13,\n  ProtoALphaALphaALphaALphaALphaALphaALphaALphaDdp3zK: 13\n};\n\nfunction ProtoGreaterOfEqual(a, b) {\n  return protoLevel[a] >= protoLevel[b];\n}\n\nfunction ProtoInferiorTo(a, b) {\n  return protoLevel[a] < protoLevel[b];\n}\n/**\r\n *  @category Error\r\n *  @description Indicates that an error has occurred preventing macros from being expanded in a plain Michelson input\r\n */\n\n\nclass MacroError extends Error {\n  constructor(prim, message) {\n    super(message);\n    this.prim = prim;\n    Object.setPrototypeOf(this, MacroError.prototype);\n  }\n\n}\n\nfunction assertArgs$1(ex, n) {\n  var _a, _b;\n\n  if (n === 0 && ex.args === undefined || ((_a = ex.args) === null || _a === void 0 ? void 0 : _a.length) === n) {\n    return true;\n  }\n\n  throw new MacroError(ex, `macro ${ex.prim} expects ${n} arguments, was given ${(_b = ex.args) === null || _b === void 0 ? void 0 : _b.length}`);\n}\n\nfunction assertNoAnnots(ex) {\n  if (ex.annots === undefined) {\n    return true;\n  }\n\n  throw new MacroError(ex, `unexpected annotation on macro ${ex.prim}: ${ex.annots}`);\n}\n\nfunction assertIntArg(ex, arg) {\n  if ('int' in arg) {\n    return true;\n  }\n\n  throw new MacroError(ex, `macro ${ex.prim} expects int argument`);\n}\n\nfunction parsePairUnpairExpr(p, expr, annotations, agg) {\n  let i = 0;\n  let ai = 0;\n  const ann = [null, null]; // Left expression\n\n  let lexpr;\n\n  if (i === expr.length) {\n    throw new MacroError(p, `unexpected end: ${p.prim}`);\n  }\n\n  let c = expr[i++];\n\n  switch (c) {\n    case 'P':\n      {\n        const {\n          r,\n          n,\n          an\n        } = parsePairUnpairExpr(p, expr.slice(i), annotations.slice(ai), agg);\n        lexpr = r;\n        i += n;\n        ai += an;\n        break;\n      }\n\n    case 'A':\n      if (ai !== annotations.length) {\n        ann[0] = annotations[ai++];\n      }\n\n      break;\n\n    default:\n      throw new MacroError(p, `${p.prim}: unexpected character: ${c}`);\n  } // Right expression\n\n\n  let rexpr;\n\n  if (i === expr.length) {\n    throw new MacroError(p, `unexpected end: ${p.prim}`);\n  }\n\n  c = expr[i++];\n\n  switch (c) {\n    case 'P':\n      {\n        const {\n          r,\n          n,\n          an\n        } = parsePairUnpairExpr(p, expr.slice(i), annotations.slice(ai), agg);\n        rexpr = r.map(([v, a]) => [v + 1, a]);\n        i += n;\n        ai += an;\n        break;\n      }\n\n    case 'I':\n      if (ai !== annotations.length) {\n        ann[1] = annotations[ai++];\n      }\n\n      break;\n\n    default:\n      throw new MacroError(p, `${p.prim}: unexpected character: ${c}`);\n  }\n\n  return {\n    r: agg(lexpr, rexpr, [0, ann]),\n    n: i,\n    an: ai\n  };\n}\n\nfunction parseSetMapCadr(p, expr, vann, term) {\n  const c = expr[0];\n\n  switch (c) {\n    case 'A':\n      return expr.length > 1 ? [{\n        prim: 'DUP'\n      }, {\n        prim: 'DIP',\n        args: [[{\n          prim: 'CAR',\n          annots: ['@%%']\n        }, parseSetMapCadr(p, expr.slice(1), [], term)]]\n      }, {\n        prim: 'CDR',\n        annots: ['@%%']\n      }, {\n        prim: 'SWAP'\n      }, {\n        prim: 'PAIR',\n        annots: ['%@', '%@', ...vann]\n      }] : term.a;\n\n    case 'D':\n      return expr.length > 1 ? [{\n        prim: 'DUP'\n      }, {\n        prim: 'DIP',\n        args: [[{\n          prim: 'CDR',\n          annots: ['@%%']\n        }, parseSetMapCadr(p, expr.slice(1), [], term)]]\n      }, {\n        prim: 'CAR',\n        annots: ['@%%']\n      }, {\n        prim: 'PAIR',\n        annots: ['%@', '%@', ...vann]\n      }] : term.d;\n\n    default:\n      throw new MacroError(p, `${p.prim}: unexpected character: ${c}`);\n  }\n}\n\nfunction trimLast(a, v) {\n  let l = a.length;\n\n  while (l > 0 && a[l - 1] === v) {\n    l--;\n  }\n\n  return a.slice(0, l);\n}\n\nfunction filterAnnotations(a) {\n  const fields = [];\n  const rest = [];\n\n  if (a !== undefined) {\n    for (const v of a) {\n      (v.length !== 0 && v[0] === '%' ? fields : rest).push(v);\n    }\n  }\n\n  return {\n    fields,\n    rest\n  };\n}\n\nfunction mkPrim({\n  prim,\n  annots,\n  args\n}) {\n  return Object.assign(Object.assign({\n    prim\n  }, annots && {\n    annots\n  }), args && {\n    args\n  });\n}\n\nconst pairRe = /^P[PAI]{3,}R$/;\nconst unpairRe = /^UNP[PAI]{2,}R$/;\nconst cadrRe = /^C[AD]{2,}R$/;\nconst setCadrRe = /^SET_C[AD]+R$/;\nconst mapCadrRe = /^MAP_C[AD]+R$/;\nconst diipRe = /^DI{2,}P$/;\nconst duupRe = /^DU+P$/;\n\nfunction expandMacros(ex, opt) {\n  const proto = (opt === null || opt === void 0 ? void 0 : opt.protocol) || DefaultProtocol;\n\n  function mayRename(annots) {\n    return annots !== undefined ? [{\n      prim: 'RENAME',\n      annots\n    }] : [];\n  }\n\n  switch (ex.prim) {\n    // Compare\n    case 'CMPEQ':\n    case 'CMPNEQ':\n    case 'CMPLT':\n    case 'CMPGT':\n    case 'CMPLE':\n    case 'CMPGE':\n      if (assertArgs$1(ex, 0)) {\n        return [{\n          prim: 'COMPARE'\n        }, mkPrim({\n          prim: ex.prim.slice(3),\n          annots: ex.annots\n        })];\n      }\n\n      break;\n\n    case 'IFEQ':\n    case 'IFNEQ':\n    case 'IFLT':\n    case 'IFGT':\n    case 'IFLE':\n    case 'IFGE':\n      if (assertArgs$1(ex, 2)) {\n        return [{\n          prim: ex.prim.slice(2)\n        }, mkPrim({\n          prim: 'IF',\n          annots: ex.annots,\n          args: ex.args\n        })];\n      }\n\n      break;\n\n    case 'IFCMPEQ':\n    case 'IFCMPNEQ':\n    case 'IFCMPLT':\n    case 'IFCMPGT':\n    case 'IFCMPLE':\n    case 'IFCMPGE':\n      if (assertArgs$1(ex, 2)) {\n        return [{\n          prim: 'COMPARE'\n        }, {\n          prim: ex.prim.slice(5)\n        }, mkPrim({\n          prim: 'IF',\n          annots: ex.annots,\n          args: ex.args\n        })];\n      }\n\n      break;\n    // Fail\n\n    case 'FAIL':\n      if (assertArgs$1(ex, 0) && assertNoAnnots(ex)) {\n        return [{\n          prim: 'UNIT'\n        }, {\n          prim: 'FAILWITH'\n        }];\n      }\n\n      break;\n    // Assertion macros\n\n    case 'ASSERT':\n      if (assertArgs$1(ex, 0) && assertNoAnnots(ex)) {\n        return [{\n          prim: 'IF',\n          args: [[], [[{\n            prim: 'UNIT'\n          }, {\n            prim: 'FAILWITH'\n          }]]]\n        }];\n      }\n\n      break;\n\n    case 'ASSERT_EQ':\n    case 'ASSERT_NEQ':\n    case 'ASSERT_LT':\n    case 'ASSERT_GT':\n    case 'ASSERT_LE':\n    case 'ASSERT_GE':\n      if (assertArgs$1(ex, 0) && assertNoAnnots(ex)) {\n        return [{\n          prim: ex.prim.slice(7)\n        }, {\n          prim: 'IF',\n          args: [[], [[{\n            prim: 'UNIT'\n          }, {\n            prim: 'FAILWITH'\n          }]]]\n        }];\n      }\n\n      break;\n\n    case 'ASSERT_CMPEQ':\n    case 'ASSERT_CMPNEQ':\n    case 'ASSERT_CMPLT':\n    case 'ASSERT_CMPGT':\n    case 'ASSERT_CMPLE':\n    case 'ASSERT_CMPGE':\n      if (assertArgs$1(ex, 0) && assertNoAnnots(ex)) {\n        return [[{\n          prim: 'COMPARE'\n        }, {\n          prim: ex.prim.slice(10)\n        }], {\n          prim: 'IF',\n          args: [[], [[{\n            prim: 'UNIT'\n          }, {\n            prim: 'FAILWITH'\n          }]]]\n        }];\n      }\n\n      break;\n\n    case 'ASSERT_NONE':\n      if (assertArgs$1(ex, 0) && assertNoAnnots(ex)) {\n        return [{\n          prim: 'IF_NONE',\n          args: [[], [[{\n            prim: 'UNIT'\n          }, {\n            prim: 'FAILWITH'\n          }]]]\n        }];\n      }\n\n      break;\n\n    case 'ASSERT_SOME':\n      if (assertArgs$1(ex, 0)) {\n        return [{\n          prim: 'IF_NONE',\n          args: [[[{\n            prim: 'UNIT'\n          }, {\n            prim: 'FAILWITH'\n          }]], mayRename(ex.annots)]\n        }];\n      }\n\n      break;\n\n    case 'ASSERT_LEFT':\n      if (assertArgs$1(ex, 0)) {\n        return [{\n          prim: 'IF_LEFT',\n          args: [mayRename(ex.annots), [[{\n            prim: 'UNIT'\n          }, {\n            prim: 'FAILWITH'\n          }]]]\n        }];\n      }\n\n      break;\n\n    case 'ASSERT_RIGHT':\n      if (assertArgs$1(ex, 0)) {\n        return [{\n          prim: 'IF_LEFT',\n          args: [[[{\n            prim: 'UNIT'\n          }, {\n            prim: 'FAILWITH'\n          }]], mayRename(ex.annots)]\n        }];\n      }\n\n      break;\n    // Syntactic conveniences\n\n    case 'IF_SOME':\n      if (assertArgs$1(ex, 2)) {\n        return [mkPrim({\n          prim: 'IF_NONE',\n          annots: ex.annots,\n          args: [ex.args[1], ex.args[0]]\n        })];\n      }\n\n      break;\n\n    case 'IF_RIGHT':\n      if (assertArgs$1(ex, 2)) {\n        return [mkPrim({\n          prim: 'IF_LEFT',\n          annots: ex.annots,\n          args: [ex.args[1], ex.args[0]]\n        })];\n      }\n\n      break;\n    // CAR/CDR n\n\n    case 'CAR':\n    case 'CDR':\n      if (ex.args !== undefined) {\n        if (assertArgs$1(ex, 1) && assertIntArg(ex, ex.args[0])) {\n          const n = parseInt(ex.args[0].int, 10);\n          return mkPrim({\n            prim: 'GET',\n            args: [{\n              int: ex.prim === 'CAR' ? String(n * 2 + 1) : String(n * 2)\n            }],\n            annots: ex.annots\n          });\n        }\n      } else {\n        return ex;\n      }\n\n  } // More syntactic conveniences\n  // PAPPAIIR macro\n\n\n  if (pairRe.test(ex.prim)) {\n    if (assertArgs$1(ex, 0)) {\n      const {\n        fields,\n        rest\n      } = filterAnnotations(ex.annots);\n      const {\n        r\n      } = parsePairUnpairExpr(ex, ex.prim.slice(1), fields, (l, r, top) => [...(l || []), ...(r || []), top]);\n      return r.map(([v, a], i) => {\n        const ann = [...trimLast(a, null).map(v => v === null ? '%' : v), ...(v === 0 && i === r.length - 1 ? rest : [])];\n        const leaf = mkPrim({\n          prim: 'PAIR',\n          annots: ann.length !== 0 ? ann : undefined\n        });\n        return v === 0 ? leaf : {\n          prim: 'DIP',\n          args: v === 1 ? [[leaf]] : [{\n            int: String(v)\n          }, [leaf]]\n        };\n      });\n    }\n  } // UNPAPPAIIR macro\n\n\n  if (unpairRe.test(ex.prim)) {\n    if (ProtoInferiorTo(proto, Protocol.PtEdo2Zk) && assertArgs$1(ex, 0)) {\n      const {\n        r\n      } = parsePairUnpairExpr(ex, ex.prim.slice(3), ex.annots || [], (l, r, top) => [top, ...(r || []), ...(l || [])]);\n      return r.map(([v, a]) => {\n        const leaf = [{\n          prim: 'DUP'\n        }, mkPrim({\n          prim: 'CAR',\n          annots: a[0] !== null ? [a[0]] : undefined\n        }), {\n          prim: 'DIP',\n          args: [[mkPrim({\n            prim: 'CDR',\n            annots: a[1] !== null ? [a[1]] : undefined\n          })]]\n        }];\n        return v === 0 ? leaf : {\n          prim: 'DIP',\n          args: v === 1 ? [[leaf]] : [{\n            int: String(v)\n          }, [leaf]]\n        };\n      });\n    } else {\n      if (ex.prim === 'UNPAIR') {\n        return ex;\n      }\n\n      if (assertArgs$1(ex, 0)) {\n        // 008_edo: annotations are deprecated\n        const {\n          r\n        } = parsePairUnpairExpr(ex, ex.prim.slice(3), [], (l, r, top) => [top, ...(r || []), ...(l || [])]);\n        return r.map(([v]) => {\n          const leaf = mkPrim({\n            prim: 'UNPAIR'\n          });\n          return v === 0 ? leaf : {\n            prim: 'DIP',\n            args: v === 1 ? [[leaf]] : [{\n              int: String(v)\n            }, [leaf]]\n          };\n        });\n      }\n    }\n  } // C[AD]+R macro\n\n\n  if (cadrRe.test(ex.prim)) {\n    if (assertArgs$1(ex, 0)) {\n      const ch = [...ex.prim.slice(1, ex.prim.length - 1)];\n      return ch.map((c, i) => {\n        const ann = i === ch.length - 1 ? ex.annots : undefined;\n\n        switch (c) {\n          case 'A':\n            return mkPrim({\n              prim: 'CAR',\n              annots: ann\n            });\n\n          case 'D':\n            return mkPrim({\n              prim: 'CDR',\n              annots: ann\n            });\n\n          default:\n            throw new MacroError(ex, `unexpected character: ${c}`);\n        }\n      });\n    }\n  } // SET_C[AD]+R macro\n\n\n  if (setCadrRe.test(ex.prim)) {\n    if (assertArgs$1(ex, 0)) {\n      const {\n        fields,\n        rest\n      } = filterAnnotations(ex.annots);\n\n      if (fields.length > 1) {\n        throw new MacroError(ex, `unexpected annotation on macro ${ex.prim}: ${fields}`);\n      }\n\n      const term = fields.length !== 0 ? {\n        a: [{\n          prim: 'DUP'\n        }, {\n          prim: 'CAR',\n          annots: fields\n        }, {\n          prim: 'DROP'\n        }, {\n          prim: 'CDR',\n          annots: ['@%%']\n        }, {\n          prim: 'SWAP'\n        }, {\n          prim: 'PAIR',\n          annots: [fields[0], '%@']\n        }],\n        d: [{\n          prim: 'DUP'\n        }, {\n          prim: 'CDR',\n          annots: fields\n        }, {\n          prim: 'DROP'\n        }, {\n          prim: 'CAR',\n          annots: ['@%%']\n        }, {\n          prim: 'PAIR',\n          annots: ['%@', fields[0]]\n        }]\n      } : {\n        a: [{\n          prim: 'CDR',\n          annots: ['@%%']\n        }, {\n          prim: 'SWAP'\n        }, {\n          prim: 'PAIR',\n          annots: ['%', '%@']\n        }],\n        d: [{\n          prim: 'CAR',\n          annots: ['@%%']\n        }, {\n          prim: 'PAIR',\n          annots: ['%@', '%']\n        }]\n      };\n      return parseSetMapCadr(ex, ex.prim.slice(5, ex.prim.length - 1), rest, term);\n    }\n  } // MAP_C[AD]+R macro\n\n\n  if (mapCadrRe.test(ex.prim)) {\n    if (assertArgs$1(ex, 1)) {\n      const {\n        fields\n      } = filterAnnotations(ex.annots);\n\n      if (fields.length > 1) {\n        throw new MacroError(ex, `unexpected annotation on macro ${ex.prim}: ${fields}`);\n      }\n\n      const term = {\n        a: [{\n          prim: 'DUP'\n        }, {\n          prim: 'CDR',\n          annots: ['@%%']\n        }, {\n          prim: 'DIP',\n          args: [[mkPrim({\n            prim: 'CAR',\n            annots: fields.length !== 0 ? ['@' + fields[0].slice(1)] : undefined\n          }), ex.args[0]]]\n        }, {\n          prim: 'SWAP'\n        }, {\n          prim: 'PAIR',\n          annots: [fields.length !== 0 ? fields[0] : '%', '%@']\n        }],\n        d: [{\n          prim: 'DUP'\n        }, mkPrim({\n          prim: 'CDR',\n          annots: fields.length !== 0 ? ['@' + fields[0].slice(1)] : undefined\n        }), ex.args[0], {\n          prim: 'SWAP'\n        }, {\n          prim: 'CAR',\n          annots: ['@%%']\n        }, {\n          prim: 'PAIR',\n          annots: ['%@', fields.length !== 0 ? fields[0] : '%']\n        }]\n      };\n      return parseSetMapCadr(ex, ex.prim.slice(5, ex.prim.length - 1), [], term);\n    }\n  } // Expand deprecated DI...IP to [DIP n]\n\n\n  if (diipRe.test(ex.prim)) {\n    if (assertArgs$1(ex, 1)) {\n      let n = 0;\n\n      while (ex.prim[1 + n] === 'I') {\n        n++;\n      }\n\n      return mkPrim({\n        prim: 'DIP',\n        args: [{\n          int: String(n)\n        }, ex.args[0]]\n      });\n    }\n  } // Expand DU...UP and DUP n\n\n\n  if (duupRe.test(ex.prim)) {\n    let n = 0;\n\n    while (ex.prim[1 + n] === 'U') {\n      n++;\n    }\n\n    if (ProtoInferiorTo(proto, Protocol.PtEdo2Zk)) {\n      if (n === 1) {\n        if (ex.args === undefined) {\n          return ex; // skip\n        }\n\n        if (assertArgs$1(ex, 1) && assertIntArg(ex, ex.args[0])) {\n          n = parseInt(ex.args[0].int, 10);\n        }\n      } else {\n        assertArgs$1(ex, 0);\n      }\n\n      if (n === 1) {\n        return [mkPrim({\n          prim: 'DUP',\n          annots: ex.annots\n        })];\n      } else if (n === 2) {\n        return [{\n          prim: 'DIP',\n          args: [[mkPrim({\n            prim: 'DUP',\n            annots: ex.annots\n          })]]\n        }, {\n          prim: 'SWAP'\n        }];\n      } else {\n        return [{\n          prim: 'DIP',\n          args: [{\n            int: String(n - 1)\n          }, [mkPrim({\n            prim: 'DUP',\n            annots: ex.annots\n          })]]\n        }, {\n          prim: 'DIG',\n          args: [{\n            int: String(n)\n          }]\n        }];\n      }\n    } else {\n      if (n === 1) {\n        return ex;\n      }\n\n      if (assertArgs$1(ex, 0)) {\n        return mkPrim({\n          prim: 'DUP',\n          args: [{\n            int: String(n)\n          }],\n          annots: ex.annots\n        });\n      }\n    }\n  }\n\n  return ex;\n}\n\nfunction expandGlobalConstants(ex, hashAndValue) {\n  if (ex.args !== undefined && ex.args.length === 1 && 'string' in ex.args[0] && ex.args[0].string in hashAndValue) {\n    return hashAndValue[ex.args[0].string];\n  }\n\n  return ex;\n}\n/**\r\n *  @category Error\r\n *  @description Error indicating a failure when parsing Micheline expressions\r\n */\n\n\nclass MichelineParseError extends Error {\n  /**\r\n   * @param token A token caused the error\r\n   * @param message An error message\r\n   */\n  constructor(token, message) {\n    super(message);\n    this.token = token;\n    Object.setPrototypeOf(this, MichelineParseError.prototype);\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description Error that inidicates a failure when parsing Micheline JSON\r\n */\n\n\nclass JSONParseError extends Error {\n  /**\r\n   * @param node A node caused the error\r\n   * @param message An error message\r\n   */\n  constructor(node, message) {\n    super(message);\n    this.node = node;\n    Object.setPrototypeOf(this, JSONParseError.prototype);\n  }\n\n}\n\nconst errEOF = new MichelineParseError(null, 'Unexpected EOF');\n\nfunction isAnnotation(tok) {\n  return tok.t === Literal.Ident && (tok.v[0] === '@' || tok.v[0] === '%' || tok.v[0] === ':');\n}\n\nconst intRe = new RegExp('^-?[0-9]+$');\nconst bytesRe = new RegExp('^([0-9a-fA-F]{2})*$');\n/**\r\n * Converts and validates Michelson expressions between JSON-based Michelson and Micheline\r\n *\r\n * Pretty Print a Michelson Smart Contract:\r\n * ```\r\n * const contract = await Tezos.contract.at(\"KT1Vsw3kh9638gqWoHTjvHCoHLPKvCbMVbCg\");\r\n * const p = new Parser();\r\n *\r\n * const michelsonCode = p.parseJSON(contract.script.code);\r\n * const storage = p.parseJSON(contract.script.storage);\r\n *\r\n * console.log(\"Pretty print Michelson smart contract:\");\r\n * console.log(emitMicheline(michelsonCode, {indent:\"    \", newline: \"\\n\",}));\r\n *\r\n * console.log(\"Pretty print Storage:\");\r\n * console.log(emitMicheline(storage, {indent:\"    \", newline: \"\\n\",}));\r\n * ```\r\n *\r\n * Encode a Michelson expression for inital storage of a smart contract\r\n * ```\r\n * const src = `(Pair (Pair { Elt 1\r\n *                (Pair (Pair \"tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN\" \"tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx\")\r\n *                      0x0501000000026869) }\r\n *          10000000)\r\n *    (Pair 2 333))`;\r\n *\r\n * const p = new Parser();\r\n *\r\n * const exp = p.parseMichelineExpression(src);\r\n * console.log(JSON.stringify(exp));\r\n * ```\r\n */\n\nclass Parser {\n  constructor(opt) {\n    this.opt = opt;\n  }\n\n  expand(ex) {\n    var _a, _b, _c;\n\n    if (((_a = this.opt) === null || _a === void 0 ? void 0 : _a.expandGlobalConstant) !== undefined && ex.prim === 'constant') {\n      const ret = expandGlobalConstants(ex, this.opt.expandGlobalConstant);\n\n      if (ret !== ex) {\n        ret[sourceReference] = Object.assign(Object.assign({}, ex[sourceReference] || {\n          first: 0,\n          last: 0\n        }), {\n          globalConstant: ex\n        });\n      }\n\n      return ret;\n    }\n\n    if (((_b = this.opt) === null || _b === void 0 ? void 0 : _b.expandMacros) !== undefined ? (_c = this.opt) === null || _c === void 0 ? void 0 : _c.expandMacros : true) {\n      const ret = expandMacros(ex, this.opt);\n\n      if (ret !== ex) {\n        ret[sourceReference] = Object.assign(Object.assign({}, ex[sourceReference] || {\n          first: 0,\n          last: 0\n        }), {\n          macro: ex\n        });\n      }\n\n      return ret;\n    } else {\n      return ex;\n    }\n  }\n\n  parseListExpr(scanner, start) {\n    var _a;\n\n    const ref = {\n      first: start.first,\n      last: start.last\n    };\n    const expectBracket = start.t === '(';\n    let tok;\n\n    if (expectBracket) {\n      tok = scanner.next();\n\n      if (tok.done) {\n        throw errEOF;\n      }\n\n      ref.last = tok.value.last;\n    } else {\n      tok = {\n        value: start\n      };\n    }\n\n    if (tok.value.t !== Literal.Ident) {\n      throw new MichelineParseError(tok.value, `not an identifier: ${tok.value.v}`);\n    }\n\n    const ret = {\n      prim: tok.value.v,\n      [sourceReference]: ref\n    };\n\n    for (;;) {\n      const tok = scanner.next();\n\n      if (tok.done) {\n        if (expectBracket) {\n          throw errEOF;\n        }\n\n        break;\n      } else if (tok.value.t === ')') {\n        if (!expectBracket) {\n          throw new MichelineParseError(tok.value, 'unexpected closing bracket');\n        }\n\n        ref.last = tok.value.last;\n        break;\n      } else if (isAnnotation(tok.value)) {\n        ret.annots = ret.annots || [];\n        ret.annots.push(tok.value.v);\n        ref.last = tok.value.last;\n      } else {\n        ret.args = ret.args || [];\n        const arg = this.parseExpr(scanner, tok.value);\n        ref.last = ((_a = arg[sourceReference]) === null || _a === void 0 ? void 0 : _a.last) || ref.last;\n        ret.args.push(arg);\n      }\n    }\n\n    return this.expand(ret);\n  }\n\n  parseArgs(scanner, start) {\n    var _a; // Identifier with arguments\n\n\n    const ref = {\n      first: start.first,\n      last: start.last\n    };\n    const p = {\n      prim: start.v,\n      [sourceReference]: ref\n    };\n\n    for (;;) {\n      const t = scanner.next();\n\n      if (t.done || t.value.t === '}' || t.value.t === ';') {\n        return [p, t];\n      }\n\n      if (isAnnotation(t.value)) {\n        ref.last = t.value.last;\n        p.annots = p.annots || [];\n        p.annots.push(t.value.v);\n      } else {\n        const arg = this.parseExpr(scanner, t.value);\n        ref.last = ((_a = arg[sourceReference]) === null || _a === void 0 ? void 0 : _a.last) || ref.last;\n        p.args = p.args || [];\n        p.args.push(arg);\n      }\n    }\n  }\n\n  parseSequenceExpr(scanner, start) {\n    var _a, _b;\n\n    const ref = {\n      first: start.first,\n      last: start.last\n    };\n    const seq = [];\n    seq[sourceReference] = ref;\n    const expectBracket = start.t === '{';\n    let tok = start.t === '{' ? null : {\n      value: start\n    };\n\n    for (;;) {\n      if (tok === null) {\n        tok = scanner.next();\n\n        if (!tok.done) {\n          ref.last = tok.value.last;\n        }\n      }\n\n      if (tok.done) {\n        if (expectBracket) {\n          throw errEOF;\n        } else {\n          return seq;\n        }\n      }\n\n      if (tok.value.t === '}') {\n        if (!expectBracket) {\n          throw new MichelineParseError(tok.value, 'unexpected closing bracket');\n        } else {\n          return seq;\n        }\n      } else if (tok.value.t === Literal.Ident) {\n        // Identifier with arguments\n        const [itm, n] = this.parseArgs(scanner, tok.value);\n        ref.last = ((_a = itm[sourceReference]) === null || _a === void 0 ? void 0 : _a.last) || ref.last;\n        seq.push(this.expand(itm));\n        tok = n;\n      } else {\n        // Other\n        const ex = this.parseExpr(scanner, tok.value);\n        ref.last = ((_b = ex[sourceReference]) === null || _b === void 0 ? void 0 : _b.last) || ref.last;\n        seq.push(ex);\n        tok = null;\n      }\n\n      if (tok === null) {\n        tok = scanner.next();\n\n        if (!tok.done) {\n          ref.last = tok.value.last;\n        }\n      }\n\n      if (!tok.done && tok.value.t === ';') {\n        tok = null;\n      }\n    }\n  }\n\n  parseExpr(scanner, tok) {\n    switch (tok.t) {\n      case Literal.Ident:\n        return this.expand({\n          prim: tok.v,\n          [sourceReference]: {\n            first: tok.first,\n            last: tok.last\n          }\n        });\n\n      case Literal.Number:\n        return {\n          int: tok.v,\n          [sourceReference]: {\n            first: tok.first,\n            last: tok.last\n          }\n        };\n\n      case Literal.String:\n        return {\n          string: JSON.parse(tok.v),\n          [sourceReference]: {\n            first: tok.first,\n            last: tok.last\n          }\n        };\n\n      case Literal.Bytes:\n        return {\n          bytes: tok.v.slice(2),\n          [sourceReference]: {\n            first: tok.first,\n            last: tok.last\n          }\n        };\n\n      case '{':\n        return this.parseSequenceExpr(scanner, tok);\n\n      default:\n        return this.parseListExpr(scanner, tok);\n    }\n  }\n  /**\r\n   * Parses a Micheline sequence expression, such as smart contract source. Enclosing curly brackets may be omitted.\r\n   * @param src A Micheline sequence `{parameter ...; storage int; code { DUP ; ...};}` or `parameter ...; storage int; code { DUP ; ...};`\r\n   */\n\n\n  parseSequence(src) {\n    if (typeof src !== 'string') {\n      throw new TypeError(`string type was expected, got ${typeof src} instead`);\n    }\n\n    const scanner = scan(src);\n    const tok = scanner.next();\n\n    if (tok.done) {\n      return null;\n    }\n\n    return this.parseSequenceExpr(scanner, tok.value);\n  }\n  /**\r\n   * Parse a Micheline sequence expression. Enclosing curly brackets may be omitted.\r\n   * @param src A Michelson list expression such as `(Pair {Elt \"0\" 0} 0)` or `Pair {Elt \"0\" 0} 0`\r\n   * @returns An AST node or null for empty document.\r\n   */\n\n\n  parseList(src) {\n    if (typeof src !== 'string') {\n      throw new TypeError(`string type was expected, got ${typeof src} instead`);\n    }\n\n    const scanner = scan(src);\n    const tok = scanner.next();\n\n    if (tok.done) {\n      return null;\n    }\n\n    return this.parseListExpr(scanner, tok.value);\n  }\n  /**\r\n   * Parse any Michelson expression\r\n   * @param src A Michelson expression such as `(Pair {Elt \"0\" 0} 0)` or `{parameter ...; storage int; code { DUP ; ...};}`\r\n   * @returns An AST node or null for empty document.\r\n   */\n\n\n  parseMichelineExpression(src) {\n    if (typeof src !== 'string') {\n      throw new TypeError(`string type was expected, got ${typeof src} instead`);\n    }\n\n    const scanner = scan(src);\n    const tok = scanner.next();\n\n    if (tok.done) {\n      return null;\n    }\n\n    return this.parseExpr(scanner, tok.value);\n  }\n  /**\r\n   * Parse a Micheline sequence expression, such as smart contract source. Enclosing curly brackets may be omitted.\r\n   * An alias for `parseSequence`\r\n   * @param src A Micheline sequence `{parameter ...; storage int; code { DUP ; ...};}` or `parameter ...; storage int; code { DUP ; ...};`\r\n   */\n\n\n  parseScript(src) {\n    return this.parseSequence(src);\n  }\n  /**\r\n   * Parse a Micheline sequence expression. Enclosing curly brackets may be omitted.\r\n   * An alias for `parseList`\r\n   * @param src A Michelson list expression such as `(Pair {Elt \"0\" 0} 0)` or `Pair {Elt \"0\" 0} 0`\r\n   * @returns An AST node or null for empty document.\r\n   */\n\n\n  parseData(src) {\n    return this.parseList(src);\n  }\n  /**\r\n   * Takes a JSON-encoded Michelson, validates it, strips away unneeded properties and optionally expands macros (See {@link ParserOptions}).\r\n   * @param src An object containing JSON-encoded Michelson, usually returned by `JSON.parse()`\r\n   */\n\n\n  parseJSON(src) {\n    if (typeof src !== 'object') {\n      throw new TypeError(`object type was expected, got ${typeof src} instead`);\n    }\n\n    if (Array.isArray(src)) {\n      const ret = [];\n\n      for (const n of src) {\n        if (n === null || typeof n !== 'object') {\n          throw new JSONParseError(n, `unexpected sequence element: ${n}`);\n        }\n\n        ret.push(this.parseJSON(n));\n      }\n\n      return ret;\n    } else if ('prim' in src) {\n      const p = src;\n\n      if (typeof p.prim === 'string' && (p.annots === undefined || Array.isArray(p.annots)) && (p.args === undefined || Array.isArray(p.args))) {\n        const ret = {\n          prim: p.prim\n        };\n\n        if (p.annots !== undefined) {\n          for (const a of p.annots) {\n            if (typeof a !== 'string') {\n              throw new JSONParseError(a, `string expected: ${a}`);\n            }\n          }\n\n          ret.annots = p.annots;\n        }\n\n        if (p.args !== undefined) {\n          ret.args = [];\n\n          for (const a of p.args) {\n            if (a === null || typeof a !== 'object') {\n              throw new JSONParseError(a, `unexpected argument: ${a}`);\n            }\n\n            ret.args.push(this.parseJSON(a));\n          }\n        }\n\n        return this.expand(ret);\n      }\n\n      throw new JSONParseError(src, `malformed prim expression: ${src}`);\n    } else if ('string' in src) {\n      if (typeof src.string === 'string') {\n        return {\n          string: src.string\n        };\n      }\n\n      throw new JSONParseError(src, `malformed string literal: ${src}`);\n    } else if ('int' in src) {\n      if (typeof src.int === 'string' && intRe.test(src.int)) {\n        return {\n          int: src.int\n        };\n      }\n\n      throw new JSONParseError(src, `malformed int literal: ${src}`);\n    } else if ('bytes' in src) {\n      if (typeof src.bytes === 'string' && bytesRe.test(src.bytes)) {\n        return {\n          bytes: src.bytes\n        };\n      }\n\n      throw new JSONParseError(src, `malformed bytes literal: ${src}`);\n    } else {\n      throw new JSONParseError(src, `unexpected object: ${src}`);\n    }\n  }\n\n}\n\nclass Formatter {\n  constructor(opt, lev = 0) {\n    this.opt = opt;\n    this.lev = lev;\n  }\n\n  indent(n = 0) {\n    var _a;\n\n    let ret = '';\n\n    if (((_a = this.opt) === null || _a === void 0 ? void 0 : _a.indent) !== undefined) {\n      for (let i = this.lev + n; i > 0; i--) {\n        ret += this.opt.indent;\n      }\n    }\n\n    return ret;\n  }\n\n  get lf() {\n    var _a;\n\n    return ((_a = this.opt) === null || _a === void 0 ? void 0 : _a.newline) || '';\n  }\n\n  get lfsp() {\n    var _a;\n\n    return ((_a = this.opt) === null || _a === void 0 ? void 0 : _a.newline) || ' ';\n  }\n\n  down(n) {\n    return new Formatter(this.opt, this.lev + n);\n  }\n\n}\n\nfunction hasArgs(node) {\n  return 'prim' in node && (node.annots !== undefined && node.annots.length !== 0 || node.args !== undefined && node.args.length !== 0);\n}\n\nfunction isMultiline(node) {\n  if (node.args !== undefined) {\n    for (const a of node.args) {\n      if (Array.isArray(a) || hasArgs(a)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction emitExpr(node, f, foldMacros) {\n  var _a;\n\n  const macro = (_a = node[sourceReference]) === null || _a === void 0 ? void 0 : _a.macro;\n\n  if (foldMacros && macro) {\n    return emitExpr(macro, f, foldMacros);\n  }\n\n  if (Array.isArray(node)) {\n    return emitSeq(node, f, foldMacros);\n  } else if ('string' in node) {\n    return JSON.stringify(node.string);\n  } else if ('int' in node) {\n    return node.int;\n  } else if ('bytes' in node) {\n    return '0x' + node.bytes;\n  } else {\n    if ((node.annots === undefined || node.annots.length === 0) && (node.args === undefined || node.args.length === 0)) {\n      return node.prim;\n    }\n\n    let ret = '(' + node.prim;\n\n    if (node.annots !== undefined) {\n      for (const a of node.annots) {\n        ret += ' ' + a;\n      }\n    }\n\n    if (node.args !== undefined) {\n      const multiline = isMultiline(node);\n\n      for (const a of node.args) {\n        if (multiline) {\n          ret += f.lfsp + f.indent(1) + emitExpr(a, f.down(1), foldMacros);\n        } else {\n          ret += ' ' + emitExpr(a, f, foldMacros);\n        }\n      }\n    }\n\n    return ret + ')';\n  }\n}\n\nfunction emitSeq(node, f, foldMacros) {\n  let ret = '{' + f.lf;\n  let i = node.length;\n\n  for (const el of node) {\n    ret += f.indent(1);\n\n    if ('prim' in el) {\n      ret += el.prim;\n\n      if (el.annots !== undefined) {\n        for (const a of el.annots) {\n          ret += ' ' + a;\n        }\n      }\n\n      if (el.args !== undefined) {\n        const multiline = isMultiline(el);\n\n        for (const a of el.args) {\n          if (multiline) {\n            ret += f.lfsp + f.indent(2) + emitExpr(a, f.down(2), foldMacros);\n          } else {\n            ret += ' ' + emitExpr(a, f, foldMacros);\n          }\n        }\n      }\n    } else {\n      ret += emitExpr(el, f.down(1), foldMacros);\n    }\n\n    ret += i > 1 ? ';' + f.lfsp : f.lf;\n    i--;\n  }\n\n  return ret + f.indent() + '}';\n}\n/**\r\n * Formats Micheline expression\r\n * @param expr An AST node\r\n * @param opt Options\r\n */\n\n\nfunction emitMicheline(expr, opt, foldMacros = false) {\n  if (typeof expr !== 'object') {\n    throw new TypeError(`object type was expected, got ${typeof expr} instead`);\n  }\n\n  return emitExpr(expr, new Formatter(opt), foldMacros);\n}\n\nconst H = [0x6a09e667 | 0, 0xbb67ae85 | 0, 0x3c6ef372 | 0, 0xa54ff53a | 0, 0x510e527f | 0, 0x9b05688c | 0, 0x1f83d9ab | 0, 0x5be0cd19 | 0];\nconst K = [0x428a2f98 | 0, 0x71374491 | 0, 0xb5c0fbcf | 0, 0xe9b5dba5 | 0, 0x3956c25b | 0, 0x59f111f1 | 0, 0x923f82a4 | 0, 0xab1c5ed5 | 0, 0xd807aa98 | 0, 0x12835b01 | 0, 0x243185be | 0, 0x550c7dc3 | 0, 0x72be5d74 | 0, 0x80deb1fe | 0, 0x9bdc06a7 | 0, 0xc19bf174 | 0, 0xe49b69c1 | 0, 0xefbe4786 | 0, 0x0fc19dc6 | 0, 0x240ca1cc | 0, 0x2de92c6f | 0, 0x4a7484aa | 0, 0x5cb0a9dc | 0, 0x76f988da | 0, 0x983e5152 | 0, 0xa831c66d | 0, 0xb00327c8 | 0, 0xbf597fc7 | 0, 0xc6e00bf3 | 0, 0xd5a79147 | 0, 0x06ca6351 | 0, 0x14292967 | 0, 0x27b70a85 | 0, 0x2e1b2138 | 0, 0x4d2c6dfc | 0, 0x53380d13 | 0, 0x650a7354 | 0, 0x766a0abb | 0, 0x81c2c92e | 0, 0x92722c85 | 0, 0xa2bfe8a1 | 0, 0xa81a664b | 0, 0xc24b8b70 | 0, 0xc76c51a3 | 0, 0xd192e819 | 0, 0xd6990624 | 0, 0xf40e3585 | 0, 0x106aa070 | 0, 0x19a4c116 | 0, 0x1e376c08 | 0, 0x2748774c | 0, 0x34b0bcb5 | 0, 0x391c0cb3 | 0, 0x4ed8aa4a | 0, 0x5b9cca4f | 0, 0x682e6ff3 | 0, 0x748f82ee | 0, 0x78a5636f | 0, 0x84c87814 | 0, 0x8cc70208 | 0, 0x90befffa | 0, 0xa4506ceb | 0, 0xbef9a3f7 | 0, 0xc67178f2 | 0];\n/**\r\n *  @category Error\r\n *  @description Error that indicates a failure when decoding a base58 encoding\r\n */\n\nclass Base58DecodingError extends Error {\n  constructor(message) {\n    super(message);\n    this.message = message;\n    this.name = 'Base58DecodingError';\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description\r\n */\n\n\nclass InvalidMessageError extends Error {\n  constructor(message) {\n    super(message);\n    this.message = message;\n    this.name = 'InvalidMessageError';\n  }\n\n} // https://tools.ietf.org/html/rfc6234\n\n\nfunction sha256(msg) {\n  // pad the message\n  const r = (msg.length + 9) % 64;\n  const pad = r === 0 ? 0 : 64 - r;\n\n  if (msg.length > 268435455) {\n    throw new InvalidMessageError(`SHA-256 -- message length is too big: ${msg.length}`);\n  }\n\n  const l = msg.length << 3;\n  const buffer = [...msg, 0x80, ...new Array(pad).fill(0), 0, 0, 0, 0, l >> 24 & 0xff, l >> 16 & 0xff, l >> 8 & 0xff, l & 0xff];\n\n  function ror(x, n) {\n    return x >>> n | x << 32 - n;\n  }\n\n  const h = [...H];\n  const w = new Array(64);\n  const v = new Array(8);\n\n  for (let offset = 0; offset < buffer.length; offset += 64) {\n    let q = offset;\n    let i = 0;\n\n    while (i < 16) {\n      w[i] = buffer[q] << 24 | buffer[q + 1] << 16 | buffer[q + 2] << 8 | buffer[q + 3];\n      q += 4;\n      i++;\n    }\n\n    while (i < 64) {\n      const s0 = ror(w[i - 15], 7) ^ ror(w[i - 15], 18) ^ w[i - 15] >>> 3;\n      const s1 = ror(w[i - 2], 17) ^ ror(w[i - 2], 19) ^ w[i - 2] >>> 10;\n      w[i] = (s1 | 0) + w[i - 7] + s0 + w[i - 16] | 0;\n      i++;\n    }\n\n    for (let i = 0; i < 8; i++) {\n      v[i] = h[i];\n    }\n\n    for (let i = 0; i < 64; i++) {\n      const b0 = ror(v[0], 2) ^ ror(v[0], 13) ^ ror(v[0], 22);\n      const b1 = ror(v[4], 6) ^ ror(v[4], 11) ^ ror(v[4], 25);\n      const t1 = v[7] + b1 + (v[4] & v[5] ^ ~v[4] & v[6]) + K[i] + w[i] | 0;\n      const t2 = b0 + (v[0] & v[1] ^ v[0] & v[2] ^ v[1] & v[2]) | 0;\n      v[7] = v[6];\n      v[6] = v[5];\n      v[5] = v[4];\n      v[4] = v[3] + t1 | 0;\n      v[3] = v[2];\n      v[2] = v[1];\n      v[1] = v[0];\n      v[0] = t1 + t2 | 0;\n    }\n\n    for (let i = 0; i < 8; i++) {\n      h[i] = h[i] + v[i] | 0;\n    }\n  }\n\n  const digest = [];\n\n  for (const v of h) {\n    digest.push(v >> 24 & 0xff);\n    digest.push(v >> 16 & 0xff);\n    digest.push(v >> 8 & 0xff);\n    digest.push(v & 0xff);\n  }\n\n  return digest;\n}\n\nconst base58alphabetFwd = [0, 1, 2, 3, 4, 5, 6, 7, 8, -1, -1, -1, -1, -1, -1, -1, 9, 10, 11, 12, 13, 14, 15, 16, -1, 17, 18, 19, 20, 21, -1, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, -1, -1, -1, -1, -1, -1, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, -1, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57];\nconst base58alphabetBwd = [0, 1, 2, 3, 4, 5, 6, 7, 8, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73];\n\nfunction byteAt(src, i) {\n  const c = src.charCodeAt(i) - 49;\n\n  if (c >= base58alphabetFwd.length || base58alphabetFwd[c] === -1) {\n    throw new Base58DecodingError(`Unexpected character at position ${i}: ${src[i]}`);\n  }\n\n  return base58alphabetFwd[c];\n}\n\nfunction decodeBase58(src) {\n  const acc = [];\n  let i = 0; // count and skip leading zeros\n\n  while (i < src.length && byteAt(src, i) === 0) {\n    i++;\n  }\n\n  let zeros = i;\n\n  while (i < src.length) {\n    let carry = byteAt(src, i++);\n    /*\r\n        for every symbol x\r\n        acc = acc * 58 + x\r\n        where acc is a little endian arbitrary length integer\r\n        */\n\n    let ii = 0;\n\n    while (carry !== 0 || ii < acc.length) {\n      const m = (acc[ii] || 0) * 58 + carry;\n      acc[ii++] = m % 256;\n      carry = Math.floor(m / 256);\n    }\n  }\n\n  while (zeros-- > 0) {\n    acc.push(0);\n  }\n\n  return acc.reverse();\n}\n\nfunction encodeBase58(src) {\n  const acc = [];\n  let i = 0; // count and skip leading zeros\n\n  while (i < src.length && src[i] === 0) {\n    i++;\n  }\n\n  let zeros = i;\n\n  while (i < src.length) {\n    let carry = src[i++];\n    let ii = 0;\n\n    while (carry !== 0 || ii < acc.length) {\n      const m = (acc[ii] || 0) * 256 + carry;\n      acc[ii++] = m % 58;\n      carry = Math.floor(m / 58);\n    }\n  }\n\n  while (zeros-- > 0) {\n    acc.push(0);\n  }\n\n  acc.reverse();\n  return String.fromCharCode(...acc.map(v => base58alphabetBwd[v] + 49));\n}\n\nfunction decodeBase58Check(src) {\n  const buffer = decodeBase58(src);\n\n  if (buffer.length < 4) {\n    throw new Base58DecodingError(`Data is too short ${buffer.length}`);\n  }\n\n  const data = buffer.slice(0, buffer.length - 4);\n  const sum = buffer.slice(buffer.length - 4);\n  const computed = sha256(sha256(data));\n\n  if (sum[0] !== computed[0] || sum[1] !== computed[1] || sum[2] !== computed[2] || sum[3] !== computed[3]) {\n    throw new Base58DecodingError('Invalid checksum');\n  }\n\n  return data;\n}\n\nfunction encodeBase58Check(src) {\n  const sum = sha256(sha256(src));\n  return encodeBase58([...src, ...sum.slice(0, 4)]);\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates an invalid contract being passed or used\r\n */\n\n\nclass InvalidContractError extends Error {\n  constructor(message) {\n    super(message);\n    this.message = message;\n    this.name = 'InvalidContractError';\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates an invalid type expression being passed or used\r\n */\n\n\nclass InvalidTypeExpressionError extends Error {\n  constructor(message) {\n    super(message);\n    this.message = message;\n    this.name = 'InvalidTypeExpressionError';\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates an invalid data expression being passed or used\r\n */\n\n\nclass InvalidDataExpressionError extends Error {\n  constructor(message) {\n    super(message);\n    this.message = message;\n    this.name = 'InvalidDataExpressionError';\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates an invalid contract entrypoint being referenced or passed\r\n */\n\n\nclass InvalidEntrypointError extends Error {\n  constructor(entrypoint) {\n    super(`Contract has no entrypoint named: '${entrypoint}'`);\n    this.entrypoint = entrypoint;\n    this.name = 'InvalidEntrypointError';\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates a failure happening when trying to encode Tezos ID\r\n */\n\n\nclass TezosIdEncodeError extends Error {\n  constructor(message) {\n    super(message);\n    this.message = message;\n    this.name = 'TezosIdEncodeError';\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates a general error happening when trying to create a LongInteger\r\n */\n\n\nclass LongIntegerError extends Error {\n  constructor(message) {\n    super(message);\n    this.message = message;\n    this.name = 'LongIntegerError';\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates a failure occurring when trying to parse a hex byte\r\n */\n\n\nclass HexParseError extends Error {\n  constructor(hexByte) {\n    super(`Unable to parse hex byte: ${hexByte}`);\n    this.hexByte = hexByte;\n    this.name = 'HexParseError';\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates a Michelson failure occurring\r\n */\n\n\nclass MichelsonError extends Error {\n  /**\r\n   * @param val Value of a AST node caused the error\r\n   * @param path Path to a node caused the error\r\n   * @param message An error message\r\n   */\n  constructor(val, message) {\n    super(message);\n    this.val = val;\n    Object.setPrototypeOf(this, MichelsonError.prototype);\n  }\n\n}\n\nfunction isMichelsonError(err) {\n  return err instanceof MichelsonError;\n}\n\nclass MichelsonTypeError extends MichelsonError {\n  /**\r\n   * @param val Value of a type node caused the error\r\n   * @param data Value of a data node caused the error\r\n   * @param message An error message\r\n   */\n  constructor(val, data, message) {\n    super(val, message);\n\n    if (data !== undefined) {\n      this.data = data;\n    }\n\n    Object.setPrototypeOf(this, MichelsonTypeError.prototype);\n  }\n\n} // Ad hoc big integer parser\n\n\nclass LongInteger {\n  constructor(arg) {\n    this.neg = false;\n    this.buf = [];\n\n    if (arg === undefined) {\n      return;\n    }\n\n    if (typeof arg === 'string') {\n      for (let i = 0; i < arg.length; i++) {\n        const c = arg.charCodeAt(i);\n\n        if (i === 0 && c === 0x2d) {\n          this.neg = true;\n        } else {\n          if (c < 0x30 || c > 0x39) {\n            throw new LongIntegerError(`unexpected character in integer constant: ${arg[i]}`);\n          }\n\n          this.append(c - 0x30);\n        }\n      }\n    } else if (arg < 0) {\n      this.neg = true;\n      this.append(-arg);\n    } else {\n      this.append(arg);\n    }\n  }\n\n  append(c) {\n    let i = 0;\n\n    while (c !== 0 || i < this.buf.length) {\n      const m = (this.buf[i] || 0) * 10 + c;\n      this.buf[i++] = m % 256;\n      c = Math.floor(m / 256);\n    }\n  }\n\n  cmp(arg) {\n    if (this.neg !== arg.neg) {\n      return (arg.neg ? 1 : 0) - (this.neg ? 1 : 0);\n    } else {\n      let ret = 0;\n\n      if (this.buf.length !== arg.buf.length) {\n        ret = this.buf.length < arg.buf.length ? -1 : 1;\n      } else if (this.buf.length !== 0) {\n        let i = arg.buf.length - 1;\n\n        while (i >= 0 && this.buf[i] === arg.buf[i]) {\n          i--;\n        }\n\n        ret = i < 0 ? 0 : this.buf[i] < arg.buf[i] ? -1 : 1;\n      }\n\n      return !this.neg ? ret : ret === 0 ? 0 : -ret;\n    }\n  }\n\n  get sign() {\n    return this.buf.length === 0 ? 0 : this.neg ? -1 : 1;\n  }\n\n}\n\nfunction parseBytes(s) {\n  const ret = [];\n\n  for (let i = 0; i < s.length; i += 2) {\n    const x = parseInt(s.slice(i, i + 2), 16);\n\n    if (Number.isNaN(x)) {\n      return null;\n    }\n\n    ret.push(x);\n  }\n\n  return ret;\n}\n\nfunction isDecimal(x) {\n  try {\n    new LongInteger(x);\n    return true;\n  } catch (_a) {\n    return false;\n  }\n}\n\nfunction isNatural(x) {\n  try {\n    return new LongInteger(x).sign >= 0;\n  } catch (_a) {\n    return false;\n  }\n}\n\nconst annRe = /^(@%|@%%|%@|[@:%]([_0-9a-zA-Z][_0-9a-zA-Z.%@]*)?)$/;\n\nfunction unpackAnnotations(p, opt) {\n  if (Array.isArray(p)) {\n    return {};\n  }\n\n  let field;\n  let type;\n  let vars;\n\n  if (p.annots !== undefined) {\n    for (const v of p.annots) {\n      if (v.length !== 0) {\n        if (!annRe.test(v) || !(opt === null || opt === void 0 ? void 0 : opt.specialVar) && (v === '@%' || v === '@%%') || !(opt === null || opt === void 0 ? void 0 : opt.specialFields) && v === '%@') {\n          throw new MichelsonError(p, `${p.prim}: unexpected annotation: ${v}`);\n        }\n\n        switch (v[0]) {\n          case '%':\n            if ((opt === null || opt === void 0 ? void 0 : opt.emptyFields) || v.length > 1) {\n              field = field || [];\n              field.push(v);\n            }\n\n            break;\n\n          case ':':\n            if (v.length > 1) {\n              type = type || [];\n              type.push(v);\n            }\n\n            break;\n\n          case '@':\n            if ((opt === null || opt === void 0 ? void 0 : opt.emptyVar) || v.length > 1) {\n              vars = vars || [];\n              vars.push(v);\n            }\n\n            break;\n        }\n      }\n    }\n  }\n\n  return {\n    f: field,\n    t: type,\n    v: vars\n  };\n}\n\nconst tezosPrefix = {\n  BlockHash: [32, [1, 52]],\n  OperationHash: [32, [5, 116]],\n  OperationListHash: [32, [133, 233]],\n  OperationListListHash: [32, [29, 159, 109]],\n  ProtocolHash: [32, [2, 170]],\n  ContextHash: [32, [79, 199]],\n  ED25519PublicKeyHash: [20, [6, 161, 159]],\n  SECP256K1PublicKeyHash: [20, [6, 161, 161]],\n  P256PublicKeyHash: [20, [6, 161, 164]],\n  ContractHash: [20, [2, 90, 121]],\n  CryptoboxPublicKeyHash: [16, [153, 103]],\n  ED25519Seed: [32, [13, 15, 58, 7]],\n  ED25519PublicKey: [32, [13, 15, 37, 217]],\n  SECP256K1SecretKey: [32, [17, 162, 224, 201]],\n  P256SecretKey: [32, [16, 81, 238, 189]],\n  ED25519EncryptedSeed: [56, [7, 90, 60, 179, 41]],\n  SECP256K1EncryptedSecretKey: [56, [9, 237, 241, 174, 150]],\n  P256EncryptedSecretKey: [56, [9, 48, 57, 115, 171]],\n  SECP256K1PublicKey: [33, [3, 254, 226, 86]],\n  P256PublicKey: [33, [3, 178, 139, 127]],\n  SECP256K1Scalar: [33, [38, 248, 136]],\n  SECP256K1Element: [33, [5, 92, 0]],\n  ED25519SecretKey: [64, [43, 246, 78, 7]],\n  ED25519Signature: [64, [9, 245, 205, 134, 18]],\n  SECP256K1Signature: [64, [13, 115, 101, 19, 63]],\n  P256Signature: [64, [54, 240, 44, 52]],\n  GenericSignature: [64, [4, 130, 43]],\n  ChainID: [4, [87, 82, 0]]\n};\n\nfunction checkDecodeTezosID(id, ...types) {\n  const buf = decodeBase58Check(id);\n\n  for (const t of types) {\n    const [plen, p] = tezosPrefix[t];\n\n    if (buf.length === plen + p.length) {\n      let i = 0;\n\n      while (i < p.length && buf[i] === p[i]) {\n        i++;\n      }\n\n      if (i === p.length) {\n        return [t, buf.slice(p.length)];\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction encodeTezosID(id, data) {\n  const [plen, p] = tezosPrefix[id];\n\n  if (data.length !== plen) {\n    throw new TezosIdEncodeError(`Incorrect data length for ${id}: ${data.length}`);\n  }\n\n  return encodeBase58Check([...p, ...data]);\n}\n\nfunction unpackComb(id, v) {\n  const vv = v;\n  const args = Array.isArray(vv) ? vv : vv.args;\n\n  if (args.length === 2) {\n    // it's a way to make a union of two interfaces not an interface with two independent properties of union types\n    const ret = id === 'pair' ? {\n      prim: 'pair',\n      args\n    } : {\n      prim: 'Pair',\n      args\n    };\n    return ret;\n  }\n\n  return Object.assign(Object.assign({}, Array.isArray(vv) ? {\n    prim: id\n  } : vv), {\n    args: [args[0], {\n      prim: id,\n      args: args.slice(1)\n    }]\n  });\n}\n\nfunction isPairType(t) {\n  return Array.isArray(t) || t.prim === 'pair';\n}\n\nfunction isPairData(d) {\n  return Array.isArray(d) || 'prim' in d && d.prim === 'Pair';\n}\n\nconst rfc3339Re = /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])[T ]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\\.[0-9]+)?(Z|[+-]([01][0-9]|2[0-3]):([0-5][0-9]))$/;\n\nfunction parseDate(a) {\n  if ('string' in a) {\n    if (isNatural(a.string)) {\n      return new Date(parseInt(a.string, 10));\n    } else if (rfc3339Re.test(a.string)) {\n      const x = new Date(a.string);\n\n      if (!Number.isNaN(x.valueOf)) {\n        return x;\n      }\n    }\n  } else if (isDecimal(a.int)) {\n    return new Date(parseInt(a.int, 10));\n  }\n\n  return null;\n}\n\nfunction parseHex(s) {\n  const res = [];\n\n  for (let i = 0; i < s.length; i += 2) {\n    const ss = s.slice(i, i + 2);\n    const x = parseInt(ss, 16);\n\n    if (Number.isNaN(x)) {\n      throw new HexParseError(ss);\n    }\n\n    res.push(x);\n  }\n\n  return res;\n}\n\nfunction hexBytes(bytes) {\n  return bytes.map(x => (x >> 4 & 0xf).toString(16) + (x & 0xf).toString(16)).join('');\n} // Michelson validator\n\n\nconst maxViewNameLength = 31;\nconst noArgInstructionIDs = {\n  ABS: true,\n  ADD: true,\n  ADDRESS: true,\n  AMOUNT: true,\n  AND: true,\n  APPLY: true,\n  BALANCE: true,\n  BLAKE2B: true,\n  CAR: true,\n  CDR: true,\n  CHAIN_ID: true,\n  CHECK_SIGNATURE: true,\n  COMPARE: true,\n  CONCAT: true,\n  CONS: true,\n  EDIV: true,\n  EQ: true,\n  EXEC: true,\n  FAILWITH: true,\n  GE: true,\n  GET_AND_UPDATE: true,\n  GT: true,\n  HASH_KEY: true,\n  IMPLICIT_ACCOUNT: true,\n  INT: true,\n  ISNAT: true,\n  JOIN_TICKETS: true,\n  KECCAK: true,\n  LE: true,\n  LEVEL: true,\n  LSL: true,\n  LSR: true,\n  LT: true,\n  MEM: true,\n  MUL: true,\n  NEG: true,\n  NEQ: true,\n  NEVER: true,\n  NOT: true,\n  NOW: true,\n  OR: true,\n  PACK: true,\n  PAIRING_CHECK: true,\n  READ_TICKET: true,\n  SAPLING_VERIFY_UPDATE: true,\n  SELF: true,\n  SELF_ADDRESS: true,\n  SENDER: true,\n  SET_DELEGATE: true,\n  SHA256: true,\n  SHA3: true,\n  SHA512: true,\n  SIZE: true,\n  SLICE: true,\n  SOME: true,\n  SOURCE: true,\n  SPLIT_TICKET: true,\n  SUB: true,\n  SWAP: true,\n  TICKET: true,\n  TOTAL_VOTING_POWER: true,\n  TRANSFER_TOKENS: true,\n  UNIT: true,\n  VOTING_POWER: true,\n  XOR: true,\n  RENAME: true,\n  OPEN_CHEST: true,\n  SUB_MUTEZ: true\n};\nconst instructionIDs = Object.assign({}, noArgInstructionIDs, {\n  CONTRACT: true,\n  CREATE_CONTRACT: true,\n  DIG: true,\n  DIP: true,\n  DROP: true,\n  DUG: true,\n  DUP: true,\n  EMPTY_BIG_MAP: true,\n  EMPTY_MAP: true,\n  EMPTY_SET: true,\n  GET: true,\n  IF: true,\n  IF_CONS: true,\n  IF_LEFT: true,\n  IF_NONE: true,\n  ITER: true,\n  LAMBDA: true,\n  LEFT: true,\n  LOOP: true,\n  LOOP_LEFT: true,\n  MAP: true,\n  NIL: true,\n  NONE: true,\n  PAIR: true,\n  PUSH: true,\n  RIGHT: true,\n  SAPLING_EMPTY_STATE: true,\n  UNPACK: true,\n  UNPAIR: true,\n  UPDATE: true,\n  CAST: true,\n  VIEW: true\n});\nconst simpleComparableTypeIDs = {\n  unit: true,\n  never: true,\n  bool: true,\n  int: true,\n  nat: true,\n  string: true,\n  chain_id: true,\n  bytes: true,\n  mutez: true,\n  key_hash: true,\n  key: true,\n  signature: true,\n  timestamp: true,\n  address: true\n};\nconst typeIDs = Object.assign({}, simpleComparableTypeIDs, {\n  or: true,\n  pair: true,\n  set: true,\n  big_map: true,\n  contract: true,\n  lambda: true,\n  list: true,\n  map: true,\n  operation: true,\n  option: true,\n  bls12_381_g1: true,\n  bls12_381_g2: true,\n  bls12_381_fr: true,\n  sapling_transaction: true,\n  sapling_state: true,\n  ticket: true,\n  chest_key: true,\n  chest: true\n});\n\nclass MichelsonValidationError extends MichelsonError {\n  /**\r\n   * @param val Value of a node caused the error\r\n   * @param message An error message\r\n   */\n  constructor(val, message) {\n    super(val, message);\n    this.val = val;\n    Object.setPrototypeOf(this, MichelsonValidationError.prototype);\n  }\n\n}\n\nfunction isPrim(ex) {\n  return 'prim' in ex;\n}\n\nfunction isPrimOrSeq(ex) {\n  return Array.isArray(ex) || 'prim' in ex;\n}\n\nfunction assertPrim(ex) {\n  if (isPrim(ex)) {\n    return true;\n  }\n\n  throw new MichelsonValidationError(ex, 'prim expression expected');\n}\n\nfunction assertSeq(ex) {\n  if (Array.isArray(ex)) {\n    return true;\n  }\n\n  throw new MichelsonValidationError(ex, 'sequence expression expected');\n}\n\nfunction assertPrimOrSeq(ex) {\n  if (isPrimOrSeq(ex)) {\n    return true;\n  }\n\n  throw new MichelsonValidationError(ex, 'prim or sequence expression expected');\n}\n\nfunction assertNatural(i) {\n  if (i.int[0] === '-') {\n    throw new MichelsonValidationError(i, 'natural number expected');\n  }\n}\n\nfunction assertIntLiteral(ex) {\n  if ('int' in ex) {\n    return true;\n  }\n\n  throw new MichelsonValidationError(ex, 'int literal expected');\n}\n\nfunction assertStringLiteral(ex) {\n  if ('string' in ex) {\n    return true;\n  }\n\n  throw new MichelsonValidationError(ex, 'string literal expected');\n}\n\nfunction assertArgs(ex, n) {\n  var _a;\n\n  if (n === 0 && ex.args === undefined || ((_a = ex.args) === null || _a === void 0 ? void 0 : _a.length) === n) {\n    return true;\n  }\n\n  throw new MichelsonValidationError(ex, `${n} arguments expected`);\n}\n/**\r\n * Checks if the node is a valid Michelson code (sequence of instructions).\r\n * This is a type guard function which either returns true of throws an exception.\r\n * @param ex An AST node\r\n */\n\n\nfunction assertMichelsonInstruction(ex) {\n  var _a, _b;\n\n  if (Array.isArray(ex)) {\n    for (const n of ex) {\n      if (!Array.isArray(n) && !isPrim(n)) {\n        throw new MichelsonValidationError(ex, 'sequence or prim expected');\n      }\n\n      assertMichelsonInstruction(n);\n    }\n\n    return true;\n  }\n\n  if (assertPrim(ex)) {\n    if (Object.prototype.hasOwnProperty.call(noArgInstructionIDs, ex.prim)) {\n      assertArgs(ex, 0);\n      return true;\n    }\n\n    switch (ex.prim) {\n      case 'DROP':\n      case 'PAIR':\n      case 'UNPAIR':\n      case 'DUP':\n      case 'UPDATE':\n      case 'GET':\n        if (ex.args !== undefined && assertArgs(ex, 1)) {\n          /* istanbul ignore else */\n          if (assertIntLiteral(ex.args[0])) {\n            assertNatural(ex.args[0]);\n          }\n        }\n\n        break;\n\n      case 'DIG':\n      case 'DUG':\n      case 'SAPLING_EMPTY_STATE':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 1)) {\n          /* istanbul ignore else */\n          if (assertIntLiteral(ex.args[0])) {\n            assertNatural(ex.args[0]);\n          }\n        }\n\n        break;\n\n      case 'NONE':\n      case 'LEFT':\n      case 'RIGHT':\n      case 'NIL':\n      case 'CAST':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 1)) {\n          assertMichelsonType(ex.args[0]);\n        }\n\n        break;\n\n      case 'UNPACK':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 1)) {\n          assertMichelsonPackableType(ex.args[0]);\n        }\n\n        break;\n\n      case 'CONTRACT':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 1)) {\n          assertMichelsonPassableType(ex.args[0]);\n        }\n\n        break;\n\n      case 'IF_NONE':\n      case 'IF_LEFT':\n      case 'IF_CONS':\n      case 'IF':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 2)) {\n          /* istanbul ignore else */\n          if (assertSeq(ex.args[0])) {\n            assertMichelsonInstruction(ex.args[0]);\n          }\n          /* istanbul ignore else */\n\n\n          if (assertSeq(ex.args[1])) {\n            assertMichelsonInstruction(ex.args[1]);\n          }\n        }\n\n        break;\n\n      case 'MAP':\n      case 'ITER':\n      case 'LOOP':\n      case 'LOOP_LEFT':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 1)) {\n          assertMichelsonInstruction(ex.args[0]);\n        }\n\n        break;\n\n      case 'CREATE_CONTRACT':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 1)) {\n          assertMichelsonContract(ex.args[0]);\n        }\n\n        break;\n\n      case 'DIP':\n        if (((_a = ex.args) === null || _a === void 0 ? void 0 : _a.length) === 2) {\n          /* istanbul ignore else */\n          if (assertIntLiteral(ex.args[0])) {\n            assertNatural(ex.args[0]);\n          }\n          /* istanbul ignore else */\n\n\n          if (assertSeq(ex.args[1])) {\n            assertMichelsonInstruction(ex.args[1]);\n          }\n        } else if (((_b = ex.args) === null || _b === void 0 ? void 0 : _b.length) === 1) {\n          /* istanbul ignore else */\n          if (assertSeq(ex.args[0])) {\n            assertMichelsonInstruction(ex.args[0]);\n          }\n        } else {\n          throw new MichelsonValidationError(ex, '1 or 2 arguments expected');\n        }\n\n        break;\n\n      case 'PUSH':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 2)) {\n          assertMichelsonPushableType(ex.args[0]);\n          assertMichelsonData(ex.args[1]);\n        }\n\n        break;\n\n      case 'EMPTY_SET':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 1)) {\n          assertMichelsonComparableType(ex.args[0]);\n        }\n\n        break;\n\n      case 'EMPTY_MAP':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 2)) {\n          assertMichelsonComparableType(ex.args[0]);\n          assertMichelsonType(ex.args[1]);\n        }\n\n        break;\n\n      case 'EMPTY_BIG_MAP':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 2)) {\n          assertMichelsonComparableType(ex.args[0]);\n          assertMichelsonBigMapStorableType(ex.args[1]);\n        }\n\n        break;\n\n      case 'LAMBDA':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 3)) {\n          assertMichelsonType(ex.args[0]);\n          assertMichelsonType(ex.args[1]);\n          /* istanbul ignore else */\n\n          if (assertSeq(ex.args[2])) {\n            assertMichelsonInstruction(ex.args[2]);\n          }\n        }\n\n        break;\n\n      case 'VIEW':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 2)) {\n          if (assertStringLiteral(ex.args[0])) {\n            assertViewNameValid(ex.args[0]);\n          }\n\n          if (assertMichelsonType(ex.args[1])) {\n            assertMichelsonPushableType(ex.args[1]);\n          }\n        }\n\n        break;\n\n      default:\n        throw new MichelsonValidationError(ex, 'instruction expected');\n    }\n  }\n\n  return true;\n}\n\nfunction assertMichelsonComparableType(ex) {\n  /* istanbul ignore else */\n  if (assertPrimOrSeq(ex)) {\n    if (Array.isArray(ex) || ex.prim === 'pair' || ex.prim === 'or' || ex.prim === 'option') {\n      traverseType(ex, ex => assertMichelsonComparableType(ex));\n    } else if (!Object.prototype.hasOwnProperty.call(simpleComparableTypeIDs, ex.prim)) {\n      throw new MichelsonValidationError(ex, `${ex.prim}: type is not comparable`);\n    }\n  }\n\n  return true;\n}\n\nfunction assertMichelsonPackableType(ex) {\n  /* istanbul ignore else */\n  if (assertPrimOrSeq(ex)) {\n    if (isPrim(ex)) {\n      if (!Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) || ex.prim === 'big_map' || ex.prim === 'operation' || ex.prim === 'sapling_state' || ex.prim === 'ticket') {\n        throw new MichelsonValidationError(ex, `${ex.prim}: type can't be used inside PACK/UNPACK instructions`);\n      }\n\n      traverseType(ex, ex => assertMichelsonPackableType(ex));\n    }\n  }\n\n  return true;\n}\n\nfunction assertMichelsonPushableType(ex) {\n  /* istanbul ignore else */\n  if (assertPrimOrSeq(ex)) {\n    if (isPrim(ex)) {\n      if (!Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) || ex.prim === 'big_map' || ex.prim === 'operation' || ex.prim === 'sapling_state' || ex.prim === 'ticket' || ex.prim === 'contract') {\n        throw new MichelsonValidationError(ex, `${ex.prim}: type can't be pushed`);\n      }\n\n      traverseType(ex, ex => assertMichelsonPushableType(ex));\n    }\n  }\n\n  return true;\n}\n\nfunction assertMichelsonStorableType(ex) {\n  /* istanbul ignore else */\n  if (assertPrimOrSeq(ex)) {\n    if (isPrim(ex)) {\n      if (!Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) || ex.prim === 'operation' || ex.prim === 'contract') {\n        throw new MichelsonValidationError(ex, `${ex.prim}: type can't be used as part of a storage`);\n      }\n\n      traverseType(ex, ex => assertMichelsonStorableType(ex));\n    }\n  }\n\n  return true;\n}\n\nfunction assertMichelsonPassableType(ex) {\n  /* istanbul ignore else */\n  if (assertPrimOrSeq(ex)) {\n    if (isPrim(ex)) {\n      if (!Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) || ex.prim === 'operation') {\n        throw new MichelsonValidationError(ex, `${ex.prim}: type can't be used as part of a parameter`);\n      }\n\n      traverseType(ex, ex => assertMichelsonPassableType(ex));\n    }\n  }\n\n  return true;\n}\n\nfunction assertMichelsonBigMapStorableType(ex) {\n  /* istanbul ignore else */\n  if (assertPrimOrSeq(ex)) {\n    if (isPrim(ex)) {\n      if (!Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) || ex.prim === 'big_map' || ex.prim === 'operation' || ex.prim === 'sapling_state') {\n        throw new MichelsonValidationError(ex, `${ex.prim}: type can't be used inside a big_map`);\n      }\n\n      traverseType(ex, ex => assertMichelsonBigMapStorableType(ex));\n    }\n  }\n\n  return true;\n}\n\nconst viewRe = new RegExp('^[a-zA-Z0-9_.%@]*$');\n\nfunction assertViewNameValid(name) {\n  if (name.string.length > maxViewNameLength) {\n    throw new MichelsonValidationError(name, `view name too long: ${name.string}`);\n  }\n\n  if (!viewRe.test(name.string)) {\n    throw new MichelsonValidationError(name, `invalid character(s) in view name: ${name.string}`);\n  }\n}\n/**\r\n * Checks if the node is a valid Michelson type expression.\r\n * This is a type guard function which either returns true of throws an exception.\r\n * @param ex An AST node\r\n */\n\n\nfunction assertMichelsonType(ex) {\n  /* istanbul ignore else */\n  if (assertPrimOrSeq(ex)) {\n    if (isPrim(ex)) {\n      if (!Object.prototype.hasOwnProperty.call(typeIDs, ex.prim)) {\n        throw new MichelsonValidationError(ex, 'type expected');\n      }\n\n      traverseType(ex, ex => assertMichelsonType(ex));\n    }\n  }\n\n  return true;\n}\n\nfunction traverseType(ex, cb) {\n  if (Array.isArray(ex) || ex.prim === 'pair') {\n    const args = Array.isArray(ex) ? ex : ex.args;\n\n    if (args === undefined || args.length < 2) {\n      throw new MichelsonValidationError(ex, 'at least 2 arguments expected');\n    }\n\n    args.forEach(a => {\n      if (assertPrimOrSeq(a)) {\n        cb(a);\n      }\n    });\n    return true;\n  }\n\n  switch (ex.prim) {\n    case 'option':\n    case 'list':\n      /* istanbul ignore else */\n      if (assertArgs(ex, 1) && assertPrimOrSeq(ex.args[0])) {\n        cb(ex.args[0]);\n      }\n\n      break;\n\n    case 'contract':\n      /* istanbul ignore else */\n      if (assertArgs(ex, 1)) {\n        assertMichelsonPassableType(ex.args[0]);\n      }\n\n      break;\n\n    case 'or':\n      /* istanbul ignore else */\n      if (assertArgs(ex, 2) && assertPrimOrSeq(ex.args[0]) && assertPrimOrSeq(ex.args[1])) {\n        cb(ex.args[0]);\n        cb(ex.args[1]);\n      }\n\n      break;\n\n    case 'lambda':\n      /* istanbul ignore else */\n      if (assertArgs(ex, 2)) {\n        assertMichelsonType(ex.args[0]);\n        assertMichelsonType(ex.args[1]);\n      }\n\n      break;\n\n    case 'set':\n      /* istanbul ignore else */\n      if (assertArgs(ex, 1)) {\n        assertMichelsonComparableType(ex.args[0]);\n      }\n\n      break;\n\n    case 'map':\n      /* istanbul ignore else */\n      if (assertArgs(ex, 2) && assertPrimOrSeq(ex.args[0]) && assertPrimOrSeq(ex.args[1])) {\n        assertMichelsonComparableType(ex.args[0]);\n        cb(ex.args[1]);\n      }\n\n      break;\n\n    case 'big_map':\n      /* istanbul ignore else */\n      if (assertArgs(ex, 2) && assertPrimOrSeq(ex.args[0]) && assertPrimOrSeq(ex.args[1])) {\n        assertMichelsonComparableType(ex.args[0]);\n        assertMichelsonBigMapStorableType(ex.args[1]);\n        cb(ex.args[1]);\n      }\n\n      break;\n\n    case 'ticket':\n      /* istanbul ignore else */\n      if (assertArgs(ex, 1) && assertPrimOrSeq(ex.args[0])) {\n        assertMichelsonComparableType(ex.args[0]);\n      }\n\n      break;\n\n    case 'sapling_state':\n    case 'sapling_transaction':\n      if (assertArgs(ex, 1)) {\n        assertIntLiteral(ex.args[0]);\n      }\n\n      break;\n\n    default:\n      assertArgs(ex, 0);\n  }\n\n  return true;\n}\n/**\r\n * Checks if the node is a valid Michelson data literal such as `(Pair {Elt \"0\" 0} 0)`.\r\n * This is a type guard function which either returns true of throws an exception.\r\n * @param ex An AST node\r\n */\n\n\nfunction assertMichelsonData(ex) {\n  if ('int' in ex || 'string' in ex || 'bytes' in ex) {\n    return true;\n  }\n\n  if (Array.isArray(ex)) {\n    let mapElts = 0;\n\n    for (const n of ex) {\n      if (isPrim(n) && n.prim === 'Elt') {\n        /* istanbul ignore else */\n        if (assertArgs(n, 2)) {\n          assertMichelsonData(n.args[0]);\n          assertMichelsonData(n.args[1]);\n        }\n\n        mapElts++;\n      } else {\n        assertMichelsonData(n);\n      }\n    }\n\n    if (mapElts !== 0 && mapElts !== ex.length) {\n      throw new MichelsonValidationError(ex, \"data entries and map elements can't be intermixed\");\n    }\n\n    return true;\n  }\n\n  if (isPrim(ex)) {\n    switch (ex.prim) {\n      case 'Unit':\n      case 'True':\n      case 'False':\n      case 'None':\n        assertArgs(ex, 0);\n        break;\n\n      case 'Pair':\n        /* istanbul ignore else */\n        if (ex.args === undefined || ex.args.length < 2) {\n          throw new MichelsonValidationError(ex, 'at least 2 arguments expected');\n        }\n\n        for (const a of ex.args) {\n          assertMichelsonData(a);\n        }\n\n        break;\n\n      case 'Left':\n      case 'Right':\n      case 'Some':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 1)) {\n          assertMichelsonData(ex.args[0]);\n        }\n\n        break;\n\n      default:\n        if (Object.prototype.hasOwnProperty.call(instructionIDs, ex.prim)) {\n          assertMichelsonInstruction(ex);\n        } else {\n          throw new MichelsonValidationError(ex, 'data entry or instruction expected');\n        }\n\n    }\n  } else {\n    throw new MichelsonValidationError(ex, 'data entry expected');\n  }\n\n  return true;\n}\n/**\r\n * Checks if the node is a valid Michelson smart contract source containing all required and valid properties such as `parameter`, `storage` and `code`.\r\n * This is a type guard function which either returns true of throws an exception.\r\n * @param ex An AST node\r\n */\n\n\nfunction assertMichelsonContract(ex) {\n  /* istanbul ignore else */\n  if (assertSeq(ex)) {\n    const toplevelSec = {};\n    const views = {};\n\n    for (const sec of ex) {\n      if (assertPrim(sec)) {\n        if (sec.prim !== 'view') {\n          if (sec.prim in toplevelSec) {\n            throw new MichelsonValidationError(ex, `duplicate contract section: ${sec.prim}`);\n          }\n\n          toplevelSec[sec.prim] = true;\n        }\n        /* istanbul ignore else */\n\n\n        switch (sec.prim) {\n          case 'code':\n            if (assertArgs(sec, 1)) {\n              /* istanbul ignore else */\n              if (assertSeq(sec.args[0])) {\n                assertMichelsonInstruction(sec.args[0]);\n              }\n            }\n\n            break;\n\n          case 'parameter':\n            if (assertArgs(sec, 1)) {\n              assertMichelsonPassableType(sec.args[0]);\n            }\n\n            break;\n\n          case 'storage':\n            if (assertArgs(sec, 1)) {\n              assertMichelsonStorableType(sec.args[0]);\n            }\n\n            break;\n\n          case 'view':\n            if (assertArgs(sec, 4)) {\n              if (assertStringLiteral(sec.args[0])) {\n                const name = sec.args[0];\n\n                if (name.string in views) {\n                  throw new MichelsonValidationError(ex, `duplicate view name: ${name.string}`);\n                }\n\n                views[name.string] = true;\n                assertViewNameValid(name);\n              }\n\n              assertMichelsonPushableType(sec.args[1]);\n              assertMichelsonPushableType(sec.args[2]);\n\n              if (assertSeq(sec.args[3])) {\n                assertMichelsonInstruction(sec.args[3]);\n              }\n            }\n\n            break;\n\n          default:\n            throw new MichelsonValidationError(ex, `unexpected contract section: ${sec.prim}`);\n        }\n      }\n    }\n  }\n\n  return true;\n}\n/**\r\n * Checks if the node is a valid Michelson smart contract source containing all required and valid properties such as `parameter`, `storage` and `code`.\r\n * @param ex An AST node\r\n */\n\n\nfunction isMichelsonScript(ex) {\n  try {\n    assertMichelsonContract(ex);\n    return true;\n  } catch (_a) {\n    return false;\n  }\n}\n/**\r\n * Checks if the node is a valid Michelson data literal such as `(Pair {Elt \"0\" 0} 0)`.\r\n * @param ex An AST node\r\n */\n\n\nfunction isMichelsonData(ex) {\n  try {\n    assertMichelsonData(ex);\n    return true;\n  } catch (_a) {\n    return false;\n  }\n}\n/**\r\n * Checks if the node is a valid Michelson code (sequence of instructions).\r\n * @param ex An AST node\r\n */\n\n\nfunction isMichelsonCode(ex) {\n  try {\n    assertMichelsonInstruction(ex);\n    return true;\n  } catch (_a) {\n    return false;\n  }\n}\n/**\r\n * Checks if the node is a valid Michelson type expression.\r\n * @param ex An AST node\r\n */\n\n\nfunction isMichelsonType(ex) {\n  try {\n    assertMichelsonType(ex);\n    return true;\n  } catch (_a) {\n    return false;\n  }\n}\n\nfunction isInstruction(p) {\n  return Object.prototype.hasOwnProperty.call(instructionIDs, p.prim);\n}\n\nfunction assertDataListIfAny(d) {\n  if (!Array.isArray(d)) {\n    return false;\n  }\n\n  for (const v of d) {\n    if ('prim' in v) {\n      if (isInstruction(v)) {\n        throw new MichelsonError(d, `Instruction outside of a lambda: ${JSON.stringify(d)}`);\n      } else if (v.prim === 'Elt') {\n        throw new MichelsonError(d, `Elt item outside of a map literal: ${JSON.stringify(d)}`);\n      }\n    }\n  }\n\n  return true;\n}\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nconst primitives = ['parameter', 'storage', 'code', 'False', 'Elt', 'Left', 'None', 'Pair', 'Right', 'Some', 'True', 'Unit', 'PACK', 'UNPACK', 'BLAKE2B', 'SHA256', 'SHA512', 'ABS', 'ADD', 'AMOUNT', 'AND', 'BALANCE', 'CAR', 'CDR', 'CHECK_SIGNATURE', 'COMPARE', 'CONCAT', 'CONS', 'CREATE_ACCOUNT', 'CREATE_CONTRACT', 'IMPLICIT_ACCOUNT', 'DIP', 'DROP', 'DUP', 'EDIV', 'EMPTY_MAP', 'EMPTY_SET', 'EQ', 'EXEC', 'FAILWITH', 'GE', 'GET', 'GT', 'HASH_KEY', 'IF', 'IF_CONS', 'IF_LEFT', 'IF_NONE', 'INT', 'LAMBDA', 'LE', 'LEFT', 'LOOP', 'LSL', 'LSR', 'LT', 'MAP', 'MEM', 'MUL', 'NEG', 'NEQ', 'NIL', 'NONE', 'NOT', 'NOW', 'OR', 'PAIR', 'PUSH', 'RIGHT', 'SIZE', 'SOME', 'SOURCE', 'SENDER', 'SELF', 'STEPS_TO_QUOTA', 'SUB', 'SWAP', 'TRANSFER_TOKENS', 'SET_DELEGATE', 'UNIT', 'UPDATE', 'XOR', 'ITER', 'LOOP_LEFT', 'ADDRESS', 'CONTRACT', 'ISNAT', 'CAST', 'RENAME', 'bool', 'contract', 'int', 'key', 'key_hash', 'lambda', 'list', 'map', 'big_map', 'nat', 'option', 'or', 'pair', 'set', 'signature', 'string', 'bytes', 'mutez', 'timestamp', 'unit', 'operation', 'address', 'SLICE', 'DIG', 'DUG', 'EMPTY_BIG_MAP', 'APPLY', 'chain_id', 'CHAIN_ID', 'LEVEL', 'SELF_ADDRESS', 'never', 'NEVER', 'UNPAIR', 'VOTING_POWER', 'TOTAL_VOTING_POWER', 'KECCAK', 'SHA3', 'PAIRING_CHECK', 'bls12_381_g1', 'bls12_381_g2', 'bls12_381_fr', 'sapling_state', 'sapling_transaction', 'SAPLING_EMPTY_STATE', 'SAPLING_VERIFY_UPDATE', 'ticket', 'TICKET', 'READ_TICKET', 'SPLIT_TICKET', 'JOIN_TICKETS', 'GET_AND_UPDATE', 'chest', 'chest_key', 'OPEN_CHEST', 'VIEW', 'view', 'constant', 'SUB_MUTEZ'];\nconst primTags = Object.assign({}, ...primitives.map((v, i) => ({\n  [v]: i\n})));\nvar Tag;\n\n(function (Tag) {\n  Tag[Tag[\"Int\"] = 0] = \"Int\";\n  Tag[Tag[\"String\"] = 1] = \"String\";\n  Tag[Tag[\"Sequence\"] = 2] = \"Sequence\";\n  Tag[Tag[\"Prim0\"] = 3] = \"Prim0\";\n  Tag[Tag[\"Prim0Annot\"] = 4] = \"Prim0Annot\";\n  Tag[Tag[\"Prim1\"] = 5] = \"Prim1\";\n  Tag[Tag[\"Prim1Annot\"] = 6] = \"Prim1Annot\";\n  Tag[Tag[\"Prim2\"] = 7] = \"Prim2\";\n  Tag[Tag[\"Prim2Annot\"] = 8] = \"Prim2Annot\";\n  Tag[Tag[\"Prim\"] = 9] = \"Prim\";\n  Tag[Tag[\"Bytes\"] = 10] = \"Bytes\";\n})(Tag || (Tag = {}));\n\nclass Writer {\n  constructor() {\n    this.buffer = [];\n  }\n\n  get length() {\n    return this.buffer.length;\n  }\n\n  writeBytes(val) {\n    this.buffer.push(...val.map(v => v & 0xff));\n  }\n\n  writeUint8(val) {\n    const v = val | 0;\n    this.buffer.push(v & 0xff);\n  }\n\n  writeUint16(val) {\n    const v = val | 0;\n    this.buffer.push(v >> 8 & 0xff);\n    this.buffer.push(v & 0xff);\n  }\n\n  writeUint32(val) {\n    const v = val | 0;\n    this.buffer.push(v >> 24 & 0xff);\n    this.buffer.push(v >> 16 & 0xff);\n    this.buffer.push(v >> 8 & 0xff);\n    this.buffer.push(v & 0xff);\n  }\n\n  writeInt8(val) {\n    this.writeUint8(val);\n  }\n\n  writeInt16(val) {\n    this.writeUint16(val);\n  }\n\n  writeInt32(val) {\n    this.writeUint32(val);\n  }\n\n}\n\nconst boundsErr = new Error('bounds out of range');\n\nclass Reader {\n  constructor(buffer, idx = 0, cap = buffer.length) {\n    this.buffer = buffer;\n    this.idx = idx;\n    this.cap = cap;\n  }\n  /** Remaining length */\n\n\n  get length() {\n    return this.cap - this.idx;\n  }\n\n  readBytes(len) {\n    if (this.cap - this.idx < len) {\n      throw boundsErr;\n    }\n\n    const ret = this.buffer.slice(this.idx, this.idx + len);\n    this.idx += len;\n    return ret;\n  }\n\n  reader(len) {\n    if (this.cap - this.idx < len) {\n      throw boundsErr;\n    }\n\n    const ret = new Reader(this.buffer, this.idx, this.idx + len);\n    this.idx += len;\n    return ret;\n  }\n\n  copy() {\n    return new Reader(this.buffer, this.idx, this.cap);\n  }\n\n  readUint8() {\n    if (this.cap - this.idx < 1) {\n      throw boundsErr;\n    }\n\n    return this.buffer[this.idx++] >>> 0;\n  }\n\n  readUint16() {\n    if (this.cap - this.idx < 2) {\n      throw boundsErr;\n    }\n\n    const x0 = this.buffer[this.idx++];\n    const x1 = this.buffer[this.idx++];\n    return (x0 << 8 | x1) >>> 0;\n  }\n\n  readUint32() {\n    if (this.cap - this.idx < 4) {\n      throw boundsErr;\n    }\n\n    const x0 = this.buffer[this.idx++];\n    const x1 = this.buffer[this.idx++];\n    const x2 = this.buffer[this.idx++];\n    const x3 = this.buffer[this.idx++];\n    return (x0 << 24 | x1 << 16 | x2 << 8 | x3) >>> 0;\n  }\n\n  readInt8() {\n    if (this.cap - this.idx < 1) {\n      throw boundsErr;\n    }\n\n    const x = this.buffer[this.idx++];\n    return x << 24 >> 24;\n  }\n\n  readInt16() {\n    if (this.cap - this.idx < 2) {\n      throw boundsErr;\n    }\n\n    const x0 = this.buffer[this.idx++];\n    const x1 = this.buffer[this.idx++];\n    return (x0 << 8 | x1) << 16 >> 16;\n  }\n\n  readInt32() {\n    if (this.cap - this.idx < 4) {\n      throw boundsErr;\n    }\n\n    const x0 = this.buffer[this.idx++];\n    const x1 = this.buffer[this.idx++];\n    const x2 = this.buffer[this.idx++];\n    const x3 = this.buffer[this.idx++];\n    return x0 << 24 | x1 << 16 | x2 << 8 | x3;\n  }\n\n}\n\nvar ContractID;\n\n(function (ContractID) {\n  ContractID[ContractID[\"Implicit\"] = 0] = \"Implicit\";\n  ContractID[ContractID[\"Originated\"] = 1] = \"Originated\";\n})(ContractID || (ContractID = {}));\n\nvar PublicKeyHashID;\n\n(function (PublicKeyHashID) {\n  PublicKeyHashID[PublicKeyHashID[\"ED25519\"] = 0] = \"ED25519\";\n  PublicKeyHashID[PublicKeyHashID[\"SECP256K1\"] = 1] = \"SECP256K1\";\n  PublicKeyHashID[PublicKeyHashID[\"P256\"] = 2] = \"P256\";\n})(PublicKeyHashID || (PublicKeyHashID = {}));\n\nfunction readPublicKeyHash(rd) {\n  let type;\n  const tag = rd.readUint8();\n\n  switch (tag) {\n    case PublicKeyHashID.ED25519:\n      type = 'ED25519PublicKeyHash';\n      break;\n\n    case PublicKeyHashID.SECP256K1:\n      type = 'SECP256K1PublicKeyHash';\n      break;\n\n    case PublicKeyHashID.P256:\n      type = 'P256PublicKeyHash';\n      break;\n\n    default:\n      throw new Error(`unknown public key hash tag: ${tag}`);\n  }\n\n  return {\n    type,\n    hash: rd.readBytes(20)\n  };\n}\n\nfunction readAddress(rd) {\n  let address;\n  const tag = rd.readUint8();\n\n  switch (tag) {\n    case ContractID.Implicit:\n      address = readPublicKeyHash(rd);\n      break;\n\n    case ContractID.Originated:\n      address = {\n        type: 'ContractHash',\n        hash: rd.readBytes(20)\n      };\n      rd.readBytes(1);\n      break;\n\n    default:\n      throw new Error(`unknown address tag: ${tag}`);\n  }\n\n  if (rd.length !== 0) {\n    // entry point\n    const dec = new TextDecoder();\n    address.entryPoint = dec.decode(new Uint8Array(rd.readBytes(rd.length)));\n  }\n\n  return address;\n}\n\nfunction writePublicKeyHash(a, w) {\n  let tag;\n\n  switch (a.type) {\n    case 'ED25519PublicKeyHash':\n      tag = PublicKeyHashID.ED25519;\n      break;\n\n    case 'SECP256K1PublicKeyHash':\n      tag = PublicKeyHashID.SECP256K1;\n      break;\n\n    case 'P256PublicKeyHash':\n      tag = PublicKeyHashID.P256;\n      break;\n\n    default:\n      throw new Error(`unexpected address type: ${a.type}`);\n  }\n\n  w.writeUint8(tag);\n  w.writeBytes(Array.from(a.hash));\n}\n\nfunction writeAddress(a, w) {\n  if (a.type === 'ContractHash') {\n    w.writeUint8(ContractID.Originated);\n    w.writeBytes(Array.from(a.hash));\n    w.writeUint8(0);\n  } else {\n    w.writeUint8(ContractID.Implicit);\n    writePublicKeyHash(a, w);\n  }\n\n  if (a.entryPoint !== undefined && a.entryPoint !== '' && a.entryPoint !== 'default') {\n    const enc = new TextEncoder();\n    const bytes = enc.encode(a.entryPoint);\n    w.writeBytes(Array.from(bytes));\n  }\n}\n\nvar PublicKeyID;\n\n(function (PublicKeyID) {\n  PublicKeyID[PublicKeyID[\"ED25519\"] = 0] = \"ED25519\";\n  PublicKeyID[PublicKeyID[\"SECP256K1\"] = 1] = \"SECP256K1\";\n  PublicKeyID[PublicKeyID[\"P256\"] = 2] = \"P256\";\n})(PublicKeyID || (PublicKeyID = {}));\n\nfunction readPublicKey(rd) {\n  let ln;\n  let type;\n  const tag = rd.readUint8();\n\n  switch (tag) {\n    case PublicKeyID.ED25519:\n      type = 'ED25519PublicKey';\n      ln = 32;\n      break;\n\n    case PublicKeyID.SECP256K1:\n      type = 'SECP256K1PublicKey';\n      ln = 33;\n      break;\n\n    case PublicKeyID.P256:\n      type = 'P256PublicKey';\n      ln = 33;\n      break;\n\n    default:\n      throw new Error(`unknown public key tag: ${tag}`);\n  }\n\n  return {\n    type,\n    publicKey: rd.readBytes(ln)\n  };\n}\n\nfunction writePublicKey(pk, w) {\n  let tag;\n\n  switch (pk.type) {\n    case 'ED25519PublicKey':\n      tag = PublicKeyID.ED25519;\n      break;\n\n    case 'SECP256K1PublicKey':\n      tag = PublicKeyID.SECP256K1;\n      break;\n\n    case 'P256PublicKey':\n      tag = PublicKeyID.P256;\n      break;\n\n    default:\n      throw new Error(`unexpected public key type: ${pk.type}`);\n  }\n\n  w.writeUint8(tag);\n  w.writeBytes(Array.from(pk.publicKey));\n}\n\nfunction writeExpr(expr, wr, tf) {\n  var _a, _b;\n\n  const [e, args] = tf(expr);\n\n  if (Array.isArray(e)) {\n    const w = new Writer();\n\n    for (const v of e) {\n      const a = args.next();\n\n      if (a.done) {\n        throw new Error('REPORT ME: iterator is done');\n      }\n\n      writeExpr(v, w, a.value);\n    }\n\n    wr.writeUint8(Tag.Sequence);\n    wr.writeUint32(w.length);\n    wr.writeBytes(w.buffer);\n    return;\n  }\n\n  if ('string' in e) {\n    const enc = new TextEncoder();\n    const bytes = enc.encode(e.string);\n    wr.writeUint8(Tag.String);\n    wr.writeUint32(bytes.length);\n    wr.writeBytes(Array.from(bytes));\n    return;\n  }\n\n  if ('int' in e) {\n    wr.writeUint8(Tag.Int);\n    let val = BigInt(e.int);\n    const sign = val < 0;\n\n    if (sign) {\n      val = -val;\n    }\n\n    let i = 0;\n\n    do {\n      const bits = i === 0 ? BigInt(6) : BigInt(7);\n      let byte = val & (BigInt(1) << bits) - BigInt(1);\n      val >>= bits;\n\n      if (val) {\n        byte |= BigInt(0x80);\n      }\n\n      if (i === 0 && sign) {\n        byte |= BigInt(0x40);\n      }\n\n      wr.writeUint8(Number(byte));\n      i++;\n    } while (val);\n\n    return;\n  }\n\n  if ('bytes' in e) {\n    const bytes = parseHex(e.bytes);\n    wr.writeUint8(Tag.Bytes);\n    wr.writeUint32(bytes.length);\n    wr.writeBytes(bytes);\n    return;\n  }\n\n  const prim = primTags[e.prim];\n\n  if (prim === undefined) {\n    throw new TypeError(`Can't encode primary: ${e.prim}`);\n  }\n\n  const tag = (((_a = e.args) === null || _a === void 0 ? void 0 : _a.length) || 0) < 3 ? Tag.Prim0 + (((_b = e.args) === null || _b === void 0 ? void 0 : _b.length) || 0) * 2 + (e.annots === undefined || e.annots.length === 0 ? 0 : 1) : Tag.Prim;\n  wr.writeUint8(tag);\n  wr.writeUint8(prim);\n\n  if (e.args !== undefined) {\n    if (e.args.length < 3) {\n      for (const v of e.args) {\n        const a = args.next();\n\n        if (a.done) {\n          throw new Error('REPORT ME: iterator is done');\n        }\n\n        writeExpr(v, wr, a.value);\n      }\n    } else {\n      const w = new Writer();\n\n      for (const v of e.args) {\n        const a = args.next();\n\n        if (a.done) {\n          throw new Error('REPORT ME: iterator is done');\n        }\n\n        writeExpr(v, w, a.value);\n      }\n\n      wr.writeUint32(w.length);\n      wr.writeBytes(w.buffer);\n    }\n  }\n\n  if (e.annots !== undefined && e.annots.length !== 0) {\n    const enc = new TextEncoder();\n    const bytes = enc.encode(e.annots.join(' '));\n    wr.writeUint32(bytes.length);\n    wr.writeBytes(Array.from(bytes));\n  } else if (e.args !== undefined && e.args.length >= 3) {\n    wr.writeUint32(0);\n  }\n}\n\nfunction readExpr(rd, tf) {\n  function* passThrough() {\n    while (true) {\n      yield readPassThrough;\n    }\n  }\n\n  const [args, tr] = tf;\n  const tag = rd.readUint8();\n\n  switch (tag) {\n    case Tag.Int:\n      {\n        const buf = [];\n        let byte;\n\n        do {\n          byte = rd.readInt8();\n          buf.push(byte);\n        } while ((byte & 0x80) !== 0);\n\n        let val = BigInt(0);\n        let sign = false;\n\n        for (let i = buf.length - 1; i >= 0; i--) {\n          const bits = i === 0 ? BigInt(6) : BigInt(7);\n          const byte = BigInt(buf[i]);\n          val <<= bits;\n          val |= byte & (BigInt(1) << bits) - BigInt(1);\n\n          if (i === 0) {\n            sign = !!(byte & BigInt(0x40));\n          }\n        }\n\n        if (sign) {\n          val = -val;\n        }\n\n        return tr({\n          int: String(val)\n        });\n      }\n\n    case Tag.String:\n      {\n        const length = rd.readUint32();\n        const bytes = rd.readBytes(length);\n        const dec = new TextDecoder();\n        return tr({\n          string: dec.decode(new Uint8Array(bytes))\n        });\n      }\n\n    case Tag.Bytes:\n      {\n        const length = rd.readUint32();\n        const bytes = rd.readBytes(length);\n        const hex = hexBytes(Array.from(bytes));\n        return tr({\n          bytes: hex\n        });\n      }\n\n    case Tag.Sequence:\n      {\n        const length = rd.readUint32();\n        let res = [];\n        let savedrd = rd.copy(); // make two passes\n\n        let it = passThrough();\n\n        for (let n = 0; n < 2; n++) {\n          const r = savedrd.reader(length);\n          res = [];\n\n          while (r.length > 0) {\n            const a = it.next();\n\n            if (a.done) {\n              throw new Error('REPORT ME: iterator is done');\n            }\n\n            res.push(readExpr(r, a.value));\n          } // make a second pass with injected side effects\n\n\n          it = args(res);\n          savedrd = rd;\n        }\n\n        return tr(res);\n      }\n\n    default:\n      {\n        if (tag > 9) {\n          throw new Error(`Unknown tag: ${tag}`);\n        }\n\n        const p = rd.readUint8();\n\n        if (p >= primitives.length) {\n          throw new Error(`Unknown primitive tag: ${p}`);\n        }\n\n        const prim = primitives[p];\n        const argn = tag - 3 >> 1;\n        let res = {\n          prim\n        }; // make two passes\n\n        let it = passThrough();\n        let savedrd = rd.copy();\n\n        for (let n = 0; n < 2; n++) {\n          res = {\n            prim\n          };\n\n          if (argn < 3) {\n            for (let i = 0; i < argn; i++) {\n              const a = it.next();\n\n              if (a.done) {\n                throw new Error('REPORT ME: iterator is done');\n              }\n\n              res.args = res.args || [];\n              res.args.push(readExpr(savedrd, a.value));\n            }\n          } else {\n            res.args = res.args || [];\n            const length = savedrd.readUint32();\n            const r = savedrd.reader(length);\n\n            while (r.length > 0) {\n              const a = it.next();\n\n              if (a.done) {\n                throw new Error('REPORT ME: iterator is done');\n              }\n\n              res.args.push(readExpr(r, a.value));\n            }\n          } // make a second pass with injected side effects\n\n\n          it = args(res);\n          savedrd = rd;\n        }\n\n        if ((tag - 3 & 1) === 1 || argn === 3) {\n          // read annotations\n          const length = rd.readUint32();\n\n          if (length !== 0) {\n            const bytes = rd.readBytes(length);\n            const dec = new TextDecoder();\n            res.annots = dec.decode(new Uint8Array(bytes)).split(' ');\n          }\n        }\n\n        return tr(res);\n      }\n  }\n}\n\nconst isOrData = e => 'prim' in e && (e.prim === 'Left' || e.prim === 'Right');\n\nconst isOptionData = e => 'prim' in e && (e.prim === 'Some' || e.prim === 'None');\n\nconst getWriteTransformFunc = t => {\n  if (isPairType(t)) {\n    return d => {\n      if (!isPairData(d)) {\n        throw new MichelsonTypeError(t, d, `pair expected: ${JSON.stringify(d)}`);\n      }\n\n      assertDataListIfAny(d); // combs aren't used in pack format\n\n      const tc = unpackComb('pair', t);\n      const dc = unpackComb('Pair', d);\n      return [dc, function* () {\n        for (const a of tc.args) {\n          yield getWriteTransformFunc(a);\n        }\n      }()];\n    };\n  }\n\n  switch (t.prim) {\n    case 'or':\n      return d => {\n        if (!isOrData(d)) {\n          throw new MichelsonTypeError(t, d, `or expected: ${JSON.stringify(d)}`);\n        }\n\n        return [d, function* () {\n          yield getWriteTransformFunc(t.args[d.prim === 'Left' ? 0 : 1]);\n        }()];\n      };\n\n    case 'option':\n      return d => {\n        if (!isOptionData(d)) {\n          throw new MichelsonTypeError(t, d, `option expected: ${JSON.stringify(d)}`);\n        }\n\n        return [d, function* () {\n          const dd = d;\n\n          if (dd.prim === 'Some') {\n            yield getWriteTransformFunc(t.args[0]);\n          }\n        }()];\n      };\n\n    case 'list':\n    case 'set':\n      return d => {\n        if (!Array.isArray(d)) {\n          throw new MichelsonTypeError(t, d, `${t.prim} expected: ${JSON.stringify(d)}`);\n        }\n\n        return [d, function* () {\n          for (const _v of d) {\n            yield getWriteTransformFunc(t.args[0]);\n          }\n        }()];\n      };\n\n    case 'map':\n      return d => {\n        if (!Array.isArray(d)) {\n          throw new MichelsonTypeError(t, d, `map expected: ${JSON.stringify(d)}`);\n        }\n\n        return [d, function* () {\n          for (const _elt of d) {\n            yield elt => {\n              if (!('prim' in elt) || elt.prim !== 'Elt') {\n                throw new MichelsonTypeError(t, elt, `map element expected: ${JSON.stringify(elt)}`);\n              }\n\n              return [elt, function* () {\n                for (const a of t.args) {\n                  yield getWriteTransformFunc(a);\n                }\n              }()];\n            };\n          }\n        }()];\n      };\n\n    case 'chain_id':\n      return d => {\n        if (!('bytes' in d) && !('string' in d)) {\n          throw new MichelsonTypeError(t, d, `chain id expected: ${JSON.stringify(d)}`);\n        }\n\n        let bytes;\n\n        if ('string' in d) {\n          const id = checkDecodeTezosID(d.string, 'ChainID');\n\n          if (id === null) {\n            throw new MichelsonTypeError(t, d, `chain id base58 expected: ${d.string}`);\n          }\n\n          bytes = {\n            bytes: hexBytes(id[1])\n          };\n        } else {\n          bytes = d;\n        }\n\n        return [bytes, [][Symbol.iterator]()];\n      };\n\n    case 'signature':\n      return d => {\n        if (!('bytes' in d) && !('string' in d)) {\n          throw new MichelsonTypeError(t, d, `signature expected: ${JSON.stringify(d)}`);\n        }\n\n        let bytes;\n\n        if ('string' in d) {\n          const sig = checkDecodeTezosID(d.string, 'ED25519Signature', 'SECP256K1Signature', 'P256Signature', 'GenericSignature');\n\n          if (sig === null) {\n            throw new MichelsonTypeError(t, d, `signature base58 expected: ${d.string}`);\n          }\n\n          bytes = {\n            bytes: hexBytes(sig[1])\n          };\n        } else {\n          bytes = d;\n        }\n\n        return [bytes, [][Symbol.iterator]()];\n      };\n\n    case 'key_hash':\n      return d => {\n        if (!('bytes' in d) && !('string' in d)) {\n          throw new MichelsonTypeError(t, d, `key hash expected: ${JSON.stringify(d)}`);\n        }\n\n        let bytes;\n\n        if ('string' in d) {\n          const pkh = checkDecodeTezosID(d.string, 'ED25519PublicKeyHash', 'SECP256K1PublicKeyHash', 'P256PublicKeyHash');\n\n          if (pkh === null) {\n            throw new MichelsonTypeError(t, d, `key hash base58 expected: ${d.string}`);\n          }\n\n          const w = new Writer();\n          writePublicKeyHash({\n            type: pkh[0],\n            hash: pkh[1]\n          }, w);\n          bytes = {\n            bytes: hexBytes(w.buffer)\n          };\n        } else {\n          bytes = d;\n        }\n\n        return [bytes, [][Symbol.iterator]()];\n      };\n\n    case 'key':\n      return d => {\n        if (!('bytes' in d) && !('string' in d)) {\n          throw new MichelsonTypeError(t, d, `public key expected: ${JSON.stringify(d)}`);\n        }\n\n        let bytes;\n\n        if ('string' in d) {\n          const key = checkDecodeTezosID(d.string, 'ED25519PublicKey', 'SECP256K1PublicKey', 'P256PublicKey');\n\n          if (key === null) {\n            throw new MichelsonTypeError(t, d, `public key base58 expected: ${d.string}`);\n          }\n\n          const w = new Writer();\n          writePublicKey({\n            type: key[0],\n            publicKey: key[1]\n          }, w);\n          bytes = {\n            bytes: hexBytes(w.buffer)\n          };\n        } else {\n          bytes = d;\n        }\n\n        return [bytes, [][Symbol.iterator]()];\n      };\n\n    case 'address':\n      return d => {\n        if (!('bytes' in d) && !('string' in d)) {\n          throw new MichelsonTypeError(t, d, `address expected: ${JSON.stringify(d)}`);\n        }\n\n        let bytes;\n\n        if ('string' in d) {\n          const s = d.string.split('%');\n          const address = checkDecodeTezosID(s[0], 'ED25519PublicKeyHash', 'SECP256K1PublicKeyHash', 'P256PublicKeyHash', 'ContractHash');\n\n          if (address === null) {\n            throw new MichelsonTypeError(t, d, `address base58 expected: ${d.string}`);\n          }\n\n          const w = new Writer();\n          writeAddress({\n            type: address[0],\n            hash: address[1],\n            entryPoint: s.length > 1 ? s[1] : undefined\n          }, w);\n          bytes = {\n            bytes: hexBytes(w.buffer)\n          };\n        } else {\n          bytes = d;\n        }\n\n        return [bytes, [][Symbol.iterator]()];\n      };\n\n    case 'timestamp':\n      return d => {\n        if (!('string' in d) && !('int' in d)) {\n          throw new MichelsonTypeError(t, d, `timestamp expected: ${JSON.stringify(d)}`);\n        }\n\n        let int;\n\n        if ('string' in d) {\n          const p = parseDate(d);\n\n          if (p === null) {\n            throw new MichelsonTypeError(t, d, `can't parse date: ${d.string}`);\n          }\n\n          int = {\n            int: String(Math.floor(p.getTime() / 1000))\n          };\n        } else {\n          int = d;\n        }\n\n        return [int, [][Symbol.iterator]()];\n      };\n\n    default:\n      return writePassThrough;\n  }\n};\n\nconst isPushInstruction = e => 'prim' in e && e.prim === 'PUSH';\n\nconst writePassThrough = e => {\n  if (isPushInstruction(e)) {\n    assertMichelsonInstruction(e); // capture inlined type definition\n\n    return [e, function* () {\n      yield writePassThrough;\n      yield getWriteTransformFunc(e.args[0]);\n    }()];\n  }\n\n  return [e, function* () {\n    while (true) {\n      yield writePassThrough;\n    }\n  }()];\n};\n/**\r\n * Serializes any value of packable type to its optimized binary representation\r\n * identical to the one used by PACK and UNPACK Michelson instructions.\r\n * Without a type definition (not recommended) the data will be encoded as a binary form of a generic Michelson expression.\r\n * Type definition allows some types like `timestamp` and `address` and other base58 representable types to be encoded to\r\n * corresponding optimized binary forms borrowed from the Tezos protocol\r\n *\r\n * ```typescript\r\n * const data: MichelsonData = {\r\n *     string: \"KT1RvkwF4F7pz1gCoxkyZrG1RkrxQy3gmFTv%foo\"\r\n * };\r\n *\r\n * const typ: MichelsonType = {\r\n *     prim: \"address\"\r\n * };\r\n *\r\n * const packed = packData(data, typ);\r\n *\r\n * // 050a0000001901be41ee922ddd2cf33201e49d32da0afec571dce300666f6f\r\n * ```\r\n *\r\n * Without a type definition the base58 encoded address will be treated as a string\r\n * ```typescript\r\n * const data: MichelsonData = {\r\n *     string: \"KT1RvkwF4F7pz1gCoxkyZrG1RkrxQy3gmFTv%foo\"\r\n * };\r\n *\r\n * const packed = packData(data);\r\n *\r\n * // 0501000000284b543152766b7746344637707a3167436f786b795a724731526b7278517933676d46547625666f6f\r\n * ```\r\n * @param d Data object\r\n * @param t Optional type definition\r\n * @returns Binary representation as numeric array\r\n */\n\n\nfunction packData(d, t) {\n  const w = new Writer();\n  w.writeUint8(5);\n  writeExpr(d, w, t !== undefined ? getWriteTransformFunc(t) : writePassThrough);\n  return w.buffer;\n}\n/**\r\n * Serializes any value of packable type to its optimized binary representation\r\n * identical to the one used by PACK and UNPACK Michelson instructions.\r\n * Same as {@link packData} but returns a `bytes` Michelson data literal instead of an array\r\n *\r\n * ```typescript\r\n * const data: MichelsonData = {\r\n *     string: \"2019-09-26T10:59:51Z\"\r\n * };\r\n *\r\n * const typ: MichelsonType = {\r\n *     prim: \"timestamp\"\r\n * };\r\n *\r\n * const packed = packDataBytes(data, typ);\r\n *\r\n * // { bytes: \"0500a7e8e4d80b\" }\r\n * ```\r\n * @param d Data object\r\n * @param t Optional type definition\r\n * @returns Binary representation as a bytes literal\r\n */\n\n\nfunction packDataBytes(d, t) {\n  return {\n    bytes: hexBytes(packData(d, t))\n  };\n}\n\nconst getReadTransformFuncs = t => {\n  if (isPairType(t)) {\n    const args = Array.isArray(t) ? t : t.args;\n    return [d => {\n      if (!isPairData(d)) {\n        throw new MichelsonTypeError(t, d, `pair expected: ${JSON.stringify(d)}`);\n      }\n\n      return function* () {\n        for (const a of args) {\n          yield getReadTransformFuncs(a);\n        }\n      }();\n    }, d => d];\n  }\n\n  switch (t.prim) {\n    case 'or':\n      return [d => {\n        if (!isOrData(d)) {\n          throw new MichelsonTypeError(t, d, `or expected: ${JSON.stringify(d)}`);\n        }\n\n        return function* () {\n          yield getReadTransformFuncs(t.args[d.prim === 'Left' ? 0 : 1]);\n        }();\n      }, d => d];\n\n    case 'option':\n      return [d => {\n        if (!isOptionData(d)) {\n          throw new MichelsonTypeError(t, d, `option expected: ${JSON.stringify(d)}`);\n        }\n\n        return function* () {\n          if (d.prim === 'Some') {\n            yield getReadTransformFuncs(t.args[0]);\n          }\n        }();\n      }, d => d];\n\n    case 'list':\n    case 'set':\n      return [d => {\n        if (!Array.isArray(d)) {\n          throw new MichelsonTypeError(t, d, `${t.prim} expected: ${JSON.stringify(d)}`);\n        }\n\n        return function* () {\n          while (true) {\n            yield getReadTransformFuncs(t.args[0]);\n          }\n        }();\n      }, d => d];\n\n    case 'map':\n      return [d => {\n        if (!Array.isArray(d)) {\n          throw new MichelsonTypeError(t, d, `map expected: ${JSON.stringify(d)}`);\n        }\n\n        return function* () {\n          while (true) {\n            yield [elt => {\n              if (!('prim' in elt) || elt.prim !== 'Elt') {\n                throw new MichelsonTypeError(t, elt, `map element expected: ${JSON.stringify(elt)}`);\n              }\n\n              return function* () {\n                for (const a of t.args) {\n                  yield getReadTransformFuncs(a);\n                }\n              }();\n            }, elt => elt];\n          }\n        }();\n      }, d => d];\n\n    case 'chain_id':\n      return [() => [][Symbol.iterator](), d => {\n        if (!('bytes' in d) && !('string' in d)) {\n          throw new MichelsonTypeError(t, d, `chain id expected: ${JSON.stringify(d)}`);\n        }\n\n        if ('string' in d) {\n          return d;\n        }\n\n        const bytes = parseBytes(d.bytes);\n\n        if (bytes === null) {\n          throw new MichelsonTypeError(t, d, `can't parse bytes: ${d.bytes}`);\n        }\n\n        return {\n          string: encodeTezosID('ChainID', bytes)\n        };\n      }];\n\n    case 'signature':\n      return [() => [][Symbol.iterator](), d => {\n        if (!('bytes' in d) && !('string' in d)) {\n          throw new MichelsonTypeError(t, d, `signature expected: ${JSON.stringify(d)}`);\n        }\n\n        if ('string' in d) {\n          return d;\n        }\n\n        const bytes = parseBytes(d.bytes);\n\n        if (bytes === null) {\n          throw new MichelsonTypeError(t, d, `can't parse bytes: ${d.bytes}`);\n        }\n\n        return {\n          string: encodeTezosID('GenericSignature', bytes)\n        };\n      }];\n\n    case 'key_hash':\n      return [() => [][Symbol.iterator](), d => {\n        if (!('bytes' in d) && !('string' in d)) {\n          throw new MichelsonTypeError(t, d, `key hash expected: ${JSON.stringify(d)}`);\n        }\n\n        if ('string' in d) {\n          return d;\n        }\n\n        const bytes = parseBytes(d.bytes);\n\n        if (bytes === null) {\n          throw new MichelsonTypeError(t, d, `can't parse bytes: ${d.bytes}`);\n        }\n\n        const rd = new Reader(new Uint8Array(bytes));\n        const addr = readPublicKeyHash(rd);\n        return {\n          string: encodeTezosID(addr.type, addr.hash) + (addr.entryPoint ? '%' + addr.entryPoint : '')\n        };\n      }];\n\n    case 'key':\n      return [() => [][Symbol.iterator](), d => {\n        if (!('bytes' in d) && !('string' in d)) {\n          throw new MichelsonTypeError(t, d, `public key expected: ${JSON.stringify(d)}`);\n        }\n\n        if ('string' in d) {\n          return d;\n        }\n\n        const bytes = parseBytes(d.bytes);\n\n        if (bytes === null) {\n          throw new MichelsonTypeError(t, d, `can't parse bytes: ${d.bytes}`);\n        }\n\n        const rd = new Reader(new Uint8Array(bytes));\n        const pk = readPublicKey(rd);\n        return {\n          string: encodeTezosID(pk.type, pk.publicKey)\n        };\n      }];\n\n    case 'address':\n      return [() => [][Symbol.iterator](), d => {\n        if (!('bytes' in d) && !('string' in d)) {\n          throw new MichelsonTypeError(t, d, `address expected: ${JSON.stringify(d)}`);\n        }\n\n        if ('string' in d) {\n          return d;\n        }\n\n        const bytes = parseBytes(d.bytes);\n\n        if (bytes === null) {\n          throw new MichelsonTypeError(t, d, `can't parse bytes: ${d.bytes}`);\n        }\n\n        const rd = new Reader(new Uint8Array(bytes));\n        const addr = readAddress(rd);\n        return {\n          string: encodeTezosID(addr.type, addr.hash) + (addr.entryPoint ? '%' + addr.entryPoint : '')\n        };\n      }];\n\n    case 'timestamp':\n      return [() => [][Symbol.iterator](), d => {\n        if (!('int' in d) && !('string' in d)) {\n          throw new MichelsonTypeError(t, d, `address expected: ${JSON.stringify(d)}`);\n        }\n\n        if ('string' in d) {\n          return d;\n        }\n\n        const date = new Date(parseInt(d.int, 10) * 1000);\n        return {\n          string: date.toISOString().slice(0, 19) + 'Z'\n        };\n      }];\n\n    default:\n      return readPassThrough;\n  }\n};\n\nconst readPassThrough = [e => {\n  if (isPushInstruction(e)) {\n    assertMichelsonInstruction(e); // capture inlined type definition\n\n    return function* () {\n      yield readPassThrough;\n      yield getReadTransformFuncs(e.args[0]);\n    }();\n  }\n\n  return function* () {\n    while (true) {\n      yield readPassThrough;\n    }\n  }();\n}, e => e];\n/**\r\n * Deserialize a byte array into the corresponding Michelson value.\r\n * Without a type definition (not recommended) the binary data will be treated as a binary form of a generic Michelson expression and returned as is.\r\n * Type definition allows some types like `timestamp` and `address` and other types usually encoded in optimized binary forms to be transformed\r\n * back to their string representations like base58 and ISO timestamps.\r\n *\r\n * ```typescript\r\n * const src = [0x05, 0x00, 0xa7, 0xe8, 0xe4, 0xd8, 0x0b];\r\n *\r\n * const typ: MichelsonType = {\r\n *     prim: \"timestamp\"\r\n * };\r\n *\r\n * const data = unpackData(src, typ);\r\n *\r\n * // { string: \"2019-09-26T10:59:51Z\" }\r\n * ```\r\n *\r\n * Same binary data without a type definition\r\n * ```typescript\r\n * const src = [0x05, 0x00, 0xa7, 0xe8, 0xe4, 0xd8, 0x0b];\r\n *\r\n * const data = unpackData(src);\r\n *\r\n * // { int: \"1569495591\" }\r\n * ```\r\n * @param src Byte array\r\n * @param t Optional type definition\r\n * @returns Deserialized data\r\n */\n\nfunction unpackData(src, t) {\n  const r = new Reader(src);\n\n  if (r.readUint8() !== 5) {\n    throw new Error('incorrect packed data magic number');\n  }\n\n  const ex = readExpr(r, t !== undefined ? getReadTransformFuncs(t) : readPassThrough);\n\n  if (assertMichelsonData(ex)) {\n    return ex;\n  }\n\n  throw new Error(); // never\n}\n/**\r\n * Deserialize a byte array into the corresponding Michelson value.\r\n * Same as {@link unpackData} but takes a `bytes` Michelson data literal instead of an array\r\n *\r\n * ```typescript\r\n * const src = { bytes: \"0500a7e8e4d80b\" };\r\n *\r\n * const typ: MichelsonType = {\r\n *     prim: \"timestamp\"\r\n * };\r\n *\r\n * const data = unpackDataBytes(src, typ);\r\n *\r\n * // { string: \"2019-09-26T10:59:51Z\" }\r\n * ```\r\n * @param src Bytes object\r\n * @param t Optional type definition\r\n * @returns Deserialized data\r\n */\n\n\nfunction unpackDataBytes(src, t) {\n  const bytes = parseBytes(src.bytes);\n\n  if (bytes === null) {\n    throw new Error(`can't parse bytes: \"${src.bytes}\"`);\n  }\n\n  return unpackData(bytes, t);\n} // helper functions also used by validator\n\n\nfunction decodeAddressBytes(b) {\n  const bytes = parseBytes(b.bytes);\n\n  if (bytes === null) {\n    throw new Error(`can't parse bytes: \"${b.bytes}\"`);\n  }\n\n  const rd = new Reader(new Uint8Array(bytes));\n  return readAddress(rd);\n}\n\nfunction decodePublicKeyHashBytes(b) {\n  const bytes = parseBytes(b.bytes);\n\n  if (bytes === null) {\n    throw new Error(`can't parse bytes: \"${b.bytes}\"`);\n  }\n\n  const rd = new Reader(new Uint8Array(bytes));\n  return readPublicKeyHash(rd);\n}\n\nfunction decodePublicKeyBytes(b) {\n  const bytes = parseBytes(b.bytes);\n\n  if (bytes === null) {\n    throw new Error(`can't parse bytes: \"${b.bytes}\"`);\n  }\n\n  const rd = new Reader(new Uint8Array(bytes));\n  return readPublicKey(rd);\n}\n\nclass MichelsonInstructionError extends MichelsonError {\n  /**\r\n   * @param val Value of a type node caused the error\r\n   * @param stackState Current stack state\r\n   * @param message An error message\r\n   */\n  constructor(val, stackState, message) {\n    super(val, message);\n    this.stackState = stackState;\n    Object.setPrototypeOf(this, MichelsonInstructionError.prototype);\n  }\n\n} // 'sequence as a pair' edo syntax helpers\n\n\nfunction typeID(t) {\n  return Array.isArray(t) ? 'pair' : t.prim;\n}\n\nfunction typeArgs(t) {\n  return 'prim' in t ? t.args : t;\n}\n\nfunction assertScalarTypesEqual(a, b, field = false) {\n  if (typeID(a) !== typeID(b)) {\n    throw new MichelsonTypeError(a, undefined, `types mismatch: ${typeID(a)} != ${typeID(b)}`);\n  }\n\n  const ann = [unpackAnnotations(a), unpackAnnotations(b)];\n\n  if (ann[0].t && ann[1].t && ann[0].t[0] !== ann[1].t[0]) {\n    throw new MichelsonTypeError(a, undefined, `${typeID(a)}: type names mismatch: ${ann[0].t[0]} != ${ann[1].t[0]}`);\n  }\n\n  if (field && ann[0].f && ann[1].f && ann[0].f[0] !== ann[1].f[0]) {\n    throw new MichelsonTypeError(a, undefined, `${typeID(a)}: field names mismatch: ${ann[0].f[0]} != ${ann[1].f}`);\n  }\n\n  if (isPairType(a)) {\n    const aArgs = unpackComb('pair', a);\n    const bArgs = unpackComb('pair', b);\n    assertScalarTypesEqual(aArgs.args[0], bArgs.args[0], true);\n    assertScalarTypesEqual(aArgs.args[1], bArgs.args[1], true);\n    return;\n  }\n\n  switch (a.prim) {\n    case 'option':\n    case 'list':\n    case 'contract':\n    case 'set':\n    case 'ticket':\n      assertScalarTypesEqual(a.args[0], b.args[0]);\n      break;\n\n    case 'or':\n      assertScalarTypesEqual(a.args[0], b.args[0], true);\n      assertScalarTypesEqual(a.args[1], b.args[1], true);\n      break;\n\n    case 'lambda':\n    case 'map':\n    case 'big_map':\n      assertScalarTypesEqual(a.args[0], b.args[0]);\n      assertScalarTypesEqual(a.args[1], b.args[1]);\n      break;\n\n    case 'sapling_state':\n    case 'sapling_transaction':\n      if (parseInt(a.args[0].int, 10) !== parseInt(b.args[0].int, 10)) {\n        throw new MichelsonTypeError(a, undefined, `${typeID(a)}: type argument mismatch: ${a.args[0].int} != ${b.args[0].int}`);\n      }\n\n  }\n}\n\nfunction assertStacksEqual(a, b) {\n  if (a.length !== b.length) {\n    throw new MichelsonTypeError(a, undefined, `stack length mismatch: ${a.length} != ${b.length}`);\n  }\n\n  for (let i = 0; i < a.length; i++) {\n    assertScalarTypesEqual(a[i], b[i]);\n  }\n}\n\nfunction assertTypeAnnotationsValid(t, field = false) {\n  var _a, _b, _c;\n\n  if (!Array.isArray(t)) {\n    const ann = unpackAnnotations(t);\n\n    if ((((_a = ann.t) === null || _a === void 0 ? void 0 : _a.length) || 0) > 1) {\n      throw new MichelsonTypeError(t, undefined, `${t.prim}: at most one type annotation allowed: ${t.annots}`);\n    }\n\n    if (field) {\n      if ((((_b = ann.f) === null || _b === void 0 ? void 0 : _b.length) || 0) > 1) {\n        throw new MichelsonTypeError(t, undefined, `${t.prim}: at most one field annotation allowed: ${t.annots}`);\n      }\n    } else {\n      if ((((_c = ann.f) === null || _c === void 0 ? void 0 : _c.length) || 0) > 0) {\n        throw new MichelsonTypeError(t, undefined, `${t.prim}: field annotations aren't allowed: ${t.annots}`);\n      }\n    }\n  }\n\n  if (isPairType(t)) {\n    const args = typeArgs(t);\n\n    for (const a of args) {\n      assertTypeAnnotationsValid(a, true);\n    }\n\n    return;\n  }\n\n  switch (t.prim) {\n    case 'option':\n    case 'list':\n    case 'contract':\n    case 'set':\n      assertTypeAnnotationsValid(t.args[0]);\n      break;\n\n    case 'or':\n      for (const a of t.args) {\n        assertTypeAnnotationsValid(a, true);\n      }\n\n      break;\n\n    case 'lambda':\n    case 'map':\n    case 'big_map':\n      assertTypeAnnotationsValid(t.args[0]);\n      assertTypeAnnotationsValid(t.args[1]);\n  }\n} // Simplified version of assertMichelsonInstruction() for previously validated data\n\n\nfunction isFunction(d) {\n  if (!Array.isArray(d)) {\n    return false;\n  }\n\n  for (const v of d) {\n    if (!(Array.isArray(v) && isFunction(v) || 'prim' in v && isInstruction(v))) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction assertDataValidInternal(d, t, ctx) {\n  if (isPairType(t)) {\n    if (isPairData(d)) {\n      assertDataListIfAny(d);\n      const dc = unpackComb('Pair', d);\n      const tc = unpackComb('pair', t);\n      assertDataValidInternal(dc.args[0], tc.args[0], ctx);\n      assertDataValidInternal(dc.args[1], tc.args[1], ctx);\n      return;\n    }\n\n    throw new MichelsonTypeError(t, d, `pair expected: ${JSON.stringify(d)}`);\n  }\n\n  switch (t.prim) {\n    // Atomic literals\n    case 'int':\n      if ('int' in d && isDecimal(d.int)) {\n        return;\n      }\n\n      throw new MichelsonTypeError(t, d, `integer value expected: ${JSON.stringify(d)}`);\n\n    case 'nat':\n    case 'mutez':\n      if ('int' in d && isNatural(d.int)) {\n        return;\n      }\n\n      throw new MichelsonTypeError(t, d, `natural value expected: ${JSON.stringify(d)}`);\n\n    case 'string':\n      if ('string' in d) {\n        return;\n      }\n\n      throw new MichelsonTypeError(t, d, `string value expected: ${JSON.stringify(d)}`);\n\n    case 'bytes':\n    case 'bls12_381_g1':\n    case 'bls12_381_g2':\n      if ('bytes' in d && parseBytes(d.bytes) !== null) {\n        return;\n      }\n\n      throw new MichelsonTypeError(t, d, `bytes value expected: ${JSON.stringify(d)}`);\n\n    case 'bool':\n      if ('prim' in d && (d.prim === 'True' || d.prim === 'False')) {\n        return;\n      }\n\n      throw new MichelsonTypeError(t, d, `boolean value expected: ${JSON.stringify(d)}`);\n\n    case 'key_hash':\n      if ('string' in d && checkDecodeTezosID(d.string, 'ED25519PublicKeyHash', 'SECP256K1PublicKeyHash', 'P256PublicKeyHash') !== null) {\n        return;\n      } else if ('bytes' in d) {\n        try {\n          decodePublicKeyHashBytes(d);\n          return;\n        } catch (err) {// ignore message\n        }\n      }\n\n      throw new MichelsonTypeError(t, d, `key hash expected: ${JSON.stringify(d)}`);\n\n    case 'timestamp':\n      if (('string' in d || 'int' in d) && parseDate(d) !== null) {\n        return;\n      }\n\n      throw new MichelsonTypeError(t, d, `timestamp expected: ${JSON.stringify(d)}`);\n\n    case 'address':\n      if ('string' in d) {\n        let address = d.string;\n        const ep = d.string.indexOf('%');\n\n        if (ep >= 0) {\n          // trim entry point\n          address = d.string.slice(0, ep);\n        }\n\n        if (checkDecodeTezosID(address, 'ED25519PublicKeyHash', 'SECP256K1PublicKeyHash', 'P256PublicKeyHash', 'ContractHash') !== null) {\n          return;\n        }\n      } else if ('bytes' in d) {\n        try {\n          decodeAddressBytes(d);\n          return;\n        } catch (err) {// ignore message\n        }\n      }\n\n      throw new MichelsonTypeError(t, d, `address expected: ${JSON.stringify(d)}`);\n\n    case 'key':\n      if ('string' in d && checkDecodeTezosID(d.string, 'ED25519PublicKey', 'SECP256K1PublicKey', 'P256PublicKey') !== null) {\n        return;\n      } else if ('bytes' in d) {\n        try {\n          decodePublicKeyBytes(d);\n          return;\n        } catch (err) {// ignore message\n        }\n      }\n\n      throw new MichelsonTypeError(t, d, `public key expected: ${JSON.stringify(d)}`);\n\n    case 'unit':\n      if ('prim' in d && d.prim === 'Unit') {\n        return;\n      }\n\n      throw new MichelsonTypeError(t, d, `unit value expected: ${JSON.stringify(d)}`);\n\n    case 'signature':\n      if ('bytes' in d || 'string' in d && checkDecodeTezosID(d.string, 'ED25519Signature', 'SECP256K1Signature', 'P256Signature', 'GenericSignature') !== null) {\n        return;\n      }\n\n      throw new MichelsonTypeError(t, d, `signature expected: ${JSON.stringify(d)}`);\n\n    case 'chain_id':\n      if ('bytes' in d || 'string' in d) {\n        const x = 'string' in d ? decodeBase58Check(d.string) : parseBytes(d.bytes);\n\n        if (x !== null) {\n          return;\n        }\n      }\n\n      throw new MichelsonTypeError(t, d, `chain id expected: ${JSON.stringify(d)}`);\n    // Complex types\n\n    case 'option':\n      if ('prim' in d) {\n        if (d.prim === 'None') {\n          return;\n        } else if (d.prim === 'Some') {\n          assertDataValidInternal(d.args[0], t.args[0], ctx);\n          return;\n        }\n      }\n\n      throw new MichelsonTypeError(t, d, `option expected: ${JSON.stringify(d)}`);\n\n    case 'list':\n    case 'set':\n      if (assertDataListIfAny(d)) {\n        //let prev: MichelsonData | undefined;\n        for (const v of d) {\n          assertDataValidInternal(v, t.args[0], ctx);\n        }\n\n        return;\n      }\n\n      throw new MichelsonTypeError(t, d, `${t.prim} expected: ${JSON.stringify(d)}`);\n\n    case 'or':\n      if ('prim' in d) {\n        if (d.prim === 'Left') {\n          assertDataValidInternal(d.args[0], t.args[0], ctx);\n          return;\n        } else if (d.prim === 'Right') {\n          assertDataValidInternal(d.args[0], t.args[1], ctx);\n          return;\n        }\n      }\n\n      throw new MichelsonTypeError(t, d, `union (or) expected: ${JSON.stringify(d)}`);\n\n    case 'lambda':\n      if (isFunction(d)) {\n        const ret = functionTypeInternal(d, [t.args[0]], ctx);\n\n        if ('failed' in ret) {\n          throw new MichelsonTypeError(t, d, `function is failed with error type: ${ret.failed}`);\n        }\n\n        if (ret.length !== 1) {\n          throw new MichelsonTypeError(t, d, 'function must return a value');\n        }\n\n        assertScalarTypesEqual(t.args[1], ret[0]);\n        return;\n      }\n\n      throw new MichelsonTypeError(t, d, `function expected: ${JSON.stringify(d)}`);\n\n    case 'map':\n    case 'big_map':\n      if (Array.isArray(d)) {\n        //let prev: MichelsonMapElt | undefined;\n        for (const v of d) {\n          if (!('prim' in v) || v.prim !== 'Elt') {\n            throw new MichelsonTypeError(t, d, `map elements expected: ${JSON.stringify(d)}`);\n          }\n\n          assertDataValidInternal(v.args[0], t.args[0], ctx);\n          assertDataValidInternal(v.args[1], t.args[1], ctx);\n        }\n\n        return;\n      }\n\n      throw new MichelsonTypeError(t, d, `${t.prim} expected: ${JSON.stringify(d)}`);\n\n    case 'bls12_381_fr':\n      if ('int' in d && isDecimal(d.int) || 'bytes' in d && parseBytes(d.bytes) !== null) {\n        return;\n      }\n\n      throw new MichelsonTypeError(t, d, `BLS12-381 element expected: ${JSON.stringify(d)}`);\n\n    case 'sapling_state':\n      if (Array.isArray(d)) {\n        return;\n      }\n\n      throw new MichelsonTypeError(t, d, `sapling state expected: ${JSON.stringify(d)}`);\n\n    case 'ticket':\n      assertDataValidInternal(d, {\n        prim: 'pair',\n        args: [{\n          prim: 'address'\n        }, t.args[0], {\n          prim: 'nat'\n        }]\n      }, ctx);\n      return;\n\n    default:\n      throw new MichelsonTypeError(t, d, `type ${typeID(t)} don't have Michelson literal representation`);\n  }\n}\n\nfunction instructionListType(inst, stack, ctx) {\n  let ret = stack;\n  let s = stack;\n  let i = 0;\n\n  for (const op of inst) {\n    const ft = functionTypeInternal(op, s, ctx);\n    ret = ft;\n\n    if ('failed' in ft) {\n      break;\n    }\n\n    s = ft;\n    i++;\n  }\n\n  if ('failed' in ret && ret.level == 0 && (!('prim' in ret.failed) || ret.failed.prim !== 'never') && i !== inst.length - 1) {\n    throw new MichelsonInstructionError(inst, ret, 'FAIL must appear in a tail position');\n  }\n\n  if ((ctx === null || ctx === void 0 ? void 0 : ctx.traceCallback) !== undefined) {\n    const trace = {\n      op: inst,\n      in: stack,\n      out: ret\n    };\n    ctx.traceCallback(trace);\n  }\n\n  return 'failed' in ret ? {\n    failed: ret.failed,\n    level: ret.level + 1\n  } : ret;\n}\n\nfunction functionTypeInternal(inst, stack, ctx) {\n  const proto = (ctx === null || ctx === void 0 ? void 0 : ctx.protocol) || DefaultProtocol;\n\n  if (Array.isArray(inst)) {\n    return instructionListType(inst, stack, ctx);\n  }\n\n  const instruction = inst; // Make it const for type guarding\n  // make sure the stack has enough number of arguments of specific types\n\n  function args(n, ...typeIds) {\n    if (stack.length < typeIds.length + n) {\n      throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: stack must have at least ${typeIds.length} element(s)`);\n    }\n\n    let i = n;\n\n    for (const ids of typeIds) {\n      if (ids !== null && ids.length !== 0) {\n        let ii = 0;\n\n        while (ii < ids.length && ids[ii] !== typeID(stack[i])) {\n          ii++;\n        }\n\n        if (ii === ids.length) {\n          throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: stack type mismatch: [${i}] expected to be ${ids}, got ${typeID(stack[i])} instead`);\n        }\n      }\n\n      i++;\n    }\n\n    return stack.slice(n, typeIds.length + n);\n  }\n\n  function rethrow(fn) {\n    return (...args) => {\n      try {\n        return fn(...args);\n      } catch (err) {\n        if (err instanceof MichelsonError) {\n          throw new MichelsonInstructionError(instruction, stack, err.message);\n        } else {\n          throw err;\n        }\n      }\n    };\n  }\n\n  function rethrowTypeGuard(fn) {\n    return arg => {\n      try {\n        return fn(arg);\n      } catch (err) {\n        if (err instanceof MichelsonError) {\n          throw new MichelsonInstructionError(instruction, stack, err.message);\n        } else {\n          throw err;\n        }\n      }\n    };\n  }\n\n  const argAnn = rethrow(unpackAnnotations);\n  const ensureStacksEqual = rethrow(assertStacksEqual);\n  const ensureTypesEqual = rethrow(assertScalarTypesEqual);\n  const ensureComparableType = rethrowTypeGuard(assertMichelsonComparableType);\n  const ensurePackableType = rethrowTypeGuard(assertMichelsonPackableType);\n  const ensureStorableType = rethrowTypeGuard(assertMichelsonStorableType);\n  const ensurePushableType = rethrowTypeGuard(assertMichelsonPushableType);\n  const ensureBigMapStorableType = rethrowTypeGuard(assertMichelsonBigMapStorableType); // unpack instruction annotations and assert their maximum number\n\n  function instructionAnn(num, opt) {\n    const a = argAnn(instruction, Object.assign(Object.assign({}, opt), {\n      emptyFields: num.f !== undefined && num.f > 1,\n      emptyVar: num.v !== undefined && num.v > 1\n    }));\n\n    const assertNum = (a, n, type) => {\n      if (a && a.length > (n || 0)) {\n        throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: at most ${n || 0} ${type} annotations allowed`);\n      }\n    };\n\n    assertNum(a.f, num.f, 'field');\n    assertNum(a.t, num.t, 'type');\n    assertNum(a.v, num.v, 'variable');\n    return a;\n  } // also keeps annotation class if null is provided\n\n\n  function annotate(tt, a) {\n    const tx = tt;\n    const t = Array.isArray(tx) ? {\n      prim: 'pair',\n      args: tx\n    } : tx;\n    const src = argAnn(t);\n    const ann = a.v !== undefined || a.t !== undefined || a.f !== undefined ? [...((a.v === null ? src.v : a.v) || []), ...((a.t === null ? src.t : a.t) || []), ...((a.f === null ? src.f : a.f) || [])] : undefined;\n\n    const rest = __rest(t, [\"annots\"]);\n\n    return Object.assign(Object.assign({}, rest), ann && ann.length !== 0 && {\n      annots: ann\n    });\n  } // shortcut to copy at most one variable annotation from the instruction to the type\n\n\n  function annotateVar(t, def) {\n    const ia = instructionAnn({\n      v: 1\n    });\n    return annotate(t, {\n      v: ia.v !== undefined ? ia.v : def !== undefined ? [def] : null,\n      t: null\n    });\n  } // annotate CAR/CDR/UNPAIR/GET\n\n\n  function annotateField(arg, field, insAnn, n, defField) {\n    var _a, _b, _c, _d;\n\n    const fieldAnn = (_a = argAnn(field).f) === null || _a === void 0 ? void 0 : _a[0]; // field's field annotation\n\n    const insFieldAnn = (_b = insAnn.f) === null || _b === void 0 ? void 0 : _b[n];\n\n    if (insFieldAnn !== undefined && insFieldAnn !== '%' && fieldAnn !== undefined && insFieldAnn !== fieldAnn) {\n      throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: field names doesn't match: ${insFieldAnn} !== ${fieldAnn}`);\n    }\n\n    const insVarAnn = (_c = insAnn.v) === null || _c === void 0 ? void 0 : _c[n]; // nth instruction's variable annotation\n\n    const varAnn = (_d = argAnn(arg).v) === null || _d === void 0 ? void 0 : _d[0]; // instruction argument's variable annotation\n\n    return annotate(field, {\n      t: null,\n      v: insVarAnn ? insVarAnn === '@%' ? fieldAnn ? ['@' + fieldAnn.slice(1)] : undefined : insVarAnn === '@%%' ? varAnn ? ['@' + varAnn.slice(1) + '.' + (fieldAnn ? fieldAnn.slice(1) : defField)] : fieldAnn ? ['@' + fieldAnn.slice(1)] : undefined : [insVarAnn] : null\n    });\n  } // comb helper functions\n\n\n  function getN(src, n, i = n) {\n    const p = unpackComb('pair', src);\n\n    if (i === 1) {\n      return [p.args[0]];\n    } else if (i === 2) {\n      return p.args;\n    }\n\n    const right = p.args[1];\n\n    if (isPairType(right)) {\n      return [p.args[0], ...getN(right, n, i - 1)];\n    } else {\n      throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: at least ${n} fields are expected`);\n    }\n  }\n\n  function getNth(src, n, i = n) {\n    if (i === 0) {\n      return src;\n    }\n\n    const p = unpackComb('pair', src);\n\n    if (i === 1) {\n      return p.args[0];\n    }\n\n    const right = p.args[1];\n\n    if (isPairType(right)) {\n      return getNth(right, n, i - 2);\n    } else if (i === 2) {\n      return right;\n    }\n\n    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: at least ${n + 1} fields are expected`);\n  }\n\n  function updateNth(src, x, n, i = n) {\n    if (i === 0) {\n      return x;\n    }\n\n    const p = unpackComb('pair', src);\n\n    if (i === 1) {\n      return Object.assign(Object.assign({}, p), {\n        args: [x, p.args[1]]\n      });\n    }\n\n    const right = p.args[1];\n\n    if (isPairType(right)) {\n      return Object.assign(Object.assign({}, p), {\n        args: [p.args[0], updateNth(right, x, n, i - 2)]\n      });\n    } else if (i === 2) {\n      return Object.assign(Object.assign({}, p), {\n        args: [p.args[0], x]\n      });\n    }\n\n    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: at least ${n + 1} fields are expected`);\n  }\n\n  const varSuffix = (a, suffix) => ['@' + (a.v ? a.v[0].slice(1) + '.' : '') + suffix];\n\n  function branchType(br0, br1) {\n    if ('failed' in br0 || 'failed' in br1) {\n      return 'failed' in br0 ? br1 : br0;\n    } else {\n      ensureStacksEqual(br0, br1);\n      return br0;\n    }\n  }\n\n  const retStack = (instruction => {\n    var _a, _b, _c, _d, _e;\n\n    switch (instruction.prim) {\n      case 'DUP':\n        {\n          const n = instruction.args ? parseInt(instruction.args[0].int, 10) : 1;\n\n          if (n === 0) {\n            throw new MichelsonInstructionError(instruction, stack, 'DUP 0 is forbidden');\n          }\n\n          const s = args(n - 1, null)[0];\n\n          if (typeID(s) === 'ticket') {\n            throw new MichelsonInstructionError(instruction, stack, \"ticket can't be DUPed\");\n          }\n\n          return [s, ...stack];\n        }\n\n      case 'SWAP':\n        {\n          const s = args(0, null, null);\n          instructionAnn({});\n          return [s[1], s[0], ...stack.slice(2)];\n        }\n\n      case 'SOME':\n        return [annotate({\n          prim: 'option',\n          args: [args(0, null)[0]]\n        }, instructionAnn({\n          t: 1,\n          v: 1\n        })), ...stack.slice(1)];\n\n      case 'UNIT':\n        return [annotate({\n          prim: 'unit'\n        }, instructionAnn({\n          v: 1,\n          t: 1\n        })), ...stack];\n\n      case 'PAIR':\n        {\n          const n = instruction.args ? parseInt(instruction.args[0].int, 10) : 2;\n\n          if (n < 2) {\n            throw new MichelsonInstructionError(instruction, stack, `PAIR ${n} is forbidden`);\n          }\n\n          const s = args(0, ...new Array(n).fill(null));\n          const ia = instructionAnn({\n            f: n,\n            t: 1,\n            v: 1\n          }, {\n            specialFields: true\n          });\n\n          const trim = s => {\n            const i = s.lastIndexOf('.');\n            return s.slice(i > 0 ? i + 1 : 1);\n          };\n\n          const retArgs = s.map((v, i) => {\n            var _a;\n\n            const va = argAnn(v);\n            const f = ia.f && ia.f.length > i && ia.f[i] !== '%' ? ia.f[i] === '%@' ? va.v ? ['%' + trim(((_a = va.v) === null || _a === void 0 ? void 0 : _a[0]) || '')] : undefined : [ia.f[i]] : undefined;\n            return annotate(v, {\n              v: null,\n              t: null,\n              f\n            });\n          });\n          return [annotate({\n            prim: 'pair',\n            args: retArgs\n          }, {\n            t: ia.t,\n            v: ia.v\n          }), ...stack.slice(n)];\n        }\n\n      case 'UNPAIR':\n        {\n          const n = instruction.args ? parseInt(instruction.args[0].int, 10) : 2;\n\n          if (n < 2) {\n            throw new MichelsonInstructionError(instruction, stack, `UNPAIR ${n} is forbidden`);\n          }\n\n          const s = args(0, ['pair'])[0];\n          const ia = instructionAnn({\n            f: 2,\n            v: 2\n          }, {\n            specialVar: true\n          });\n          const fields = getN(s, n);\n          return [...fields.map((field, i) => annotateField(s, field, ia, i, i === 0 ? 'car' : 'cdr')), ...stack.slice(1)];\n        }\n\n      case 'CAR':\n      case 'CDR':\n        {\n          const s = unpackComb('pair', args(0, ['pair'])[0]);\n          const field = s.args[instruction.prim === 'CAR' ? 0 : 1];\n          const ia = instructionAnn({\n            f: 1,\n            v: 1\n          }, {\n            specialVar: true\n          });\n          return [annotateField(s, field, ia, 0, instruction.prim.toLocaleLowerCase()), ...stack.slice(1)];\n        }\n\n      case 'CONS':\n        {\n          const s = args(0, null, ['list']);\n          ensureTypesEqual(s[0], s[1].args[0]);\n          return [annotateVar({\n            prim: 'list',\n            args: [s[1].args[0]]\n          }), ...stack.slice(2)];\n        }\n\n      case 'SIZE':\n        args(0, ['string', 'list', 'set', 'map', 'bytes']);\n        return [annotateVar({\n          prim: 'nat'\n        }), ...stack.slice(1)];\n\n      case 'MEM':\n        {\n          const s = args(0, null, ['set', 'map', 'big_map']);\n          ensureComparableType(s[0]);\n          ensureTypesEqual(s[0], s[1].args[0]);\n          return [annotateVar({\n            prim: 'bool'\n          }), ...stack.slice(2)];\n        }\n\n      case 'GET':\n        if (instruction.args) {\n          // comb operation\n          const n = parseInt(instruction.args[0].int, 10);\n          const s = args(0, ['pair'])[0];\n          return [annotateVar(getNth(s, n)), ...stack.slice(1)];\n        } else {\n          // map operation\n          const s = args(0, null, ['map', 'big_map']);\n          ensureComparableType(s[0]);\n          ensureTypesEqual(s[0], s[1].args[0]);\n          return [annotateVar({\n            prim: 'option',\n            args: [s[1].args[1]]\n          }), ...stack.slice(2)];\n        }\n\n      case 'UPDATE':\n        if (instruction.args) {\n          // comb operation\n          const n = parseInt(instruction.args[0].int, 10);\n          const s = args(0, null, ['pair']);\n          return [annotateVar(updateNth(s[1], s[0], n)), ...stack.slice(2)];\n        } else {\n          // map operation\n          const s0 = args(0, null, ['bool', 'option']);\n          ensureComparableType(s0[0]);\n\n          if (s0[1].prim === 'bool') {\n            const s1 = args(2, ['set']);\n            ensureTypesEqual(s0[0], s1[0].args[0]);\n            return [annotateVar({\n              prim: 'set',\n              args: [annotate(s0[0], {\n                t: null\n              })]\n            }), ...stack.slice(3)];\n          }\n\n          const s1 = args(2, ['map', 'big_map']);\n          ensureTypesEqual(s0[0], s1[0].args[0]);\n\n          if (s1[0].prim === 'map') {\n            return [annotateVar({\n              prim: 'map',\n              args: [annotate(s0[0], {\n                t: null\n              }), annotate(s0[1].args[0], {\n                t: null\n              })]\n            }), ...stack.slice(3)];\n          }\n\n          ensureBigMapStorableType(s0[1].args[0]);\n          return [annotateVar({\n            prim: 'big_map',\n            args: [annotate(s0[0], {\n              t: null\n            }), annotate(s0[1].args[0], {\n              t: null\n            })]\n          }), ...stack.slice(3)];\n        }\n\n      case 'GET_AND_UPDATE':\n        {\n          const ia = instructionAnn({\n            v: 2\n          });\n          const s = args(0, null, ['option'], ['map', 'big_map']);\n          ensureComparableType(s[0]);\n          ensureTypesEqual(s[0], s[2].args[0]);\n          ensureTypesEqual(s[1].args[0], s[2].args[1]);\n          const va = (_a = ia.v) === null || _a === void 0 ? void 0 : _a.map(v => v !== '@' ? [v] : undefined);\n\n          if (s[2].prim === 'map') {\n            return [annotate({\n              prim: 'option',\n              args: [s[2].args[1]]\n            }, {\n              v: va === null || va === void 0 ? void 0 : va[0]\n            }), annotate({\n              prim: 'map',\n              args: [annotate(s[0], {\n                t: null\n              }), annotate(s[1].args[0], {\n                t: null\n              })]\n            }, {\n              v: va === null || va === void 0 ? void 0 : va[1]\n            }), ...stack.slice(3)];\n          }\n\n          ensureBigMapStorableType(s[1].args[0]);\n          return [annotate({\n            prim: 'option',\n            args: [s[2].args[1]]\n          }, {\n            v: va === null || va === void 0 ? void 0 : va[0]\n          }), annotate({\n            prim: 'big_map',\n            args: [annotate(s[0], {\n              t: null\n            }), annotate(s[1].args[0], {\n              t: null\n            })]\n          }, {\n            v: va === null || va === void 0 ? void 0 : va[1]\n          }), ...stack.slice(3)];\n        }\n\n      case 'EXEC':\n        {\n          const s = args(0, null, ['lambda']);\n          ensureTypesEqual(s[0], s[1].args[0]);\n          return [annotateVar(s[1].args[1]), ...stack.slice(2)];\n        }\n\n      case 'APPLY':\n        {\n          const s = args(0, null, ['lambda']);\n          ensureStorableType(s[0]);\n          ensurePushableType(s[0]);\n\n          if (!isPairType(s[1].args[0])) {\n            throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: function's argument must be a pair: ${typeID(s[1].args[0])}`);\n          }\n\n          const pt = s[1].args[0];\n          ensureTypesEqual(s[0], typeArgs(pt)[0]);\n          return [annotateVar({\n            prim: 'lambda',\n            args: [typeArgs(pt)[1], s[1].args[1]]\n          }), ...stack.slice(2)];\n        }\n\n      case 'FAILWITH':\n        {\n          const s = args(0, null)[0];\n\n          if (!ProtoInferiorTo(proto, Protocol.PtEdo2Zk)) {\n            ensurePackableType(s);\n          }\n\n          return {\n            failed: s,\n            level: 0\n          };\n        }\n\n      case 'NEVER':\n        args(0, ['never']);\n        return {\n          failed: {\n            prim: 'never'\n          },\n          level: 0\n        };\n\n      case 'RENAME':\n        return [annotateVar(args(0, null)[0]), ...stack.slice(1)];\n\n      case 'CONCAT':\n        {\n          const s0 = args(0, ['string', 'list', 'bytes']);\n\n          if (s0[0].prim === 'list') {\n            if (typeID(s0[0].args[0]) !== 'string' && typeID(s0[0].args[0]) !== 'bytes') {\n              throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: can't concatenate list of ${typeID(s0[0].args[0])}'s`);\n            }\n\n            return [annotateVar(s0[0].args[0]), ...stack.slice(1)];\n          }\n\n          const s1 = args(1, ['string', 'bytes']);\n\n          if (s0[0].prim !== s1[0].prim) {\n            throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: can't concatenate ${s0[0].prim} with ${s1[0].prim}`);\n          }\n\n          return [annotateVar(s1[0]), ...stack.slice(2)];\n        }\n\n      case 'SLICE':\n        return [annotateVar({\n          prim: 'option',\n          args: [args(0, ['nat'], ['nat'], ['string', 'bytes'])[2]]\n        }, '@slice'), ...stack.slice(3)];\n\n      case 'PACK':\n        {\n          const s = args(0, null)[0];\n          ensurePackableType(s);\n          return [annotateVar({\n            prim: 'bytes'\n          }, '@packed'), ...stack.slice(1)];\n        }\n\n      case 'ADD':\n        {\n          const s = args(0, ['nat', 'int', 'timestamp', 'mutez', 'bls12_381_g1', 'bls12_381_g2', 'bls12_381_fr'], ['nat', 'int', 'timestamp', 'mutez', 'bls12_381_g1', 'bls12_381_g2', 'bls12_381_fr']);\n\n          if (s[0].prim === 'nat' && s[1].prim === 'int' || s[0].prim === 'int' && s[1].prim === 'nat') {\n            return [annotateVar({\n              prim: 'int'\n            }), ...stack.slice(2)];\n          } else if (s[0].prim === 'int' && s[1].prim === 'timestamp' || s[0].prim === 'timestamp' && s[1].prim === 'int') {\n            return [annotateVar({\n              prim: 'timestamp'\n            }), ...stack.slice(2)];\n          } else if ((s[0].prim === 'int' || s[0].prim === 'nat' || s[0].prim === 'mutez' || s[0].prim === 'bls12_381_g1' || s[0].prim === 'bls12_381_g2' || s[0].prim === 'bls12_381_fr') && s[0].prim === s[1].prim) {\n            return [annotateVar(s[0]), ...stack.slice(2)];\n          }\n\n          throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: can't add ${s[0].prim} to ${s[1].prim}`);\n        }\n\n      case 'SUB':\n        {\n          const s = ProtoInferiorTo(proto, Protocol.PsiThaCa) ? args(0, ['nat', 'int', 'timestamp', 'mutez'], ['nat', 'int', 'timestamp', 'mutez']) : args(0, ['nat', 'int', 'timestamp'], ['nat', 'int', 'timestamp']);\n\n          if ((s[0].prim === 'nat' || s[0].prim === 'int') && (s[1].prim === 'nat' || s[1].prim === 'int') || s[0].prim === 'timestamp' && s[1].prim === 'timestamp') {\n            return [annotateVar({\n              prim: 'int'\n            }), ...stack.slice(2)];\n          } else if (s[0].prim === 'timestamp' && s[1].prim === 'int') {\n            return [annotateVar({\n              prim: 'timestamp'\n            }), ...stack.slice(2)];\n          } else if (s[0].prim === 'mutez' && s[1].prim === 'mutez') {\n            return [annotateVar({\n              prim: 'mutez'\n            }), ...stack.slice(2)];\n          }\n\n          throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: can't subtract ${s[0].prim} from ${s[1].prim}`);\n        }\n\n      case 'SUB_MUTEZ':\n        {\n          args(0, ['mutez'], ['mutez']);\n          return [annotateVar({\n            prim: 'option',\n            args: [{\n              prim: 'mutez'\n            }]\n          }), ...stack.slice(2)];\n        }\n\n      case 'MUL':\n        {\n          const s = args(0, ['nat', 'int', 'mutez', 'bls12_381_g1', 'bls12_381_g2', 'bls12_381_fr'], ['nat', 'int', 'mutez', 'bls12_381_g1', 'bls12_381_g2', 'bls12_381_fr']);\n\n          if (s[0].prim === 'nat' && s[1].prim === 'int' || s[0].prim === 'int' && s[1].prim === 'nat') {\n            return [annotateVar({\n              prim: 'int'\n            }), ...stack.slice(2)];\n          } else if (s[0].prim === 'nat' && s[1].prim === 'mutez' || s[0].prim === 'mutez' && s[1].prim === 'nat') {\n            return [annotateVar({\n              prim: 'mutez'\n            }), ...stack.slice(2)];\n          } else if ((s[0].prim === 'bls12_381_g1' || s[0].prim === 'bls12_381_g2' || s[0].prim === 'bls12_381_fr') && s[1].prim === 'bls12_381_fr' || (s[0].prim === 'nat' || s[0].prim === 'int') && s[0].prim === s[1].prim) {\n            return [annotateVar(s[0]), ...stack.slice(2)];\n          } else if ((s[0].prim === 'nat' || s[0].prim === 'int') && s[1].prim === 'bls12_381_fr' || (s[1].prim === 'nat' || s[1].prim === 'int') && s[0].prim === 'bls12_381_fr') {\n            return [annotateVar({\n              prim: 'bls12_381_fr'\n            }), ...stack.slice(2)];\n          }\n\n          throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: can't multiply ${s[0].prim} by ${s[1].prim}`);\n        }\n\n      case 'EDIV':\n        {\n          const res = (a, b) => ({\n            prim: 'option',\n            args: [{\n              prim: 'pair',\n              args: [{\n                prim: a\n              }, {\n                prim: b\n              }]\n            }]\n          });\n\n          const s = args(0, ['nat', 'int', 'mutez'], ['nat', 'int', 'mutez']);\n\n          if (s[0].prim === 'nat' && s[1].prim === 'nat') {\n            return [annotateVar(res('nat', 'nat')), ...stack.slice(2)];\n          } else if ((s[0].prim === 'nat' || s[0].prim === 'int') && (s[1].prim === 'nat' || s[1].prim === 'int')) {\n            return [annotateVar(res('int', 'nat')), ...stack.slice(2)];\n          } else if (s[0].prim === 'mutez' && s[1].prim === 'nat') {\n            return [annotateVar(res('mutez', 'mutez')), ...stack.slice(2)];\n          } else if (s[0].prim === 'mutez' && s[1].prim === 'mutez') {\n            return [annotateVar(res('nat', 'mutez')), ...stack.slice(2)];\n          }\n\n          throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: can't euclideally divide ${s[0].prim} by ${s[1].prim}`);\n        }\n\n      case 'ABS':\n        args(0, ['int']);\n        return [annotateVar({\n          prim: 'nat'\n        }), ...stack.slice(1)];\n\n      case 'ISNAT':\n        args(0, ['int']);\n        return [annotateVar({\n          prim: 'option',\n          args: [{\n            prim: 'nat'\n          }]\n        }), ...stack.slice(1)];\n\n      case 'INT':\n        args(0, ['nat', 'bls12_381_fr']);\n        return [annotateVar({\n          prim: 'int'\n        }), ...stack.slice(1)];\n\n      case 'NEG':\n        {\n          const s = args(0, ['nat', 'int', 'bls12_381_g1', 'bls12_381_g2', 'bls12_381_fr'])[0];\n\n          if (s.prim === 'nat' || s.prim === 'int') {\n            return [annotateVar({\n              prim: 'int'\n            }), ...stack.slice(1)];\n          }\n\n          return [annotateVar(s), ...stack.slice(1)];\n        }\n\n      case 'LSL':\n      case 'LSR':\n        args(0, ['nat'], ['nat']);\n        return [annotateVar({\n          prim: 'nat'\n        }), ...stack.slice(2)];\n\n      case 'OR':\n      case 'XOR':\n        {\n          const s = args(0, ['nat', 'bool'], ['nat', 'bool']);\n\n          if (s[0].prim !== s[1].prim) {\n            throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: both arguments must be of the same type: ${s[0].prim}, ${s[1].prim}`);\n          }\n\n          return [annotateVar(s[1]), ...stack.slice(2)];\n        }\n\n      case 'AND':\n        {\n          const s = args(0, ['nat', 'bool', 'int'], ['nat', 'bool']);\n\n          if ((s[0].prim !== 'int' || s[1].prim !== 'nat') && s[0].prim !== s[1].prim) {\n            throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: both arguments must be of the same type: ${s[0].prim}, ${s[1].prim}`);\n          }\n\n          return [annotateVar(s[1]), ...stack.slice(2)];\n        }\n\n      case 'NOT':\n        {\n          const s = args(0, ['nat', 'bool', 'int'])[0];\n\n          if (s.prim === 'bool') {\n            return [annotateVar({\n              prim: 'bool'\n            }), ...stack.slice(1)];\n          }\n\n          return [annotateVar({\n            prim: 'int'\n          }), ...stack.slice(1)];\n        }\n\n      case 'COMPARE':\n        {\n          const s = args(0, null, null);\n          ensureComparableType(s[0]);\n          ensureComparableType(s[1]);\n          return [annotateVar({\n            prim: 'int'\n          }), ...stack.slice(2)];\n        }\n\n      case 'EQ':\n      case 'NEQ':\n      case 'LT':\n      case 'GT':\n      case 'LE':\n      case 'GE':\n        args(0, ['int']);\n        return [annotateVar({\n          prim: 'bool'\n        }), ...stack.slice(1)];\n\n      case 'SELF':\n        {\n          if ((ctx === null || ctx === void 0 ? void 0 : ctx.contract) === undefined) {\n            throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: contract required`);\n          }\n\n          const ia = instructionAnn({\n            f: 1,\n            v: 1\n          });\n          const ep = contractEntryPoint(ctx.contract, (_b = ia.f) === null || _b === void 0 ? void 0 : _b[0]);\n\n          if (ep === null) {\n            throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: contract has no entrypoint ${ep}`);\n          }\n\n          return [annotate({\n            prim: 'contract',\n            args: [ep]\n          }, {\n            v: ia.v ? ia.v : ['@self']\n          }), ...stack];\n        }\n\n      case 'TRANSFER_TOKENS':\n        {\n          const s = args(0, null, ['mutez'], ['contract']);\n          ensureTypesEqual(s[0], s[2].args[0]);\n          return [annotateVar({\n            prim: 'operation'\n          }), ...stack.slice(3)];\n        }\n\n      case 'SET_DELEGATE':\n        {\n          const s = args(0, ['option'])[0];\n\n          if (typeID(s.args[0]) !== 'key_hash') {\n            throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: key hash expected: ${typeID(s.args[0])}`);\n          }\n\n          return [annotateVar({\n            prim: 'operation'\n          }), ...stack.slice(1)];\n        }\n\n      case 'IMPLICIT_ACCOUNT':\n        args(0, ['key_hash']);\n        return [annotateVar({\n          prim: 'contract',\n          args: [{\n            prim: 'unit'\n          }]\n        }), ...stack.slice(1)];\n\n      case 'NOW':\n        return [annotateVar({\n          prim: 'timestamp'\n        }, '@now'), ...stack];\n\n      case 'AMOUNT':\n        return [annotateVar({\n          prim: 'mutez'\n        }, '@amount'), ...stack];\n\n      case 'BALANCE':\n        return [annotateVar({\n          prim: 'mutez'\n        }, '@balance'), ...stack];\n\n      case 'CHECK_SIGNATURE':\n        args(0, ['key'], ['signature'], ['bytes']);\n        return [annotateVar({\n          prim: 'bool'\n        }), ...stack.slice(3)];\n\n      case 'BLAKE2B':\n      case 'SHA256':\n      case 'SHA512':\n      case 'KECCAK':\n      case 'SHA3':\n        args(0, ['bytes']);\n        return [annotateVar({\n          prim: 'bytes'\n        }), ...stack.slice(1)];\n\n      case 'HASH_KEY':\n        args(0, ['key']);\n        return [annotateVar({\n          prim: 'key_hash'\n        }), ...stack.slice(1)];\n\n      case 'SOURCE':\n        return [annotateVar({\n          prim: 'address'\n        }, '@source'), ...stack];\n\n      case 'SENDER':\n        return [annotateVar({\n          prim: 'address'\n        }, '@sender'), ...stack];\n\n      case 'ADDRESS':\n        {\n          const s = args(0, ['contract'])[0];\n          const ia = instructionAnn({\n            v: 1\n          });\n          return [annotate({\n            prim: 'address',\n            [refContract]: s\n          }, {\n            v: ia.v ? ia.v : varSuffix(argAnn(s), 'address')\n          }), ...stack.slice(1)];\n        }\n\n      case 'SELF_ADDRESS':\n        {\n          const addr = {\n            prim: 'address'\n          };\n\n          if ((ctx === null || ctx === void 0 ? void 0 : ctx.contract) !== undefined) {\n            addr[refContract] = {\n              prim: 'contract',\n              args: [contractSection(ctx.contract, 'parameter').args[0]]\n            };\n          }\n\n          return [annotateVar(addr, '@address'), ...stack];\n        }\n\n      case 'CHAIN_ID':\n        return [annotateVar({\n          prim: 'chain_id'\n        }), ...stack];\n\n      case 'DROP':\n        {\n          instructionAnn({});\n          const n = instruction.args !== undefined ? parseInt(instruction.args[0].int, 10) : 1;\n          args(n - 1, null);\n          return stack.slice(n);\n        }\n\n      case 'DIG':\n        {\n          instructionAnn({});\n          const n = parseInt(instruction.args[0].int, 10);\n          return [args(n, null)[0], ...stack.slice(0, n), ...stack.slice(n + 1)];\n        }\n\n      case 'DUG':\n        {\n          instructionAnn({});\n          const n = parseInt(instruction.args[0].int, 10);\n          return [...stack.slice(1, n + 1), args(0, null)[0], ...stack.slice(n + 1)];\n        }\n\n      case 'NONE':\n        assertTypeAnnotationsValid(instruction.args[0]);\n        return [annotate({\n          prim: 'option',\n          args: [instruction.args[0]]\n        }, instructionAnn({\n          t: 1,\n          v: 1\n        })), ...stack];\n\n      case 'LEFT':\n      case 'RIGHT':\n        {\n          const s = args(0, null)[0];\n          const ia = instructionAnn({\n            f: 2,\n            t: 1,\n            v: 1\n          }, {\n            specialFields: true\n          });\n          const va = argAnn(s);\n          const children = [annotate(s, {\n            t: null,\n            v: null,\n            f: ia.f && ia.f.length > 0 && ia.f[0] !== '%' ? ia.f[0] === '%@' ? va.v ? ['%' + va.v[0].slice(1)] : undefined : ia.f : undefined\n          }), annotate(instruction.args[0], {\n            t: null,\n            f: ia.f && ia.f.length > 1 && ia.f[1] !== '%' ? ia.f : undefined\n          })];\n          return [annotate({\n            prim: 'or',\n            args: instruction.prim === 'LEFT' ? children : [children[1], children[0]]\n          }, {\n            t: ia.t,\n            v: ia.v\n          }), ...stack.slice(1)];\n        }\n\n      case 'NIL':\n        assertTypeAnnotationsValid(instruction.args[0]);\n        return [annotate({\n          prim: 'list',\n          args: [instruction.args[0]]\n        }, instructionAnn({\n          t: 1,\n          v: 1\n        })), ...stack];\n\n      case 'UNPACK':\n        args(0, ['bytes']);\n        assertTypeAnnotationsValid(instruction.args[0]);\n        return [annotateVar({\n          prim: 'option',\n          args: [instruction.args[0]]\n        }, '@unpacked'), ...stack.slice(1)];\n\n      case 'CONTRACT':\n        {\n          const s = args(0, ['address'])[0];\n          assertTypeAnnotationsValid(instruction.args[0]);\n          const ia = instructionAnn({\n            v: 1,\n            f: 1\n          });\n          const contract = s[refContract];\n\n          if (contract !== undefined) {\n            const ep = contractEntryPoint(contract, (_c = ia.f) === null || _c === void 0 ? void 0 : _c[0]);\n\n            if (ep === null) {\n              throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: contract has no entrypoint ${ep}`);\n            }\n\n            ensureTypesEqual(ep, instruction.args[0]);\n          }\n\n          return [annotate({\n            prim: 'option',\n            args: [{\n              prim: 'contract',\n              args: [instruction.args[0]]\n            }]\n          }, {\n            v: ia.v ? ia.v : varSuffix(argAnn(s), 'contract')\n          }), ...stack.slice(1)];\n        }\n\n      case 'CAST':\n        {\n          instructionAnn({});\n          const s = args(0, null)[0];\n          assertTypeAnnotationsValid(instruction.args[0]);\n          ensureTypesEqual(instruction.args[0], s);\n          return [instruction.args[0], ...stack.slice(1)];\n        }\n\n      case 'IF_NONE':\n        {\n          instructionAnn({});\n          const s = args(0, ['option'])[0];\n          const tail = stack.slice(1);\n          const br0 = functionTypeInternal(instruction.args[0], tail, ctx);\n          const br1 = functionTypeInternal(instruction.args[1], [annotate(s.args[0], {\n            t: null,\n            v: varSuffix(argAnn(s), 'some')\n          }), ...tail], ctx);\n          return branchType(br0, br1);\n        }\n\n      case 'IF_LEFT':\n        {\n          instructionAnn({});\n          const s = args(0, ['or'])[0];\n          const va = argAnn(s);\n          const lefta = argAnn(s.args[0]);\n          const righta = argAnn(s.args[1]);\n          const tail = stack.slice(1);\n          const br0 = functionTypeInternal(instruction.args[0], [annotate(s.args[0], {\n            t: null,\n            v: varSuffix(va, lefta.f ? lefta.f[0].slice(1) : 'left')\n          }), ...tail], ctx);\n          const br1 = functionTypeInternal(instruction.args[1], [annotate(s.args[1], {\n            t: null,\n            v: varSuffix(va, righta.f ? righta.f[0].slice(1) : 'right')\n          }), ...tail], ctx);\n          return branchType(br0, br1);\n        }\n\n      case 'IF_CONS':\n        {\n          instructionAnn({});\n          const s = args(0, ['list'])[0];\n          const va = argAnn(s);\n          const tail = stack.slice(1);\n          const br0 = functionTypeInternal(instruction.args[0], [annotate(s.args[0], {\n            t: null,\n            v: varSuffix(va, 'hd')\n          }), annotate(s, {\n            t: null,\n            v: varSuffix(va, 'tl')\n          }), ...tail], ctx);\n          const br1 = functionTypeInternal(instruction.args[1], tail, ctx);\n          return branchType(br0, br1);\n        }\n\n      case 'IF':\n        {\n          instructionAnn({});\n          args(0, ['bool']);\n          const tail = stack.slice(1);\n          const br0 = functionTypeInternal(instruction.args[0], tail, ctx);\n          const br1 = functionTypeInternal(instruction.args[1], tail, ctx);\n          return branchType(br0, br1);\n        }\n\n      case 'MAP':\n        {\n          const s = args(0, ['list', 'map', 'option'])[0];\n          const tail = stack.slice(1);\n          const elt = s.prim === 'map' ? {\n            prim: 'pair',\n            args: s.args\n          } : s.args[0];\n          const body = functionTypeInternal(instruction.args[0], [annotate(elt, {\n            t: null,\n            v: varSuffix(argAnn(s), 'elt')\n          }), ...tail], ctx);\n\n          if ('failed' in body) {\n            if (!('prim' in body.failed) || body.failed.prim !== 'never') {\n              throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: FAIL is not allowed in MAP`);\n            }\n\n            return {\n              failed: body.failed,\n              level: body.level + 1\n            };\n          }\n\n          if (body.length < 1) {\n            throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: function must return a value`);\n          }\n\n          ensureStacksEqual(body.slice(1), tail);\n          return s.prim === 'list' ? [annotateVar({\n            prim: 'list',\n            args: [body[0]]\n          }), ...tail] : s.prim === 'map' ? [annotateVar({\n            prim: 'map',\n            args: [s.args[0], body[0]]\n          }), ...tail] : [annotateVar({\n            prim: 'option',\n            args: [body[0]]\n          }), ...tail];\n        }\n\n      case 'ITER':\n        {\n          instructionAnn({});\n          const s = args(0, ['set', 'list', 'map'])[0];\n          const tail = stack.slice(1);\n          const elt = s.prim === 'map' ? {\n            prim: 'pair',\n            args: s.args\n          } : s.args[0];\n          const body = functionTypeInternal(instruction.args[0], [annotate(elt, {\n            t: null,\n            v: varSuffix(argAnn(s), 'elt')\n          }), ...tail], ctx);\n\n          if ('failed' in body) {\n            return {\n              failed: body.failed,\n              level: body.level + 1\n            };\n          }\n\n          ensureStacksEqual(body, tail);\n          return tail;\n        }\n\n      case 'LOOP':\n        {\n          instructionAnn({});\n          args(0, ['bool']);\n          const tail = stack.slice(1);\n          const body = functionTypeInternal(instruction.args[0], tail, ctx);\n\n          if ('failed' in body) {\n            return {\n              failed: body.failed,\n              level: body.level + 1\n            };\n          }\n\n          ensureStacksEqual(body, [{\n            prim: 'bool'\n          }, ...tail]);\n          return tail;\n        }\n\n      case 'LOOP_LEFT':\n        {\n          instructionAnn({});\n          const s = args(0, ['or'])[0];\n          const tail = stack.slice(1);\n          const body = functionTypeInternal(instruction.args[0], [annotate(s.args[0], {\n            t: null,\n            v: varSuffix(argAnn(s), 'left')\n          }), ...tail], ctx);\n\n          if ('failed' in body) {\n            return {\n              failed: body.failed,\n              level: body.level + 1\n            };\n          }\n\n          ensureStacksEqual(body, [s, ...tail]);\n          return [annotate(s.args[1], {\n            t: null,\n            v: instructionAnn({\n              v: 1\n            }).v\n          }), ...tail];\n        }\n\n      case 'DIP':\n        {\n          instructionAnn({});\n          const n = instruction.args.length === 2 ? parseInt(instruction.args[0].int, 10) : 1;\n          args(n - 1, null);\n          const head = stack.slice(0, n);\n          const tail = stack.slice(n); // ternary operator is a type guard so use it instead of just `instruction.args.length - 1`\n\n          const body = instruction.args.length === 2 ? functionTypeInternal(instruction.args[1], tail, ctx) : functionTypeInternal(instruction.args[0], tail, ctx);\n\n          if ('failed' in body) {\n            return {\n              failed: body.failed,\n              level: body.level + 1\n            };\n          }\n\n          return [...head, ...body];\n        }\n\n      case 'CREATE_CONTRACT':\n        {\n          const ia = instructionAnn({\n            v: 2\n          });\n          const s = args(0, ['option'], ['mutez'], null);\n\n          if (typeID(s[0].args[0]) !== 'key_hash') {\n            throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: key hash expected: ${typeID(s[0].args[0])}`);\n          }\n\n          if (ensureStorableType(s[2])) {\n            assertContractValid(instruction.args[0]);\n            assertScalarTypesEqual(contractSection(instruction.args[0], 'storage').args[0], s[2]);\n          }\n\n          const va = (_d = ia.v) === null || _d === void 0 ? void 0 : _d.map(v => v !== '@' ? [v] : undefined);\n          return [annotate({\n            prim: 'operation'\n          }, {\n            v: va === null || va === void 0 ? void 0 : va[0]\n          }), annotate({\n            prim: 'address',\n            [refContract]: {\n              prim: 'contract',\n              args: [contractSection(instruction.args[0], 'parameter').args[0]]\n            }\n          }, {\n            v: va === null || va === void 0 ? void 0 : va[1]\n          }), ...stack.slice(3)];\n        }\n\n      case 'PUSH':\n        assertTypeAnnotationsValid(instruction.args[0]);\n        assertDataValidInternal(instruction.args[1], instruction.args[0], Object.assign(Object.assign({}, ctx), {\n          contract: undefined\n        }));\n        return [annotateVar(instruction.args[0]), ...stack];\n\n      case 'EMPTY_SET':\n        assertTypeAnnotationsValid(instruction.args[0]);\n        ensureComparableType(instruction.args[0]);\n        return [annotate({\n          prim: 'set',\n          args: instruction.args\n        }, instructionAnn({\n          t: 1,\n          v: 1\n        })), ...stack];\n\n      case 'EMPTY_MAP':\n        assertTypeAnnotationsValid(instruction.args[0]);\n        ensureComparableType(instruction.args[0]);\n        assertTypeAnnotationsValid(instruction.args[1]);\n        return [annotate({\n          prim: 'map',\n          args: instruction.args\n        }, instructionAnn({\n          t: 1,\n          v: 1\n        })), ...stack];\n\n      case 'EMPTY_BIG_MAP':\n        assertTypeAnnotationsValid(instruction.args[0]);\n        ensureComparableType(instruction.args[0]);\n        assertTypeAnnotationsValid(instruction.args[1]);\n        ensureBigMapStorableType(instruction.args[0]);\n        return [annotate({\n          prim: 'big_map',\n          args: instruction.args\n        }, instructionAnn({\n          t: 1,\n          v: 1\n        })), ...stack];\n\n      case 'LAMBDA':\n        {\n          assertTypeAnnotationsValid(instruction.args[0]);\n          assertTypeAnnotationsValid(instruction.args[1]);\n          const body = functionTypeInternal(instruction.args[2], [instruction.args[0]], Object.assign(Object.assign({}, ctx), {\n            contract: undefined\n          }));\n\n          if ('failed' in body) {\n            return {\n              failed: body.failed,\n              level: body.level + 1\n            };\n          }\n\n          if (body.length !== 1) {\n            throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: function must return a value`);\n          }\n\n          ensureTypesEqual(instruction.args[1], body[0]);\n          return [annotateVar({\n            prim: 'lambda',\n            args: [instruction.args[0], instruction.args[1]]\n          }), ...stack];\n        }\n\n      case 'LEVEL':\n        return [annotateVar({\n          prim: 'nat'\n        }, '@level'), ...stack];\n\n      case 'TOTAL_VOTING_POWER':\n        return [annotateVar({\n          prim: 'nat'\n        }), ...stack];\n\n      case 'VOTING_POWER':\n        args(0, ['key_hash']);\n        return [annotateVar({\n          prim: 'nat'\n        }), ...stack.slice(1)];\n\n      case 'TICKET':\n        {\n          const s = args(0, null, ['nat'])[0];\n          ensureComparableType(s);\n          return [annotate({\n            prim: 'ticket',\n            args: [s]\n          }, instructionAnn({\n            t: 1,\n            v: 1\n          })), ...stack.slice(2)];\n        }\n\n      case 'JOIN_TICKETS':\n        {\n          const s = unpackComb('pair', args(0, ['pair'])[0]);\n\n          if (typeID(s.args[0]) !== 'ticket') {\n            throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: ticket expected: ${typeID(s.args[0])}`);\n          }\n\n          ensureTypesEqual(s.args[0], s.args[1]);\n          return [annotateVar({\n            prim: 'option',\n            args: [annotate(s.args[0], {\n              t: null\n            })]\n          }), ...stack.slice(1)];\n        }\n\n      case 'SPLIT_TICKET':\n        {\n          const s = args(0, ['ticket'], ['pair']);\n          const p = unpackComb('pair', s[1]);\n\n          if (typeID(p.args[0]) !== 'nat') {\n            throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: nat expected: ${typeID(p.args[0])}`);\n          }\n\n          ensureTypesEqual(p.args[0], p.args[1]);\n          return [annotateVar({\n            prim: 'option',\n            args: [{\n              prim: 'pair',\n              args: [annotate(s[0], {\n                t: null\n              }), annotate(s[0], {\n                t: null\n              })]\n            }]\n          }), ...stack.slice(2)];\n        }\n\n      case 'READ_TICKET':\n        {\n          const ia = instructionAnn({\n            v: 2\n          });\n          const s = args(0, ['ticket'])[0];\n          const va = (_e = ia.v) === null || _e === void 0 ? void 0 : _e.map(v => v !== '@' ? [v] : undefined);\n          return [annotate({\n            prim: 'pair',\n            args: [{\n              prim: 'address'\n            }, annotate(s.args[0], {\n              t: null\n            }), {\n              prim: 'nat'\n            }]\n          }, {\n            v: va === null || va === void 0 ? void 0 : va[0]\n          }), annotate(s, {\n            v: va === null || va === void 0 ? void 0 : va[1],\n            t: null\n          }), ...stack.slice(1)];\n        }\n\n      case 'PAIRING_CHECK':\n        {\n          const p = args(0, ['list'])[0].args[0];\n\n          if (!isPairType(p)) {\n            throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: pair expected: ${typeID(p)}`);\n          }\n\n          const c = unpackComb('pair', p);\n\n          if (typeID(c.args[0]) !== 'bls12_381_g1') {\n            throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: bls12_381_g1 expected: ${typeID(c.args[0])}`);\n          }\n\n          if (typeID(c.args[1]) !== 'bls12_381_g2') {\n            throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: bls12_381_g2 expected: ${typeID(c.args[1])}`);\n          }\n\n          return [annotateVar({\n            prim: 'bool'\n          }), ...stack.slice(1)];\n        }\n\n      case 'SAPLING_EMPTY_STATE':\n        return [annotate({\n          prim: 'sapling_state',\n          args: [instruction.args[0]]\n        }, instructionAnn({\n          v: 1,\n          t: 1\n        })), ...stack];\n\n      case 'SAPLING_VERIFY_UPDATE':\n        {\n          const s = args(0, ['sapling_transaction'], ['sapling_state']);\n\n          if (parseInt(s[0].args[0].int, 10) !== parseInt(s[1].args[0].int, 10)) {\n            throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: sapling memo size mismatch: ${s[0].args[0].int} != ${s[1].args[0].int}`);\n          }\n\n          return ProtoInferiorTo(proto, Protocol.PtJakarta) ? [annotateVar({\n            prim: 'option',\n            args: [{\n              prim: 'pair',\n              args: [{\n                prim: 'int'\n              }, annotate(s[1], {\n                t: null\n              })]\n            }]\n          }), ...stack.slice(2)] : [annotateVar({\n            prim: 'option',\n            args: [{\n              prim: 'pair',\n              args: [{\n                prim: 'bytes'\n              }, {\n                prim: 'pair',\n                args: [{\n                  prim: 'int'\n                }, annotate(s[1], {\n                  t: null\n                })]\n              }]\n            }]\n          }), ...stack.slice(2)];\n        }\n\n      case 'OPEN_CHEST':\n        args(0, ['chest_key'], ['chest'], ['nat']);\n        return [annotateVar({\n          prim: 'or',\n          args: [{\n            prim: 'bytes'\n          }, {\n            prim: 'bool'\n          }]\n        }), ...stack.slice(3)];\n\n      case 'VIEW':\n        {\n          const s = args(0, null, ['address']);\n          ensurePushableType(s[0]);\n          return [annotateVar({\n            prim: 'option',\n            args: [instruction.args[1]]\n          }), ...stack.slice(2)];\n        }\n\n      default:\n        throw new MichelsonError(instruction, `unexpected instruction: ${instruction.prim}`);\n    }\n  })(instruction);\n\n  if ((ctx === null || ctx === void 0 ? void 0 : ctx.traceCallback) !== undefined) {\n    const trace = {\n      op: instruction,\n      in: stack,\n      out: retStack\n    };\n    ctx.traceCallback(trace);\n  }\n\n  return retStack;\n}\n\nfunction contractSection(contract, section) {\n  for (const s of contract) {\n    if (s.prim === section) {\n      return s;\n    }\n  }\n\n  throw new MichelsonError(contract, `missing contract section: ${section}`);\n}\n\nfunction contractViews(contract) {\n  const views = {};\n\n  for (const s of contract) {\n    if (s.prim === 'view') {\n      views[s.args[0].string] = s;\n    }\n  }\n\n  return views;\n}\n\nfunction isContract(v) {\n  if (Array.isArray(v)) {\n    for (const s of v) {\n      if ('prim' in s && (s.prim === 'parameter' || s.prim === 'storage' || s.prim === 'code')) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction contractEntryPoint(src, ep) {\n  ep = ep || '%default';\n  const entryPoint = contractEntryPoints(src).find(x => x[0] === ep);\n\n  if (entryPoint !== undefined) {\n    return entryPoint[1];\n  } else if (ep === '%default') {\n    return isContract(src) ? contractSection(src, 'parameter').args[0] : src;\n  }\n\n  return null;\n}\n\nfunction isOrType(t) {\n  return Array.isArray(t) || t.prim === 'or';\n}\n\nfunction contractEntryPoints(src) {\n  if (isContract(src)) {\n    const param = contractSection(src, 'parameter');\n    const ch = contractEntryPoints(param.args[0]);\n    const a = unpackAnnotations(param);\n    return a.f ? [[a.f[0], param.args[0]], ...ch] : ch;\n  }\n\n  if (isOrType(src)) {\n    const args = typeArgs(src);\n\n    const getArg = n => {\n      const a = unpackAnnotations(args[n]);\n\n      if (typeID(args[n]) === 'or') {\n        const ch = contractEntryPoints(args[n]);\n        return a.f ? [[a.f[0], args[n]], ...ch] : ch;\n      }\n\n      return a.f ? [[a.f[0], args[n]]] : [];\n    };\n\n    return [...getArg(0), ...getArg(1)];\n  }\n\n  return [];\n} // Contract validation\n\n\nfunction assertContractValid(contract, ctx) {\n  const assertSection = (parameter, storage, ret, code) => {\n    assertTypeAnnotationsValid(parameter, true);\n    assertTypeAnnotationsValid(storage);\n    const arg = {\n      prim: 'pair',\n      args: [Object.assign(Object.assign({}, parameter), {\n        annots: ['@parameter']\n      }), Object.assign(Object.assign({}, storage), {\n        annots: ['@storage']\n      })]\n    };\n    const out = functionTypeInternal(code, [arg], Object.assign(Object.assign({}, ctx), {\n      contract\n    }));\n\n    if ('failed' in out) {\n      return out;\n    }\n\n    try {\n      assertStacksEqual(out, [ret]);\n    } catch (err) {\n      if (err instanceof MichelsonError) {\n        throw new MichelsonInstructionError(code, out, err.message);\n      } else {\n        throw err;\n      }\n    }\n\n    return out;\n  };\n\n  const parameter = contractSection(contract, 'parameter').args[0];\n  const storage = contractSection(contract, 'storage').args[0];\n  const code = contractSection(contract, 'code').args[0];\n  const expected = {\n    prim: 'pair',\n    args: [{\n      prim: 'list',\n      args: [{\n        prim: 'operation'\n      }]\n    }, storage]\n  };\n  const ret = assertSection(parameter, storage, expected, code);\n\n  for (const view of Object.values(contractViews(contract))) {\n    assertSection(view.args[1], storage, view.args[2], view.args[3]);\n  }\n\n  return ret;\n} // Exported wrapper functions\n\n\nfunction assertDataValid(d, t, ctx) {\n  assertTypeAnnotationsValid(t);\n  assertDataValidInternal(d, t, ctx || null);\n}\n\nfunction functionType(inst, stack, ctx) {\n  for (const t of stack) {\n    assertTypeAnnotationsValid(t);\n  }\n\n  if ((ctx === null || ctx === void 0 ? void 0 : ctx.contract) !== undefined) {\n    for (const typesec of ['parameter', 'storage']) {\n      const sec = contractSection(ctx.contract, typesec).args[0];\n      assertTypeAnnotationsValid(sec);\n    }\n  }\n\n  return functionTypeInternal(inst, stack, ctx || null);\n}\n\nfunction assertTypesEqual(a, b, field = false) {\n  if (Array.isArray(a)) {\n    // type guards don't work for parametrized generic types\n    for (const v of a) {\n      assertTypeAnnotationsValid(v);\n    }\n\n    for (const v of b) {\n      assertTypeAnnotationsValid(v);\n    }\n  } else {\n    assertTypeAnnotationsValid(a);\n    assertTypeAnnotationsValid(b);\n  }\n\n  assertScalarTypesEqual(a, b, field);\n}\n\nfunction isTypeAnnotationsValid(t, field = false) {\n  try {\n    assertTypeAnnotationsValid(t, field);\n    return true;\n  } catch (_a) {\n    return false;\n  }\n}\n\nfunction isContractValid(contract, ctx) {\n  try {\n    return assertContractValid(contract, ctx);\n  } catch (_a) {\n    return null;\n  }\n}\n\nfunction isDataValid(d, t, ctx) {\n  try {\n    assertDataValid(d, t, ctx);\n    return true;\n  } catch (_a) {\n    return false;\n  }\n}\n\nfunction isTypeEqual(a, b, field = false) {\n  try {\n    assertTypesEqual(a, b, field);\n    return true;\n  } catch (_a) {\n    return false;\n  }\n}\n\nclass Contract {\n  constructor(contract, opt) {\n    this.contract = contract;\n    this.ctx = Object.assign({\n      contract\n    }, opt);\n    this.output = assertContractValid(contract, this.ctx);\n  }\n\n  static parse(src, opt) {\n    const p = new Parser(opt);\n    const expr = typeof src === 'string' ? p.parseScript(src) : p.parseJSON(src);\n\n    if (expr === null) {\n      throw new InvalidContractError('empty contract');\n    }\n\n    if (assertMichelsonContract(expr)) {\n      return new Contract(expr, opt);\n    }\n  }\n\n  static parseTypeExpression(src, opt) {\n    const p = new Parser(opt);\n    const expr = typeof src === 'string' ? p.parseScript(src) : p.parseJSON(src);\n\n    if (expr === null) {\n      throw new InvalidTypeExpressionError('empty type expression');\n    }\n\n    if (assertMichelsonType(expr) && assertTypeAnnotationsValid(expr)) {\n      return expr;\n    }\n\n    throw undefined;\n  }\n\n  static parseDataExpression(src, opt) {\n    const p = new Parser(opt);\n    const expr = typeof src === 'string' ? p.parseScript(src) : p.parseJSON(src);\n\n    if (expr === null) {\n      throw new InvalidDataExpressionError('empty data expression');\n    }\n\n    if (assertMichelsonData(expr)) {\n      return expr;\n    }\n\n    throw undefined;\n  }\n\n  section(section) {\n    return contractSection(this.contract, section);\n  }\n\n  entryPoints() {\n    return contractEntryPoints(this.contract);\n  }\n\n  entryPoint(ep) {\n    return contractEntryPoint(this.contract, ep);\n  }\n\n  assertDataValid(d, t) {\n    assertDataValid(d, t, this.ctx);\n  }\n\n  isDataValid(d, t) {\n    return isDataValid(d, t, this.ctx);\n  }\n\n  assertParameterValid(ep, d) {\n    const t = this.entryPoint(ep || undefined);\n\n    if (t === null) {\n      throw new InvalidEntrypointError(ep === null || ep === void 0 ? void 0 : ep.toString());\n    }\n\n    this.assertDataValid(d, t);\n  }\n\n  isParameterValid(ep, d) {\n    try {\n      this.assertParameterValid(ep, d);\n      return true;\n    } catch (_a) {\n      return false;\n    }\n  }\n\n  functionType(inst, stack) {\n    return functionType(inst, stack, this.ctx);\n  }\n\n}\n\nconst dummyContract = new Contract([{\n  prim: 'parameter',\n  args: [{\n    prim: 'unit'\n  }]\n}, {\n  prim: 'storage',\n  args: [{\n    prim: 'unit'\n  }]\n}, {\n  prim: 'code',\n  args: [[{\n    prim: 'CAR'\n  }, {\n    prim: 'NIL',\n    args: [{\n      prim: 'operation'\n    }]\n  }, {\n    prim: 'PAIR'\n  }]]\n}]);\n\nfunction formatStack(s) {\n  if ('failed' in s) {\n    return `[FAILED: ${emitMicheline(s.failed)}]`;\n  }\n\n  return s.map((v, i) => {\n    const ann = unpackAnnotations(v);\n    return `[${i}${ann.v ? '/' + ann.v[0] : ''}]: ${emitMicheline(v)}`;\n  }).join('\\n');\n}\n\nfunction traceDumpFunc(blocks, cb) {\n  return v => {\n    var _a;\n\n    if (Array.isArray(v) && !blocks) {\n      return;\n    }\n\n    const macro = (_a = v.op[sourceReference]) === null || _a === void 0 ? void 0 : _a.macro;\n    const msg = `${macro ? 'Macro' : 'Op'}: ${macro ? emitMicheline(macro, undefined, true) + ' / ' : ''}${emitMicheline(v.op)}\nInput:\n${formatStack(v.in)}\nOutput:\n${formatStack(v.out)}\n`;\n    cb(msg);\n  };\n}\n\nfunction formatError(err) {\n  var _a;\n\n  if (err instanceof MichelsonInstructionError) {\n    const macro = (_a = err.val[sourceReference]) === null || _a === void 0 ? void 0 : _a.macro;\n    return `${macro ? 'Macro' : 'Op'}: ${macro ? emitMicheline(macro, undefined, true) + ' / ' : ''}${emitMicheline(err.val)}\nStack:\n${formatStack(err.stackState)}\n`;\n  } else if (err instanceof MichelsonTypeError) {\n    const type = Array.isArray(err.val) ? '[' + err.val.map((v, i) => `[${i}]: ${emitMicheline(v)}`).join('; ') + ']' : emitMicheline(err.val);\n    return `Type: ${type}\n${err.data ? `Data: ${emitMicheline(err.data)}\n` : ''}\n`;\n  } else {\n    return `Value: ${emitMicheline(err.val)}`;\n  }\n} // IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\n\n\nconst VERSION = {\n  \"commitHash\": \"cbdd0af87e400489076259d065e2d328feb8e1b4\",\n  \"version\": \"12.1.0\"\n};\nexport { Contract, DefaultProtocol, JSONParseError, MacroError, MichelineParseError, MichelsonError, MichelsonInstructionError, MichelsonTypeError, MichelsonValidationError, Parser, ProtoGreaterOfEqual, ProtoInferiorTo, Protocol, VERSION, assertContractValid, assertDataListIfAny, assertDataValid, assertMichelsonBigMapStorableType, assertMichelsonComparableType, assertMichelsonContract, assertMichelsonData, assertMichelsonInstruction, assertMichelsonPackableType, assertMichelsonPassableType, assertMichelsonPushableType, assertMichelsonStorableType, assertMichelsonType, assertTypeAnnotationsValid, assertTypesEqual, assertViewNameValid, contractEntryPoint, contractEntryPoints, contractSection, contractViews, decodeAddressBytes, decodePublicKeyBytes, decodePublicKeyHashBytes, dummyContract, emitMicheline, formatError, formatStack, functionType, instructionIDs, isContractValid, isDataValid, isInstruction, isMichelsonCode, isMichelsonData, isMichelsonError, isMichelsonScript, isMichelsonType, isTypeAnnotationsValid, isTypeEqual, packData, packDataBytes, refContract, sourceReference, traceDumpFunc, unpackData, unpackDataBytes };","map":{"version":3,"mappings":"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","names":["sourceReference","Symbol","ScanError","Error","constructor","src","idx","message","Object","setPrototypeOf","prototype","Literal","isSpace","RegExp","isIdentStart","isIdent","isDigit","isHex","scan","scanComments","i","length","test","s","start","t","Ident","v","slice","first","last","substr","Bytes","ii","Number","esc","String","Comment","refContract","Protocol","DefaultProtocol","Psithaca2","protoLevel","Ps9mPmXaRzmzk35gbAYNCAw6UXdE2qoABTHbN2oEEc1qM7CwT9P","PtCJ7pwoxe8JasnHY8YonnLYjcVHmhiARPJvqcC6VfHT5s8k8sY","PsYLVpVvgbLhAhoqAkMFUo6gudkJ9weNXhUYCiLDzcUpFpkk8Wt","PsddFKi32cMJ2qPjf43Qv5GDWLDPZb3T3bF6fLKiF5HtvHNU7aP","Pt24m4xiPbLDhVgVfABUjirbmda3yohdN82Sp9FeuAXJ4eV9otd","PsBABY5HQTSkA4297zNHfsZNKtxULfL18y95qb3m53QJiXGmrbU","PsBabyM1eUXZseaJdmXFApDSBqj8YBfwELoxZHHW77EMcAbbwAS","PsCARTHAGazKbHtnKfLzQg3kms52kSRpgnDY982a9oYsSXRLQEb","PsDELPH1Kxsxt8f9eWbxQeRxkjfbxoqM52jvs5Y5fBxWWh4ifpo","PtEdoTezd3RHSC31mpxxo1npxFjoWWcFgQtxapi51Z8TLu6v6Uq","PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA","PsFLorenaUUuikDWvMDr6fGBRG8kt3e3D3fHoXK1j1BFRxeSH4i","PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV","PtHangzHogokSuiMHemCuowEavgYTP8J5qQ9fQS793MHYFpCY3r","PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx","PsiThaCaT47Zboaw71QWScM8sXeMM7bbQFncK9FLqYc6EKdpjVP","Psithaca2MLRFYargivpo7YvUr7wUDqyxrdhC5CQq78mRvimz6A","PtJakartaiDz69SfDDLXJSiuZqTSeSKRDbKVZC8MNzJnvRjvnGw","ProtoALphaALphaALphaALphaALphaALphaALphaALphaDdp3zK","ProtoGreaterOfEqual","a","b","ProtoInferiorTo","MacroError","prim","assertArgs","ex","n","args","undefined","_a","_b","assertNoAnnots","annots","assertIntArg","arg","parsePairUnpairExpr","p","expr","annotations","agg","ai","ann","lexpr","c","r","an","rexpr","map","parseSetMapCadr","vann","term","d","trimLast","l","filterAnnotations","fields","rest","push","mkPrim","pairRe","unpairRe","cadrRe","setCadrRe","mapCadrRe","diipRe","duupRe","expandMacros","opt","proto","protocol","mayRename","parseInt","int","top","leaf","PtEdo2Zk","ch","expandGlobalConstants","hashAndValue","string","MichelineParseError","token","JSONParseError","node","errEOF","isAnnotation","tok","intRe","bytesRe","Parser","expand","expandGlobalConstant","ret","globalConstant","_c","macro","parseListExpr","scanner","ref","expectBracket","next","done","value","parseExpr","parseArgs","parseSequenceExpr","seq","itm","JSON","parse","bytes","parseSequence","TypeError","parseList","parseMichelineExpression","parseScript","parseData","parseJSON","Array","isArray","Formatter","lev","indent","lf","newline","lfsp","down","hasArgs","isMultiline","emitExpr","f","foldMacros","emitSeq","stringify","multiline","el","emitMicheline","H","K","Base58DecodingError","InvalidMessageError","sha256","msg","pad","buffer","fill","ror","x","h","w","offset","q","s0","s1","b0","b1","t1","t2","digest","base58alphabetFwd","base58alphabetBwd","byteAt","charCodeAt","decodeBase58","acc","zeros","carry","m","Math","floor","reverse","encodeBase58","fromCharCode","decodeBase58Check","data","sum","computed","encodeBase58Check","InvalidContractError","InvalidTypeExpressionError","InvalidDataExpressionError","InvalidEntrypointError","entrypoint","TezosIdEncodeError","LongIntegerError","HexParseError","hexByte","MichelsonError","val","isMichelsonError","err","MichelsonTypeError","LongInteger","neg","append","buf","cmp","sign","parseBytes","isNaN","isDecimal","isNatural","annRe","unpackAnnotations","field","type","vars","specialVar","specialFields","emptyFields","emptyVar","tezosPrefix","BlockHash","OperationHash","OperationListHash","OperationListListHash","ProtocolHash","ContextHash","ED25519PublicKeyHash","SECP256K1PublicKeyHash","P256PublicKeyHash","ContractHash","CryptoboxPublicKeyHash","ED25519Seed","ED25519PublicKey","SECP256K1SecretKey","P256SecretKey","ED25519EncryptedSeed","SECP256K1EncryptedSecretKey","P256EncryptedSecretKey","SECP256K1PublicKey","P256PublicKey","SECP256K1Scalar","SECP256K1Element","ED25519SecretKey","ED25519Signature","SECP256K1Signature","P256Signature","GenericSignature","ChainID","checkDecodeTezosID","id","types","plen","encodeTezosID","unpackComb","vv","isPairType","isPairData","rfc3339Re","parseDate","Date","valueOf","parseHex","res","ss","hexBytes","toString","join","maxViewNameLength","noArgInstructionIDs","ABS","ADD","ADDRESS","AMOUNT","AND","APPLY","BALANCE","BLAKE2B","CAR","CDR","CHAIN_ID","CHECK_SIGNATURE","COMPARE","CONCAT","CONS","EDIV","EQ","EXEC","FAILWITH","GE","GET_AND_UPDATE","GT","HASH_KEY","IMPLICIT_ACCOUNT","INT","ISNAT","JOIN_TICKETS","KECCAK","LE","LEVEL","LSL","LSR","LT","MEM","MUL","NEG","NEQ","NEVER","NOT","NOW","OR","PACK","PAIRING_CHECK","READ_TICKET","SAPLING_VERIFY_UPDATE","SELF","SELF_ADDRESS","SENDER","SET_DELEGATE","SHA256","SHA3","SHA512","SIZE","SLICE","SOME","SOURCE","SPLIT_TICKET","SUB","SWAP","TICKET","TOTAL_VOTING_POWER","TRANSFER_TOKENS","UNIT","VOTING_POWER","XOR","RENAME","OPEN_CHEST","SUB_MUTEZ","instructionIDs","assign","CONTRACT","CREATE_CONTRACT","DIG","DIP","DROP","DUG","DUP","EMPTY_BIG_MAP","EMPTY_MAP","EMPTY_SET","GET","IF","IF_CONS","IF_LEFT","IF_NONE","ITER","LAMBDA","LEFT","LOOP","LOOP_LEFT","MAP","NIL","NONE","PAIR","PUSH","RIGHT","SAPLING_EMPTY_STATE","UNPACK","UNPAIR","UPDATE","CAST","VIEW","simpleComparableTypeIDs","unit","never","bool","nat","chain_id","mutez","key_hash","key","signature","timestamp","address","typeIDs","or","pair","set","big_map","contract","lambda","list","operation","option","bls12_381_g1","bls12_381_g2","bls12_381_fr","sapling_transaction","sapling_state","ticket","chest_key","chest","MichelsonValidationError","isPrim","isPrimOrSeq","assertPrim","assertSeq","assertPrimOrSeq","assertNatural","assertIntLiteral","assertStringLiteral","assertMichelsonInstruction","hasOwnProperty","call","assertMichelsonType","assertMichelsonPackableType","assertMichelsonPassableType","assertMichelsonContract","assertMichelsonPushableType","assertMichelsonData","assertMichelsonComparableType","assertMichelsonBigMapStorableType","assertViewNameValid","traverseType","assertMichelsonStorableType","viewRe","name","cb","forEach","mapElts","toplevelSec","views","sec","isMichelsonScript","isMichelsonData","isMichelsonCode","isMichelsonType","isInstruction","assertDataListIfAny","primitives","primTags","Tag","Writer","writeBytes","writeUint8","writeUint16","writeUint32","writeInt8","writeInt16","writeInt32","boundsErr","Reader","cap","readBytes","len","reader","copy","readUint8","readUint16","x0","x1","readUint32","x2","x3","readInt8","readInt16","readInt32","ContractID","PublicKeyHashID","readPublicKeyHash","rd","tag","ED25519","SECP256K1","P256","hash","readAddress","Implicit","Originated","dec","TextDecoder","entryPoint","decode","Uint8Array","writePublicKeyHash","from","writeAddress","enc","TextEncoder","encode","PublicKeyID","readPublicKey","ln","publicKey","writePublicKey","pk","writeExpr","wr","tf","e","Sequence","Int","BigInt","bits","byte","Prim0","Prim","readExpr","passThrough","readPassThrough","tr","hex","savedrd","it","argn","split","isOrData","isOptionData","getWriteTransformFunc","tc","dc","dd","_v","_elt","elt","iterator","sig","pkh","getTime","writePassThrough","isPushInstruction","packData","packDataBytes","getReadTransformFuncs","addr","date","toISOString","unpackData","unpackDataBytes","decodeAddressBytes","decodePublicKeyHashBytes","decodePublicKeyBytes","MichelsonInstructionError","stackState","typeID","typeArgs","assertScalarTypesEqual","aArgs","bArgs","assertStacksEqual","assertTypeAnnotationsValid","isFunction","assertDataValidInternal","ctx","ep","indexOf","functionTypeInternal","failed","instructionListType","inst","stack","op","ft","level","traceCallback","trace","in","out","instruction","typeIds","ids","rethrow","fn","rethrowTypeGuard","argAnn","ensureStacksEqual","ensureTypesEqual","ensureComparableType","ensurePackableType","ensureStorableType","ensurePushableType","ensureBigMapStorableType","instructionAnn","num","assertNum","annotate","tt","tx","annotateVar","def","ia","annotateField","insAnn","defField","fieldAnn","insFieldAnn","insVarAnn","varAnn","_d","getN","right","getNth","updateNth","varSuffix","suffix","branchType","br0","br1","retStack","trim","lastIndexOf","retArgs","va","toLocaleLowerCase","pt","PsiThaCa","contractEntryPoint","contractSection","children","tail","lefta","righta","body","head","assertContractValid","_e","PtJakarta","section","contractViews","isContract","contractEntryPoints","find","isOrType","param","getArg","assertSection","parameter","storage","code","expected","view","values","assertDataValid","functionType","typesec","assertTypesEqual","isTypeAnnotationsValid","isContractValid","isDataValid","isTypeEqual","Contract","output","parseTypeExpression","parseDataExpression","entryPoints","assertParameterValid","isParameterValid","dummyContract","formatStack","traceDumpFunc","blocks","formatError","VERSION"],"sources":["../src/micheline.ts","../src/scan.ts","../src/michelson-types.ts","../src/macros.ts","../src/global-constants.ts","../src/micheline-parser.ts","../src/micheline-emitter.ts","../src/base58.ts","../src/error.ts","../src/utils.ts","../src/michelson-validator.ts","../src/binary.ts","../src/michelson-typecheck.ts","../src/michelson-contract.ts","../src/formatters.ts","../src/version.ts"],"sourcesContent":["// Michelson abstract syntax tree types https://tezos.gitlab.io/whitedoc/michelson.html#concrete-syntax\n\nexport type SourceReference = {\n  first: number;\n  last: number;\n  macro?: Expr;\n  globalConstant?: Expr;\n};\n\nexport const sourceReference: unique symbol = Symbol('source_reference');\n\nexport interface Node {\n  [sourceReference]?: SourceReference;\n}\n\n/**\n * An AST node representing Michelson string literal.\n */\nexport interface StringLiteral extends Node {\n  string: string;\n}\n\n/**\n * An AST node representing Michelson int literal.\n */\nexport interface IntLiteral<T extends string = string> extends Node {\n  int: T;\n}\n\n/**\n * An AST node representing Michelson bytes literal.\n */\nexport interface BytesLiteral extends Node {\n  bytes: string;\n}\n\n/**\n * An AST node representing Michelson primitive.\n */\nexport interface Prim<PT extends string = string, AT extends Expr[] = Expr[]> extends Node {\n  prim: PT;\n  args?: AT;\n  annots?: string[];\n}\n\nexport type List<T extends Expr> = T[] & Node;\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface ExprList extends List<Expr> {}\n\n/**\n * An AST node representing valid Michelson expression. Directly corresponds to JSON-encoded Michelson node\n */\n\nexport type Expr = Prim | StringLiteral | IntLiteral | BytesLiteral | ExprList;\n","/**\n *  @category Error\n *  @description Error that indicates a failure when performing the scan step when parsing Michelson\n */\nexport class ScanError extends Error {\n  constructor(public src: string, public idx: number, message?: string) {\n    super(message);\n    Object.setPrototypeOf(this, ScanError.prototype);\n  }\n}\n\nexport enum Literal {\n  Comment,\n  Number,\n  String,\n  Bytes,\n  Ident,\n}\n\nexport type TokenType = '(' | ')' | '{' | '}' | ';' | Literal;\n\nconst isSpace = new RegExp('\\\\s');\nconst isIdentStart = new RegExp('[:@%_A-Za-z]');\nconst isIdent = new RegExp('[@%_\\\\.A-Za-z0-9]');\nconst isDigit = new RegExp('[0-9]');\nconst isHex = new RegExp('[0-9a-fA-F]');\n\nexport interface Token {\n  t: TokenType;\n  v: string;\n  first: number;\n  last: number;\n}\n\nexport function* scan(src: string, scanComments = false): Generator<Token, void> {\n  let i = 0;\n  while (i < src.length) {\n    // Skip space\n    while (i < src.length && isSpace.test(src[i])) {\n      i++;\n    }\n    if (i === src.length) {\n      return;\n    }\n\n    const s = src[i];\n    const start = i;\n    if (isIdentStart.test(s)) {\n      // Identifier\n      i++;\n      while (i < src.length && isIdent.test(src[i])) {\n        i++;\n      }\n      yield { t: Literal.Ident, v: src.slice(start, i), first: start, last: i };\n    } else if (src.length - i > 1 && src.substr(i, 2) === '0x') {\n      // Bytes\n      i += 2;\n      while (i < src.length && isHex.test(src[i])) {\n        i++;\n      }\n      if (((i - start) & 1) !== 0) {\n        throw new ScanError(src, i, 'Bytes literal length is expected to be power of two');\n      }\n      yield { t: Literal.Bytes, v: src.slice(start, i), first: start, last: i };\n    } else if (isDigit.test(s) || s === '-') {\n      // Number\n      if (s === '-') {\n        i++;\n      }\n      const ii = i;\n      while (i < src.length && isDigit.test(src[i])) {\n        i++;\n      }\n      if (ii === i) {\n        throw new ScanError(src, i, 'Number literal is too short');\n      }\n      yield { t: Literal.Number, v: src.slice(start, i), first: start, last: i };\n    } else if (s === '\"') {\n      // String\n      i++;\n      let esc = false;\n      for (; i < src.length && (esc || src[i] !== '\"'); i++) {\n        if (!esc && src[i] === '\\\\') {\n          esc = true;\n        } else {\n          esc = false;\n        }\n      }\n      if (i === src.length) {\n        throw new ScanError(src, i, 'Unterminated string literal');\n      }\n      i++;\n      yield { t: Literal.String, v: src.slice(start, i), first: start, last: i };\n    } else if (s === '#') {\n      // Comment\n      i++;\n      while (i < src.length && src[i] !== '\\n') {\n        i++;\n      }\n      if (scanComments) {\n        yield { t: Literal.Comment, v: src.slice(start, i), first: start, last: i };\n      }\n    } else if (src.length - i > 1 && src.substr(i, 2) === '/*') {\n      // C style comment\n      i += 2;\n      while (i < src.length && !(src.length - i > 1 && src.substr(i, 2) === '*/')) {\n        i++;\n      }\n      if (i === src.length) {\n        throw new ScanError(src, i, 'Unterminated C style comment');\n      }\n      i += 2;\n      if (scanComments) {\n        yield { t: Literal.Comment, v: src.slice(start, i), first: start, last: i };\n      }\n    } else if (s === '(' || s === ')' || s === '{' || s === '}' || s === ';') {\n      i++;\n      yield { t: s, v: s, first: start, last: i };\n    } else {\n      throw new ScanError(src, i, `Invalid character at offset ${i}: \\`${s}'`);\n    }\n  }\n}\n","/* eslint-disable @typescript-eslint/no-empty-interface */\nimport { Prim, Expr, IntLiteral, StringLiteral, BytesLiteral, List, Node } from './micheline';\n\ninterface Prim0<PT extends string = string> extends Prim<PT> {\n  args?: never;\n}\ninterface PrimX<PT extends string = string, AT extends Expr[] = Expr[]> extends Prim<PT, AT> {\n  args: AT;\n}\n\n// Instructions\ntype MichelsonNoArgInstructionID =\n  | 'ABS'\n  | 'ADD'\n  | 'ADDRESS'\n  | 'AMOUNT'\n  | 'AND'\n  | 'APPLY'\n  | 'BALANCE'\n  | 'BLAKE2B'\n  | 'CAR'\n  | 'CDR'\n  | 'CHAIN_ID'\n  | 'CHECK_SIGNATURE'\n  | 'COMPARE'\n  | 'CONCAT'\n  | 'CONS'\n  | 'EDIV'\n  | 'EQ'\n  | 'EXEC'\n  | 'FAILWITH'\n  | 'GE'\n  | 'GET_AND_UPDATE'\n  | 'GT'\n  | 'HASH_KEY'\n  | 'IMPLICIT_ACCOUNT'\n  | 'INT'\n  | 'ISNAT'\n  | 'JOIN_TICKETS'\n  | 'KECCAK'\n  | 'LE'\n  | 'LEVEL'\n  | 'LSL'\n  | 'LSR'\n  | 'LT'\n  | 'MEM'\n  | 'MUL'\n  | 'NEG'\n  | 'NEQ'\n  | 'NEVER'\n  | 'NOT'\n  | 'NOW'\n  | 'OR'\n  | 'PACK'\n  | 'PAIRING_CHECK'\n  | 'READ_TICKET'\n  | 'SAPLING_VERIFY_UPDATE'\n  | 'SELF'\n  | 'SELF_ADDRESS'\n  | 'SENDER'\n  | 'SET_DELEGATE'\n  | 'SHA256'\n  | 'SHA3'\n  | 'SHA512'\n  | 'SIZE'\n  | 'SLICE'\n  | 'SOME'\n  | 'SOURCE'\n  | 'SPLIT_TICKET'\n  | 'SUB'\n  | 'SUB_MUTEZ'\n  | 'SWAP'\n  | 'TICKET'\n  | 'TOTAL_VOTING_POWER'\n  | 'TRANSFER_TOKENS'\n  | 'UNIT'\n  | 'VOTING_POWER'\n  | 'XOR'\n  | 'RENAME'\n  | 'OPEN_CHEST';\n\ntype MichelsonRegularInstructionID =\n  | 'CONTRACT'\n  | 'CREATE_CONTRACT'\n  | 'DIG'\n  | 'DIP'\n  | 'DROP'\n  | 'DUG'\n  | 'DUP'\n  | 'EMPTY_BIG_MAP'\n  | 'EMPTY_MAP'\n  | 'EMPTY_SET'\n  | 'GET'\n  | 'IF'\n  | 'IF_CONS'\n  | 'IF_LEFT'\n  | 'IF_NONE'\n  | 'ITER'\n  | 'LAMBDA'\n  | 'LEFT'\n  | 'LOOP'\n  | 'LOOP_LEFT'\n  | 'MAP'\n  | 'NIL'\n  | 'NONE'\n  | 'PAIR'\n  | 'PUSH'\n  | 'RIGHT'\n  | 'SAPLING_EMPTY_STATE'\n  | 'UNPACK'\n  | 'UNPAIR'\n  | 'UPDATE'\n  | 'CAST'\n  | 'VIEW'\n  // legacy\n  | 'CREATE_ACCOUNT'\n  | 'STEPS_TO_QUOTA';\n\nexport type MichelsonInstructionID = MichelsonNoArgInstructionID | MichelsonRegularInstructionID;\ntype InstrPrim<PT extends MichelsonInstructionID, AT extends Expr[]> = Prim<PT, AT>;\ntype Instr0<PT extends MichelsonNoArgInstructionID> = Prim0<PT>;\ntype InstrX<PT extends MichelsonRegularInstructionID, AT extends Expr[]> = PrimX<PT, AT>;\n\nexport type MichelsonCode = InstructionList | MichelsonInstruction;\nexport interface InstructionList extends List<MichelsonCode> {}\n\nexport type MichelsonNoArgInstruction = Instr0<MichelsonNoArgInstructionID>;\nexport type MichelsonInstruction =\n  | MichelsonNoArgInstruction\n  | InstrX<'DIG' | 'DUG' | 'SAPLING_EMPTY_STATE', [IntLiteral]>\n  | InstrX<'NONE' | 'LEFT' | 'RIGHT' | 'NIL' | 'CAST', [MichelsonType]>\n  | InstrX<'IF_NONE' | 'IF_LEFT' | 'IF_CONS' | 'IF', [InstructionList, InstructionList]>\n  | InstrX<'MAP' | 'ITER' | 'LOOP' | 'LOOP_LEFT' | 'DIP', [InstructionList]>\n  | InstrX<'UNPACK', [MichelsonType]>\n  | InstrX<'CONTRACT', [MichelsonType]>\n  | InstrX<'CREATE_CONTRACT', [MichelsonContract]>\n  | InstrX<'PUSH', [MichelsonType, MichelsonData]>\n  | InstrX<'EMPTY_SET', [MichelsonType]>\n  | InstrX<'EMPTY_MAP', [MichelsonType, MichelsonType]>\n  | InstrX<'EMPTY_BIG_MAP', [MichelsonType, MichelsonType]>\n  | InstrX<'LAMBDA', [MichelsonType, MichelsonType, InstructionList]>\n  | InstrX<'DIP', [IntLiteral, InstructionList] | [InstructionList]>\n  | InstrX<'VIEW', [StringLiteral, MichelsonType]>\n  | InstrPrim<'DROP' | 'PAIR' | 'UNPAIR' | 'DUP' | 'GET' | 'UPDATE', [IntLiteral]>;\n\n// Types\n\nexport type MichelsonSimpleComparableTypeID =\n  | 'string'\n  | 'nat'\n  | 'int'\n  | 'bytes'\n  | 'bool'\n  | 'mutez'\n  | 'key_hash'\n  | 'address'\n  | 'timestamp'\n  | 'never'\n  | 'key'\n  | 'unit'\n  | 'signature'\n  | 'chain_id';\n\nexport type MichelsonTypeID =\n  | MichelsonSimpleComparableTypeID\n  | 'option'\n  | 'list'\n  | 'set'\n  | 'contract'\n  | 'operation'\n  | 'pair'\n  | 'or'\n  | 'lambda'\n  | 'map'\n  | 'big_map'\n  | 'sapling_transaction'\n  | 'sapling_state'\n  | 'ticket'\n  | 'bls12_381_g1'\n  | 'bls12_381_g2'\n  | 'bls12_381_fr'\n  | 'chest_key'\n  | 'chest';\n\ntype Type0<PT extends MichelsonTypeID> = Prim0<PT>;\ntype TypeX<PT extends MichelsonTypeID, AT extends Expr[]> = PrimX<PT, AT>;\n\n// Michelson types\n\nexport const refContract: unique symbol = Symbol('ref_contract');\nexport interface MichelsonTypeAddress extends Type0<'address'> {\n  [refContract]?: MichelsonTypeContract<MichelsonType>;\n}\n\nexport type MichelsonTypeInt = Type0<'int'>;\nexport type MichelsonTypeNat = Type0<'nat'>;\nexport type MichelsonTypeString = Type0<'string'>;\nexport type MichelsonTypeBytes = Type0<'bytes'>;\nexport type MichelsonTypeMutez = Type0<'mutez'>;\nexport type MichelsonTypeBool = Type0<'bool'>;\nexport type MichelsonTypeKeyHash = Type0<'key_hash'>;\nexport type MichelsonTypeTimestamp = Type0<'timestamp'>;\nexport type MichelsonTypeKey = Type0<'key'>;\nexport type MichelsonTypeUnit = Type0<'unit'>;\nexport type MichelsonTypeSignature = Type0<'signature'>;\nexport type MichelsonTypeOperation = Type0<'operation'>;\nexport type MichelsonTypeChainID = Type0<'chain_id'>;\nexport type MichelsonTypeNever = Type0<'never'>;\nexport type MichelsonTypeBLS12_381_G1 = Type0<'bls12_381_g1'>;\nexport type MichelsonTypeBLS12_381_G2 = Type0<'bls12_381_g2'>;\nexport type MichelsonTypeBLS12_381_FR = Type0<'bls12_381_fr'>;\nexport type MichelsonTypeChestKey = Type0<'chest_key'>;\nexport type MichelsonTypeChest = Type0<'chest'>;\n\ntype TypeList<T extends MichelsonType[]> = T & Node;\nexport type MichelsonTypePair<T extends MichelsonType[]> = TypeX<'pair', T> | TypeList<T>;\n\nexport interface MichelsonTypeOption<T extends MichelsonType> extends TypeX<'option', [T]> {}\nexport interface MichelsonTypeList<T extends MichelsonType> extends TypeX<'list', [T]> {}\nexport interface MichelsonTypeContract<T extends MichelsonType> extends TypeX<'contract', [T]> {}\nexport interface MichelsonTypeOr<T extends [MichelsonType, MichelsonType]> extends TypeX<'or', T> {}\nexport interface MichelsonTypeLambda<Arg extends MichelsonType, Ret extends MichelsonType>\n  extends TypeX<'lambda', [Arg, Ret]> {}\nexport interface MichelsonTypeSet<T extends MichelsonType> extends TypeX<'set', [T]> {}\nexport interface MichelsonTypeMap<K extends MichelsonType, V extends MichelsonType>\n  extends TypeX<'map', [K, V]> {}\nexport interface MichelsonTypeBigMap<K extends MichelsonType, V extends MichelsonType>\n  extends TypeX<'big_map', [K, V]> {}\nexport interface MichelsonTypeSaplingState<S extends string = string>\n  extends TypeX<'sapling_state', [IntLiteral<S>]> {}\nexport interface MichelsonTypeSaplingTransaction<S extends string = string>\n  extends TypeX<'sapling_transaction', [IntLiteral<S>]> {}\nexport interface MichelsonTypeTicket<T extends MichelsonType> extends TypeX<'ticket', [T]> {}\n\nexport type MichelsonType<T extends MichelsonTypeID = MichelsonTypeID> = T extends 'int'\n  ? MichelsonTypeInt\n  : T extends 'nat'\n  ? MichelsonTypeNat\n  : T extends 'string'\n  ? MichelsonTypeString\n  : T extends 'bytes'\n  ? MichelsonTypeBytes\n  : T extends 'mutez'\n  ? MichelsonTypeMutez\n  : T extends 'bool'\n  ? MichelsonTypeBool\n  : T extends 'key_hash'\n  ? MichelsonTypeKeyHash\n  : T extends 'timestamp'\n  ? MichelsonTypeTimestamp\n  : T extends 'address'\n  ? MichelsonTypeAddress\n  : T extends 'key'\n  ? MichelsonTypeKey\n  : T extends 'unit'\n  ? MichelsonTypeUnit\n  : T extends 'signature'\n  ? MichelsonTypeSignature\n  : T extends 'operation'\n  ? MichelsonTypeOperation\n  : T extends 'chain_id'\n  ? MichelsonTypeChainID\n  : T extends 'option'\n  ? MichelsonTypeOption<MichelsonType>\n  : T extends 'list'\n  ? MichelsonTypeList<MichelsonType>\n  : T extends 'contract'\n  ? MichelsonTypeContract<MichelsonType>\n  : T extends 'ticket'\n  ? MichelsonTypeTicket<MichelsonType>\n  : T extends 'pair'\n  ? MichelsonTypePair<MichelsonType[]>\n  : T extends 'or'\n  ? MichelsonTypeOr<[MichelsonType, MichelsonType]>\n  : T extends 'lambda'\n  ? MichelsonTypeLambda<MichelsonType, MichelsonType>\n  : T extends 'set'\n  ? MichelsonTypeSet<MichelsonType>\n  : T extends 'map'\n  ? MichelsonTypeMap<MichelsonType, MichelsonType>\n  : T extends 'big_map'\n  ? MichelsonTypeBigMap<MichelsonType, MichelsonType>\n  : T extends 'never'\n  ? MichelsonTypeNever\n  : T extends 'bls12_381_g1'\n  ? MichelsonTypeBLS12_381_G1\n  : T extends 'bls12_381_g2'\n  ? MichelsonTypeBLS12_381_G2\n  : T extends 'bls12_381_fr'\n  ? MichelsonTypeBLS12_381_FR\n  : T extends 'sapling_transaction'\n  ? MichelsonTypeSaplingTransaction\n  : T extends 'sapling_state'\n  ? MichelsonTypeSaplingState\n  : T extends 'chest_key'\n  ? MichelsonTypeChestKey\n  : MichelsonTypeChest;\n\n// Data\n\nexport type MichelsonDataID =\n  | 'Unit'\n  | 'True'\n  | 'False'\n  | 'None'\n  | 'Pair'\n  | 'Left'\n  | 'Right'\n  | 'Some';\n\ntype Data0<PT extends MichelsonDataID> = Prim0<PT>;\ntype DataX<PT extends MichelsonDataID, AT extends MichelsonData[]> = PrimX<PT, AT>;\n\nexport type MichelsonDataOption = DataX<'Some', [MichelsonData]> | Data0<'None'>;\nexport type MichelsonDataOr = DataX<'Left' | 'Right', [MichelsonData]>;\ntype DataList<T extends MichelsonData[]> = T & Node;\nexport type MichelsonDataPair<T extends MichelsonData[]> = DataX<'Pair', T> | DataList<T>;\nexport type MichelsonMapElt = PrimX<'Elt', [MichelsonData, MichelsonData]>;\nexport type MichelsonMapEltList = List<MichelsonMapElt>;\n\nexport type MichelsonData =\n  | IntLiteral\n  | StringLiteral\n  | BytesLiteral\n  | Data0<'Unit' | 'True' | 'False'>\n  | MichelsonDataOption\n  | MichelsonDataOr\n  | DataList<MichelsonData[]>\n  | MichelsonDataPair<MichelsonData[]>\n  | InstructionList\n  | MichelsonMapEltList;\n\n// Top level script sections\n\nexport type MichelsonSectionID = 'parameter' | 'storage' | 'code' | 'view';\ntype SectionPrim<PT extends MichelsonSectionID, AT extends Expr[]> = PrimX<PT, AT>;\n\nexport type MichelsonContractParameter = SectionPrim<'parameter', [MichelsonType]>;\nexport type MichelsonContractStorage = SectionPrim<'storage', [MichelsonType]>;\nexport type MichelsonContractCode = SectionPrim<'code', [InstructionList]>;\nexport type MichelsonContractView = SectionPrim<\n  'view',\n  [StringLiteral, MichelsonType, MichelsonType, InstructionList]\n>;\n\nexport type MichelsonContract = MichelsonContractSection[];\n\nexport type MichelsonContractSection<T extends MichelsonSectionID = MichelsonSectionID> =\n  T extends 'parameter'\n    ? MichelsonContractParameter\n    : T extends 'storage'\n    ? MichelsonContractStorage\n    : T extends 'view'\n    ? MichelsonContractView\n    : MichelsonContractCode;\n\n// Code analysis types\nexport interface MichelsonTypeFailed {\n  failed: MichelsonType;\n  level: number;\n}\n\nexport type MichelsonReturnType = MichelsonType[] | MichelsonTypeFailed;\n\nexport enum Protocol {\n  Ps9mPmXa = 'Ps9mPmXaRzmzk35gbAYNCAw6UXdE2qoABTHbN2oEEc1qM7CwT9P',\n  PtCJ7pwo = 'PtCJ7pwoxe8JasnHY8YonnLYjcVHmhiARPJvqcC6VfHT5s8k8sY',\n  PsYLVpVv = 'PsYLVpVvgbLhAhoqAkMFUo6gudkJ9weNXhUYCiLDzcUpFpkk8Wt',\n  PsddFKi3 = 'PsddFKi32cMJ2qPjf43Qv5GDWLDPZb3T3bF6fLKiF5HtvHNU7aP',\n  Pt24m4xi = 'Pt24m4xiPbLDhVgVfABUjirbmda3yohdN82Sp9FeuAXJ4eV9otd',\n  PsBABY5H = 'PsBABY5HQTSkA4297zNHfsZNKtxULfL18y95qb3m53QJiXGmrbU',\n  PsBabyM1 = 'PsBabyM1eUXZseaJdmXFApDSBqj8YBfwELoxZHHW77EMcAbbwAS',\n  PsCARTHA = 'PsCARTHAGazKbHtnKfLzQg3kms52kSRpgnDY982a9oYsSXRLQEb',\n  PsDELPH1 = 'PsDELPH1Kxsxt8f9eWbxQeRxkjfbxoqM52jvs5Y5fBxWWh4ifpo',\n  PtEdoTez = 'PtEdoTezd3RHSC31mpxxo1npxFjoWWcFgQtxapi51Z8TLu6v6Uq',\n  PtEdo2Zk = 'PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA',\n  PsFLoren = 'PsFLorenaUUuikDWvMDr6fGBRG8kt3e3D3fHoXK1j1BFRxeSH4i',\n  PsFLorena = 'PsFLorenaUUuikDWvMDr6fGBRG8kt3e3D3fHoXK1j1BFRxeSH4i',\n  PtGRANAD = 'PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV',\n  PtGRANADs = 'PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV',\n  PtHangzH = 'PtHangzHogokSuiMHemCuowEavgYTP8J5qQ9fQS793MHYFpCY3r',\n  PtHangz2 = 'PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx',\n  PsiThaCa = 'PsiThaCaT47Zboaw71QWScM8sXeMM7bbQFncK9FLqYc6EKdpjVP',\n  Psithaca2 = 'Psithaca2MLRFYargivpo7YvUr7wUDqyxrdhC5CQq78mRvimz6A',\n  PtJakarta = 'PtJakartaiDz69SfDDLXJSiuZqTSeSKRDbKVZC8MNzJnvRjvnGw',\n  ProtoALpha = 'ProtoALphaALphaALphaALphaALphaALphaALphaALphaDdp3zK', // temporary protocol hash\n}\n\nexport const DefaultProtocol = Protocol.Psithaca2;\n\nexport type ProtocolID = `${Protocol}`;\n\nconst protoLevel: Record<ProtocolID, number> = {\n  Ps9mPmXaRzmzk35gbAYNCAw6UXdE2qoABTHbN2oEEc1qM7CwT9P: 0,\n  PtCJ7pwoxe8JasnHY8YonnLYjcVHmhiARPJvqcC6VfHT5s8k8sY: 1,\n  PsYLVpVvgbLhAhoqAkMFUo6gudkJ9weNXhUYCiLDzcUpFpkk8Wt: 2,\n  PsddFKi32cMJ2qPjf43Qv5GDWLDPZb3T3bF6fLKiF5HtvHNU7aP: 3,\n  Pt24m4xiPbLDhVgVfABUjirbmda3yohdN82Sp9FeuAXJ4eV9otd: 4,\n  PsBABY5HQTSkA4297zNHfsZNKtxULfL18y95qb3m53QJiXGmrbU: 5,\n  PsBabyM1eUXZseaJdmXFApDSBqj8YBfwELoxZHHW77EMcAbbwAS: 5,\n  PsCARTHAGazKbHtnKfLzQg3kms52kSRpgnDY982a9oYsSXRLQEb: 6,\n  PsDELPH1Kxsxt8f9eWbxQeRxkjfbxoqM52jvs5Y5fBxWWh4ifpo: 7,\n  PtEdoTezd3RHSC31mpxxo1npxFjoWWcFgQtxapi51Z8TLu6v6Uq: 8,\n  PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA: 8,\n  PsFLorenaUUuikDWvMDr6fGBRG8kt3e3D3fHoXK1j1BFRxeSH4i: 9,\n  PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV: 10,\n  PtHangzHogokSuiMHemCuowEavgYTP8J5qQ9fQS793MHYFpCY3r: 11,\n  PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx: 11,\n  PsiThaCaT47Zboaw71QWScM8sXeMM7bbQFncK9FLqYc6EKdpjVP: 12,\n  Psithaca2MLRFYargivpo7YvUr7wUDqyxrdhC5CQq78mRvimz6A: 12,\n  PtJakartaiDz69SfDDLXJSiuZqTSeSKRDbKVZC8MNzJnvRjvnGw: 13,\n  ProtoALphaALphaALphaALphaALphaALphaALphaALphaDdp3zK: 13,\n};\n\nexport function ProtoGreaterOfEqual(a: ProtocolID, b: ProtocolID): boolean {\n  return protoLevel[a] >= protoLevel[b];\n}\n\nexport function ProtoInferiorTo(a: ProtocolID, b: ProtocolID): boolean {\n  return protoLevel[a] < protoLevel[b];\n}\n\nexport interface ProtocolOptions {\n  protocol?: ProtocolID;\n}\n","import { Prim, Expr, IntLiteral } from './micheline';\nimport { DefaultProtocol, Protocol, ProtocolOptions, ProtoInferiorTo } from './michelson-types';\nimport { Tuple, NoArgs, ReqArgs, NoAnnots } from './utils';\n\n/**\n *  @category Error\n *  @description Indicates that an error has occurred preventing macros from being expanded in a plain Michelson input\n */\nexport class MacroError extends Error {\n  constructor(public prim: Prim, message?: string) {\n    super(message);\n    Object.setPrototypeOf(this, MacroError.prototype);\n  }\n}\n\nfunction assertArgs<N extends number>(\n  ex: Prim,\n  n: N\n): ex is N extends 0 ? NoArgs<Prim<string>> : ReqArgs<Prim<string, Tuple<N, Expr>>> {\n  if ((n === 0 && ex.args === undefined) || ex.args?.length === n) {\n    return true;\n  }\n  throw new MacroError(ex, `macro ${ex.prim} expects ${n} arguments, was given ${ex.args?.length}`);\n}\n\nfunction assertNoAnnots(ex: Prim): ex is NoAnnots<Prim> {\n  if (ex.annots === undefined) {\n    return true;\n  }\n  throw new MacroError(ex, `unexpected annotation on macro ${ex.prim}: ${ex.annots}`);\n}\n\nfunction assertIntArg(ex: Prim, arg: Expr): arg is IntLiteral {\n  if ('int' in arg) {\n    return true;\n  }\n  throw new MacroError(ex, `macro ${ex.prim} expects int argument`);\n}\n\ntype PT = [number, [string | null, string | null]];\n\nfunction parsePairUnpairExpr(\n  p: Prim,\n  expr: string,\n  annotations: string[],\n  agg: (l: PT[] | undefined, r: PT[] | undefined, top: PT) => PT[]\n): { r: PT[]; n: number; an: number } {\n  let i = 0;\n  let ai = 0;\n  const ann: [string | null, string | null] = [null, null];\n\n  // Left expression\n  let lexpr: PT[] | undefined;\n  if (i === expr.length) {\n    throw new MacroError(p, `unexpected end: ${p.prim}`);\n  }\n  let c = expr[i++];\n  switch (c) {\n    case 'P': {\n      const { r, n, an } = parsePairUnpairExpr(p, expr.slice(i), annotations.slice(ai), agg);\n      lexpr = r;\n      i += n;\n      ai += an;\n      break;\n    }\n    case 'A':\n      if (ai !== annotations.length) {\n        ann[0] = annotations[ai++];\n      }\n      break;\n    default:\n      throw new MacroError(p, `${p.prim}: unexpected character: ${c}`);\n  }\n\n  // Right expression\n  let rexpr: PT[] | undefined;\n  if (i === expr.length) {\n    throw new MacroError(p, `unexpected end: ${p.prim}`);\n  }\n  c = expr[i++];\n  switch (c) {\n    case 'P': {\n      const { r, n, an } = parsePairUnpairExpr(p, expr.slice(i), annotations.slice(ai), agg);\n      rexpr = r.map<PT>(([v, a]) => [v + 1, a]);\n      i += n;\n      ai += an;\n      break;\n    }\n    case 'I':\n      if (ai !== annotations.length) {\n        ann[1] = annotations[ai++];\n      }\n      break;\n    default:\n      throw new MacroError(p, `${p.prim}: unexpected character: ${c}`);\n  }\n\n  return { r: agg(lexpr, rexpr, [0, ann]), n: i, an: ai };\n}\n\nfunction parseSetMapCadr(p: Prim, expr: string, vann: string[], term: { a: Expr; d: Expr }): Expr {\n  const c = expr[0];\n  switch (c) {\n    case 'A':\n      return expr.length > 1\n        ? [\n            { prim: 'DUP' },\n            {\n              prim: 'DIP',\n              args: [\n                [{ prim: 'CAR', annots: ['@%%'] }, parseSetMapCadr(p, expr.slice(1), [], term)],\n              ],\n            },\n            { prim: 'CDR', annots: ['@%%'] },\n            { prim: 'SWAP' },\n            { prim: 'PAIR', annots: ['%@', '%@', ...vann] },\n          ]\n        : term.a;\n\n    case 'D':\n      return expr.length > 1\n        ? [\n            { prim: 'DUP' },\n            {\n              prim: 'DIP',\n              args: [\n                [{ prim: 'CDR', annots: ['@%%'] }, parseSetMapCadr(p, expr.slice(1), [], term)],\n              ],\n            },\n            { prim: 'CAR', annots: ['@%%'] },\n            { prim: 'PAIR', annots: ['%@', '%@', ...vann] },\n          ]\n        : term.d;\n\n    default:\n      throw new MacroError(p, `${p.prim}: unexpected character: ${c}`);\n  }\n}\n\nfunction trimLast<T>(a: T[], v: T): T[] {\n  let l = a.length;\n  while (l > 0 && a[l - 1] === v) {\n    l--;\n  }\n  return a.slice(0, l);\n}\n\nfunction filterAnnotations(a?: string[]): {\n  fields: string[];\n  rest: string[];\n} {\n  const fields: string[] = [];\n  const rest: string[] = [];\n  if (a !== undefined) {\n    for (const v of a) {\n      (v.length !== 0 && v[0] === '%' ? fields : rest).push(v);\n    }\n  }\n  return { fields, rest };\n}\n\nfunction mkPrim({ prim, annots, args }: Prim): Prim {\n  return {\n    prim,\n    ...(annots && { annots }),\n    ...(args && { args }),\n  };\n}\n\nconst pairRe = /^P[PAI]{3,}R$/;\nconst unpairRe = /^UNP[PAI]{2,}R$/;\nconst cadrRe = /^C[AD]{2,}R$/;\nconst setCadrRe = /^SET_C[AD]+R$/;\nconst mapCadrRe = /^MAP_C[AD]+R$/;\nconst diipRe = /^DI{2,}P$/;\nconst duupRe = /^DU+P$/;\n\nexport function expandMacros(ex: Prim, opt?: ProtocolOptions): Expr {\n  const proto = opt?.protocol || DefaultProtocol;\n\n  function mayRename(annots?: string[]): Prim[] {\n    return annots !== undefined ? [{ prim: 'RENAME', annots }] : [];\n  }\n\n  switch (ex.prim) {\n    // Compare\n    case 'CMPEQ':\n    case 'CMPNEQ':\n    case 'CMPLT':\n    case 'CMPGT':\n    case 'CMPLE':\n    case 'CMPGE':\n      if (assertArgs(ex, 0)) {\n        return [{ prim: 'COMPARE' }, mkPrim({ prim: ex.prim.slice(3), annots: ex.annots })];\n      }\n      break;\n\n    case 'IFEQ':\n    case 'IFNEQ':\n    case 'IFLT':\n    case 'IFGT':\n    case 'IFLE':\n    case 'IFGE':\n      if (assertArgs(ex, 2)) {\n        return [\n          { prim: ex.prim.slice(2) },\n          mkPrim({ prim: 'IF', annots: ex.annots, args: ex.args }),\n        ];\n      }\n      break;\n\n    case 'IFCMPEQ':\n    case 'IFCMPNEQ':\n    case 'IFCMPLT':\n    case 'IFCMPGT':\n    case 'IFCMPLE':\n    case 'IFCMPGE':\n      if (assertArgs(ex, 2)) {\n        return [\n          { prim: 'COMPARE' },\n          { prim: ex.prim.slice(5) },\n          mkPrim({ prim: 'IF', annots: ex.annots, args: ex.args }),\n        ];\n      }\n      break;\n\n    // Fail\n    case 'FAIL':\n      if (assertArgs(ex, 0) && assertNoAnnots(ex)) {\n        return [{ prim: 'UNIT' }, { prim: 'FAILWITH' }];\n      }\n      break;\n\n    // Assertion macros\n    case 'ASSERT':\n      if (assertArgs(ex, 0) && assertNoAnnots(ex)) {\n        return [\n          {\n            prim: 'IF',\n            args: [[], [[{ prim: 'UNIT' }, { prim: 'FAILWITH' }]]],\n          },\n        ];\n      }\n      break;\n\n    case 'ASSERT_EQ':\n    case 'ASSERT_NEQ':\n    case 'ASSERT_LT':\n    case 'ASSERT_GT':\n    case 'ASSERT_LE':\n    case 'ASSERT_GE':\n      if (assertArgs(ex, 0) && assertNoAnnots(ex)) {\n        return [\n          { prim: ex.prim.slice(7) },\n          {\n            prim: 'IF',\n            args: [[], [[{ prim: 'UNIT' }, { prim: 'FAILWITH' }]]],\n          },\n        ];\n      }\n      break;\n\n    case 'ASSERT_CMPEQ':\n    case 'ASSERT_CMPNEQ':\n    case 'ASSERT_CMPLT':\n    case 'ASSERT_CMPGT':\n    case 'ASSERT_CMPLE':\n    case 'ASSERT_CMPGE':\n      if (assertArgs(ex, 0) && assertNoAnnots(ex)) {\n        return [\n          [{ prim: 'COMPARE' }, { prim: ex.prim.slice(10) }],\n          {\n            prim: 'IF',\n            args: [[], [[{ prim: 'UNIT' }, { prim: 'FAILWITH' }]]],\n          },\n        ];\n      }\n      break;\n\n    case 'ASSERT_NONE':\n      if (assertArgs(ex, 0) && assertNoAnnots(ex)) {\n        return [\n          {\n            prim: 'IF_NONE',\n            args: [[], [[{ prim: 'UNIT' }, { prim: 'FAILWITH' }]]],\n          },\n        ];\n      }\n      break;\n\n    case 'ASSERT_SOME':\n      if (assertArgs(ex, 0)) {\n        return [\n          {\n            prim: 'IF_NONE',\n            args: [[[{ prim: 'UNIT' }, { prim: 'FAILWITH' }]], mayRename(ex.annots)],\n          },\n        ];\n      }\n      break;\n\n    case 'ASSERT_LEFT':\n      if (assertArgs(ex, 0)) {\n        return [\n          {\n            prim: 'IF_LEFT',\n            args: [mayRename(ex.annots), [[{ prim: 'UNIT' }, { prim: 'FAILWITH' }]]],\n          },\n        ];\n      }\n      break;\n\n    case 'ASSERT_RIGHT':\n      if (assertArgs(ex, 0)) {\n        return [\n          {\n            prim: 'IF_LEFT',\n            args: [[[{ prim: 'UNIT' }, { prim: 'FAILWITH' }]], mayRename(ex.annots)],\n          },\n        ];\n      }\n      break;\n\n    // Syntactic conveniences\n\n    case 'IF_SOME':\n      if (assertArgs(ex, 2)) {\n        return [mkPrim({ prim: 'IF_NONE', annots: ex.annots, args: [ex.args[1], ex.args[0]] })];\n      }\n      break;\n\n    case 'IF_RIGHT':\n      if (assertArgs(ex, 2)) {\n        return [mkPrim({ prim: 'IF_LEFT', annots: ex.annots, args: [ex.args[1], ex.args[0]] })];\n      }\n      break;\n\n    // CAR/CDR n\n    case 'CAR':\n    case 'CDR':\n      if (ex.args !== undefined) {\n        if (assertArgs(ex, 1) && assertIntArg(ex, ex.args[0])) {\n          const n = parseInt(ex.args[0].int, 10);\n          return mkPrim({\n            prim: 'GET',\n            args: [{ int: ex.prim === 'CAR' ? String(n * 2 + 1) : String(n * 2) }],\n            annots: ex.annots,\n          });\n        }\n      } else {\n        return ex;\n      }\n  }\n\n  // More syntactic conveniences\n\n  // PAPPAIIR macro\n  if (pairRe.test(ex.prim)) {\n    if (assertArgs(ex, 0)) {\n      const { fields, rest } = filterAnnotations(ex.annots);\n      const { r } = parsePairUnpairExpr(ex, ex.prim.slice(1), fields, (l, r, top) => [\n        ...(l || []),\n        ...(r || []),\n        top,\n      ]);\n\n      return r.map(([v, a], i) => {\n        const ann = [\n          ...trimLast(a, null).map((v) => (v === null ? '%' : v)),\n          ...(v === 0 && i === r.length - 1 ? rest : []),\n        ];\n\n        const leaf = mkPrim({ prim: 'PAIR', annots: ann.length !== 0 ? ann : undefined });\n\n        return v === 0\n          ? leaf\n          : {\n              prim: 'DIP',\n              args: v === 1 ? [[leaf]] : [{ int: String(v) }, [leaf]],\n            };\n      });\n    }\n  }\n\n  // UNPAPPAIIR macro\n  if (unpairRe.test(ex.prim)) {\n    if (ProtoInferiorTo(proto, Protocol.PtEdo2Zk) && assertArgs(ex, 0)) {\n      const { r } = parsePairUnpairExpr(ex, ex.prim.slice(3), ex.annots || [], (l, r, top) => [\n        top,\n        ...(r || []),\n        ...(l || []),\n      ]);\n      return r.map(([v, a]) => {\n        const leaf: Prim[] = [\n          { prim: 'DUP' },\n          mkPrim({ prim: 'CAR', annots: a[0] !== null ? [a[0]] : undefined }),\n          {\n            prim: 'DIP',\n            args: [[mkPrim({ prim: 'CDR', annots: a[1] !== null ? [a[1]] : undefined })]],\n          },\n        ];\n\n        return v === 0\n          ? leaf\n          : {\n              prim: 'DIP',\n              args: v === 1 ? [[leaf]] : [{ int: String(v) }, [leaf]],\n            };\n      });\n    } else {\n      if (ex.prim === 'UNPAIR') {\n        return ex;\n      }\n      if (assertArgs(ex, 0)) {\n        // 008_edo: annotations are deprecated\n        const { r } = parsePairUnpairExpr(ex, ex.prim.slice(3), [], (l, r, top) => [\n          top,\n          ...(r || []),\n          ...(l || []),\n        ]);\n        return r.map(([v]) => {\n          const leaf = mkPrim({\n            prim: 'UNPAIR',\n          });\n\n          return v === 0\n            ? leaf\n            : {\n                prim: 'DIP',\n                args: v === 1 ? [[leaf]] : [{ int: String(v) }, [leaf]],\n              };\n        });\n      }\n    }\n  }\n\n  // C[AD]+R macro\n  if (cadrRe.test(ex.prim)) {\n    if (assertArgs(ex, 0)) {\n      const ch = [...ex.prim.slice(1, ex.prim.length - 1)];\n\n      return ch.map<Prim>((c, i) => {\n        const ann = i === ch.length - 1 ? ex.annots : undefined;\n        switch (c) {\n          case 'A':\n            return mkPrim({ prim: 'CAR', annots: ann });\n          case 'D':\n            return mkPrim({ prim: 'CDR', annots: ann });\n          default:\n            throw new MacroError(ex, `unexpected character: ${c}`);\n        }\n      });\n    }\n  }\n\n  // SET_C[AD]+R macro\n  if (setCadrRe.test(ex.prim)) {\n    if (assertArgs(ex, 0)) {\n      const { fields, rest } = filterAnnotations(ex.annots);\n      if (fields.length > 1) {\n        throw new MacroError(ex, `unexpected annotation on macro ${ex.prim}: ${fields}`);\n      }\n\n      const term =\n        fields.length !== 0\n          ? {\n              a: [\n                { prim: 'DUP' },\n                { prim: 'CAR', annots: fields },\n                { prim: 'DROP' },\n                { prim: 'CDR', annots: ['@%%'] },\n                { prim: 'SWAP' },\n                { prim: 'PAIR', annots: [fields[0], '%@'] },\n              ],\n              d: [\n                { prim: 'DUP' },\n                { prim: 'CDR', annots: fields },\n                { prim: 'DROP' },\n                { prim: 'CAR', annots: ['@%%'] },\n                { prim: 'PAIR', annots: ['%@', fields[0]] },\n              ],\n            }\n          : {\n              a: [\n                { prim: 'CDR', annots: ['@%%'] },\n                { prim: 'SWAP' },\n                { prim: 'PAIR', annots: ['%', '%@'] },\n              ],\n              d: [\n                { prim: 'CAR', annots: ['@%%'] },\n                { prim: 'PAIR', annots: ['%@', '%'] },\n              ],\n            };\n\n      return parseSetMapCadr(ex, ex.prim.slice(5, ex.prim.length - 1), rest, term);\n    }\n  }\n\n  // MAP_C[AD]+R macro\n  if (mapCadrRe.test(ex.prim)) {\n    if (assertArgs(ex, 1)) {\n      const { fields } = filterAnnotations(ex.annots);\n      if (fields.length > 1) {\n        throw new MacroError(ex, `unexpected annotation on macro ${ex.prim}: ${fields}`);\n      }\n\n      const term = {\n        a: [\n          { prim: 'DUP' },\n          { prim: 'CDR', annots: ['@%%'] },\n          {\n            prim: 'DIP',\n            args: [\n              [\n                mkPrim({\n                  prim: 'CAR',\n                  annots: fields.length !== 0 ? ['@' + fields[0].slice(1)] : undefined,\n                }),\n                ex.args[0],\n              ],\n            ],\n          },\n          { prim: 'SWAP' },\n          { prim: 'PAIR', annots: [fields.length !== 0 ? fields[0] : '%', '%@'] },\n        ],\n        d: [\n          { prim: 'DUP' },\n          mkPrim({\n            prim: 'CDR',\n            annots: fields.length !== 0 ? ['@' + fields[0].slice(1)] : undefined,\n          }),\n          ex.args[0],\n          { prim: 'SWAP' },\n          { prim: 'CAR', annots: ['@%%'] },\n          { prim: 'PAIR', annots: ['%@', fields.length !== 0 ? fields[0] : '%'] },\n        ],\n      };\n\n      return parseSetMapCadr(ex, ex.prim.slice(5, ex.prim.length - 1), [], term);\n    }\n  }\n\n  // Expand deprecated DI...IP to [DIP n]\n  if (diipRe.test(ex.prim)) {\n    if (assertArgs(ex, 1)) {\n      let n = 0;\n      while (ex.prim[1 + n] === 'I') {\n        n++;\n      }\n      return mkPrim({ prim: 'DIP', args: [{ int: String(n) }, ex.args[0]] });\n    }\n  }\n\n  // Expand DU...UP and DUP n\n  if (duupRe.test(ex.prim)) {\n    let n = 0;\n    while (ex.prim[1 + n] === 'U') {\n      n++;\n    }\n    if (ProtoInferiorTo(proto, Protocol.PtEdo2Zk)) {\n      if (n === 1) {\n        if (ex.args === undefined) {\n          return ex; // skip\n        }\n        if (assertArgs(ex, 1) && assertIntArg(ex, ex.args[0])) {\n          n = parseInt(ex.args[0].int, 10);\n        }\n      } else {\n        assertArgs(ex, 0);\n      }\n\n      if (n === 1) {\n        return [mkPrim({ prim: 'DUP', annots: ex.annots })];\n      } else if (n === 2) {\n        return [\n          {\n            prim: 'DIP',\n            args: [[mkPrim({ prim: 'DUP', annots: ex.annots })]],\n          },\n          { prim: 'SWAP' },\n        ];\n      } else {\n        return [\n          {\n            prim: 'DIP',\n            args: [{ int: String(n - 1) }, [mkPrim({ prim: 'DUP', annots: ex.annots })]],\n          },\n          {\n            prim: 'DIG',\n            args: [{ int: String(n) }],\n          },\n        ];\n      }\n    } else {\n      if (n === 1) {\n        return ex;\n      }\n      if (assertArgs(ex, 0)) {\n        return mkPrim({ prim: 'DUP', args: [{ int: String(n) }], annots: ex.annots });\n      }\n    }\n  }\n\n  return ex;\n}\n","import { Prim, Expr } from './micheline';\nimport { GlobalConstantHashAndValue } from './micheline-parser';\n\nexport function expandGlobalConstants(ex: Prim, hashAndValue: GlobalConstantHashAndValue): Expr {\n  if (\n    ex.args !== undefined &&\n    ex.args.length === 1 &&\n    'string' in ex.args[0] &&\n    ex.args[0].string in hashAndValue\n  ) {\n    return hashAndValue[ex.args[0].string];\n  }\n\n  return ex;\n}\n","import { scan, Token, Literal } from './scan';\nimport {\n  Expr,\n  Prim,\n  StringLiteral,\n  IntLiteral,\n  BytesLiteral,\n  sourceReference,\n  List,\n  SourceReference,\n} from './micheline';\nimport { expandMacros } from './macros';\nimport { ProtocolOptions } from './michelson-types';\nimport { expandGlobalConstants } from './global-constants';\n\n/**\n *  @category Error\n *  @description Error indicating a failure when parsing Micheline expressions\n */\nexport class MichelineParseError extends Error {\n  /**\n   * @param token A token caused the error\n   * @param message An error message\n   */\n  constructor(public token: Token | null, message?: string) {\n    super(message);\n    Object.setPrototypeOf(this, MichelineParseError.prototype);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that inidicates a failure when parsing Micheline JSON\n */\nexport class JSONParseError extends Error {\n  /**\n   * @param node A node caused the error\n   * @param message An error message\n   */\n  constructor(public node: unknown, message?: string) {\n    super(message);\n    Object.setPrototypeOf(this, JSONParseError.prototype);\n  }\n}\n\nexport interface GlobalConstantHashAndValue {\n  [globalConstantHash: string]: Expr;\n}\n\nconst errEOF = new MichelineParseError(null, 'Unexpected EOF');\n\nfunction isAnnotation(tok: Token): boolean {\n  return tok.t === Literal.Ident && (tok.v[0] === '@' || tok.v[0] === '%' || tok.v[0] === ':');\n}\n\nconst intRe = new RegExp('^-?[0-9]+$');\nconst bytesRe = new RegExp('^([0-9a-fA-F]{2})*$');\n\nexport interface ParserOptions extends ProtocolOptions {\n  /**\n   * Expand [Michelson macros](https://tezos.gitlab.io/whitedoc/michelson.html#macros) during parsing.\n   */\n  expandMacros?: boolean;\n  /**\n   * Expand global constants during parsing.\n   * `expandGlobalConstant` expects an object where the keys are global constant hashes and the values are the corresponding JSON Micheline expressions.\n   * @example\n   * ```\n   * const parserOptions: ParserOptions = {\n   *  expandGlobalConstant: {\n   *      'expr...': { prim: 'DROP', args: [{ int: '2' }] }\n   *  }\n   * }\n   *\n   * const p = new Parser(parserOptions);\n   * ```\n   */\n  expandGlobalConstant?: GlobalConstantHashAndValue;\n}\n\n/**\n * Converts and validates Michelson expressions between JSON-based Michelson and Micheline\n *\n * Pretty Print a Michelson Smart Contract:\n * ```\n * const contract = await Tezos.contract.at(\"KT1Vsw3kh9638gqWoHTjvHCoHLPKvCbMVbCg\");\n * const p = new Parser();\n *\n * const michelsonCode = p.parseJSON(contract.script.code);\n * const storage = p.parseJSON(contract.script.storage);\n *\n * console.log(\"Pretty print Michelson smart contract:\");\n * console.log(emitMicheline(michelsonCode, {indent:\"    \", newline: \"\\n\",}));\n *\n * console.log(\"Pretty print Storage:\");\n * console.log(emitMicheline(storage, {indent:\"    \", newline: \"\\n\",}));\n * ```\n *\n * Encode a Michelson expression for inital storage of a smart contract\n * ```\n * const src = `(Pair (Pair { Elt 1\n *                (Pair (Pair \"tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN\" \"tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx\")\n *                      0x0501000000026869) }\n *          10000000)\n *    (Pair 2 333))`;\n *\n * const p = new Parser();\n *\n * const exp = p.parseMichelineExpression(src);\n * console.log(JSON.stringify(exp));\n * ```\n */\nexport class Parser {\n  constructor(private opt?: ParserOptions) {}\n\n  private expand(ex: Prim): Expr {\n    if (this.opt?.expandGlobalConstant !== undefined && ex.prim === 'constant') {\n      const ret = expandGlobalConstants(ex, this.opt.expandGlobalConstant);\n      if (ret !== ex) {\n        ret[sourceReference] = {\n          ...(ex[sourceReference] || { first: 0, last: 0 }),\n          globalConstant: ex,\n        };\n      }\n      return ret;\n    }\n    if (this.opt?.expandMacros !== undefined ? this.opt?.expandMacros : true) {\n      const ret = expandMacros(ex, this.opt);\n      if (ret !== ex) {\n        ret[sourceReference] = { ...(ex[sourceReference] || { first: 0, last: 0 }), macro: ex };\n      }\n      return ret;\n    } else {\n      return ex;\n    }\n  }\n\n  private parseListExpr(scanner: Iterator<Token>, start: Token): Expr {\n    const ref: SourceReference = {\n      first: start.first,\n      last: start.last,\n    };\n\n    const expectBracket = start.t === '(';\n    let tok: IteratorResult<Token>;\n    if (expectBracket) {\n      tok = scanner.next();\n      if (tok.done) {\n        throw errEOF;\n      }\n      ref.last = tok.value.last;\n    } else {\n      tok = { value: start };\n    }\n\n    if (tok.value.t !== Literal.Ident) {\n      throw new MichelineParseError(tok.value, `not an identifier: ${tok.value.v}`);\n    }\n\n    const ret: Prim = {\n      prim: tok.value.v,\n      [sourceReference]: ref,\n    };\n\n    for (;;) {\n      const tok = scanner.next();\n      if (tok.done) {\n        if (expectBracket) {\n          throw errEOF;\n        }\n        break;\n      } else if (tok.value.t === ')') {\n        if (!expectBracket) {\n          throw new MichelineParseError(tok.value, 'unexpected closing bracket');\n        }\n        ref.last = tok.value.last;\n        break;\n      } else if (isAnnotation(tok.value)) {\n        ret.annots = ret.annots || [];\n        ret.annots.push(tok.value.v);\n        ref.last = tok.value.last;\n      } else {\n        ret.args = ret.args || [];\n        const arg = this.parseExpr(scanner, tok.value);\n        ref.last = arg[sourceReference]?.last || ref.last;\n        ret.args.push(arg);\n      }\n    }\n    return this.expand(ret);\n  }\n\n  private parseArgs(scanner: Iterator<Token>, start: Token): [Prim, IteratorResult<Token>] {\n    // Identifier with arguments\n    const ref: SourceReference = {\n      first: start.first,\n      last: start.last,\n    };\n    const p: Prim = {\n      prim: start.v,\n      [sourceReference]: ref,\n    };\n\n    for (;;) {\n      const t = scanner.next();\n      if (t.done || t.value.t === '}' || t.value.t === ';') {\n        return [p, t];\n      }\n\n      if (isAnnotation(t.value)) {\n        ref.last = t.value.last;\n        p.annots = p.annots || [];\n        p.annots.push(t.value.v);\n      } else {\n        const arg = this.parseExpr(scanner, t.value);\n        ref.last = arg[sourceReference]?.last || ref.last;\n        p.args = p.args || [];\n        p.args.push(arg);\n      }\n    }\n  }\n\n  private parseSequenceExpr(scanner: Iterator<Token>, start: Token): List<Expr> {\n    const ref: SourceReference = {\n      first: start.first,\n      last: start.last,\n    };\n    const seq: List<Expr> = [];\n    seq[sourceReference] = ref;\n\n    const expectBracket = start.t === '{';\n    let tok: IteratorResult<Token> | null = start.t === '{' ? null : { value: start };\n\n    for (;;) {\n      if (tok === null) {\n        tok = scanner.next();\n        if (!tok.done) {\n          ref.last = tok.value.last;\n        }\n      }\n      if (tok.done) {\n        if (expectBracket) {\n          throw errEOF;\n        } else {\n          return seq;\n        }\n      }\n\n      if (tok.value.t === '}') {\n        if (!expectBracket) {\n          throw new MichelineParseError(tok.value, 'unexpected closing bracket');\n        } else {\n          return seq;\n        }\n      } else if (tok.value.t === Literal.Ident) {\n        // Identifier with arguments\n        const [itm, n] = this.parseArgs(scanner, tok.value);\n        ref.last = itm[sourceReference]?.last || ref.last;\n        seq.push(this.expand(itm));\n        tok = n;\n      } else {\n        // Other\n        const ex = this.parseExpr(scanner, tok.value);\n        ref.last = ex[sourceReference]?.last || ref.last;\n        seq.push(ex);\n        tok = null;\n      }\n\n      if (tok === null) {\n        tok = scanner.next();\n        if (!tok.done) {\n          ref.last = tok.value.last;\n        }\n      }\n      if (!tok.done && tok.value.t === ';') {\n        tok = null;\n      }\n    }\n  }\n\n  private parseExpr(scanner: Iterator<Token>, tok: Token): Expr {\n    switch (tok.t) {\n      case Literal.Ident:\n        return this.expand({\n          prim: tok.v,\n          [sourceReference]: { first: tok.first, last: tok.last },\n        });\n\n      case Literal.Number:\n        return { int: tok.v, [sourceReference]: { first: tok.first, last: tok.last } };\n\n      case Literal.String:\n        return {\n          string: JSON.parse(tok.v) as string,\n          [sourceReference]: { first: tok.first, last: tok.last },\n        };\n\n      case Literal.Bytes:\n        return { bytes: tok.v.slice(2), [sourceReference]: { first: tok.first, last: tok.last } };\n\n      case '{':\n        return this.parseSequenceExpr(scanner, tok);\n\n      default:\n        return this.parseListExpr(scanner, tok);\n    }\n  }\n\n  /**\n   * Parses a Micheline sequence expression, such as smart contract source. Enclosing curly brackets may be omitted.\n   * @param src A Micheline sequence `{parameter ...; storage int; code { DUP ; ...};}` or `parameter ...; storage int; code { DUP ; ...};`\n   */\n  parseSequence(src: string): Expr[] | null {\n    if (typeof src !== 'string') {\n      throw new TypeError(`string type was expected, got ${typeof src} instead`);\n    }\n\n    const scanner = scan(src);\n    const tok = scanner.next();\n    if (tok.done) {\n      return null;\n    }\n    return this.parseSequenceExpr(scanner, tok.value);\n  }\n\n  /**\n   * Parse a Micheline sequence expression. Enclosing curly brackets may be omitted.\n   * @param src A Michelson list expression such as `(Pair {Elt \"0\" 0} 0)` or `Pair {Elt \"0\" 0} 0`\n   * @returns An AST node or null for empty document.\n   */\n  parseList(src: string): Expr | null {\n    if (typeof src !== 'string') {\n      throw new TypeError(`string type was expected, got ${typeof src} instead`);\n    }\n\n    const scanner = scan(src);\n    const tok = scanner.next();\n    if (tok.done) {\n      return null;\n    }\n    return this.parseListExpr(scanner, tok.value);\n  }\n\n  /**\n   * Parse any Michelson expression\n   * @param src A Michelson expression such as `(Pair {Elt \"0\" 0} 0)` or `{parameter ...; storage int; code { DUP ; ...};}`\n   * @returns An AST node or null for empty document.\n   */\n  parseMichelineExpression(src: string): Expr | null {\n    if (typeof src !== 'string') {\n      throw new TypeError(`string type was expected, got ${typeof src} instead`);\n    }\n\n    const scanner = scan(src);\n    const tok = scanner.next();\n    if (tok.done) {\n      return null;\n    }\n    return this.parseExpr(scanner, tok.value);\n  }\n\n  /**\n   * Parse a Micheline sequence expression, such as smart contract source. Enclosing curly brackets may be omitted.\n   * An alias for `parseSequence`\n   * @param src A Micheline sequence `{parameter ...; storage int; code { DUP ; ...};}` or `parameter ...; storage int; code { DUP ; ...};`\n   */\n  parseScript(src: string): Expr[] | null {\n    return this.parseSequence(src);\n  }\n\n  /**\n   * Parse a Micheline sequence expression. Enclosing curly brackets may be omitted.\n   * An alias for `parseList`\n   * @param src A Michelson list expression such as `(Pair {Elt \"0\" 0} 0)` or `Pair {Elt \"0\" 0} 0`\n   * @returns An AST node or null for empty document.\n   */\n  parseData(src: string): Expr | null {\n    return this.parseList(src);\n  }\n\n  /**\n   * Takes a JSON-encoded Michelson, validates it, strips away unneeded properties and optionally expands macros (See {@link ParserOptions}).\n   * @param src An object containing JSON-encoded Michelson, usually returned by `JSON.parse()`\n   */\n  parseJSON(src: object): Expr {\n    if (typeof src !== 'object') {\n      throw new TypeError(`object type was expected, got ${typeof src} instead`);\n    }\n\n    if (Array.isArray(src)) {\n      const ret: Expr[] = [];\n      for (const n of src) {\n        if (n === null || typeof n !== 'object') {\n          throw new JSONParseError(n, `unexpected sequence element: ${n}`);\n        }\n        ret.push(this.parseJSON(n));\n      }\n      return ret;\n    } else if ('prim' in src) {\n      const p = src as { prim: unknown; annots?: unknown[]; args?: unknown[] };\n      if (\n        typeof p.prim === 'string' &&\n        (p.annots === undefined || Array.isArray(p.annots)) &&\n        (p.args === undefined || Array.isArray(p.args))\n      ) {\n        const ret: Prim = {\n          prim: p.prim,\n        };\n\n        if (p.annots !== undefined) {\n          for (const a of p.annots) {\n            if (typeof a !== 'string') {\n              throw new JSONParseError(a, `string expected: ${a}`);\n            }\n          }\n          ret.annots = p.annots;\n        }\n\n        if (p.args !== undefined) {\n          ret.args = [];\n          for (const a of p.args) {\n            if (a === null || typeof a !== 'object') {\n              throw new JSONParseError(a, `unexpected argument: ${a}`);\n            }\n            ret.args.push(this.parseJSON(a));\n          }\n        }\n\n        return this.expand(ret);\n      }\n\n      throw new JSONParseError(src, `malformed prim expression: ${src}`);\n    } else if ('string' in src) {\n      if (typeof (src as StringLiteral).string === 'string') {\n        return { string: (src as StringLiteral).string };\n      }\n\n      throw new JSONParseError(src, `malformed string literal: ${src}`);\n    } else if ('int' in src) {\n      if (typeof (src as IntLiteral).int === 'string' && intRe.test((src as IntLiteral).int)) {\n        return { int: (src as IntLiteral).int };\n      }\n\n      throw new JSONParseError(src, `malformed int literal: ${src}`);\n    } else if ('bytes' in src) {\n      if (\n        typeof (src as BytesLiteral).bytes === 'string' &&\n        bytesRe.test((src as BytesLiteral).bytes)\n      ) {\n        return { bytes: (src as BytesLiteral).bytes };\n      }\n\n      throw new JSONParseError(src, `malformed bytes literal: ${src}`);\n    } else {\n      throw new JSONParseError(src, `unexpected object: ${src}`);\n    }\n  }\n}\n","import { Expr, Prim, sourceReference } from './micheline';\n\nexport interface FormatOptions {\n  /**\n   * A string used for code indentation if desired. Usually a tab character or a number of spaces.\n   */\n  indent?: string;\n  /**\n   * A string used for line separation. Usually a newline character (\"\\n\");\n   */\n  newline?: string;\n}\n\nclass Formatter {\n  constructor(private opt?: FormatOptions, private lev: number = 0) {}\n\n  indent(n = 0): string {\n    let ret = '';\n    if (this.opt?.indent !== undefined) {\n      for (let i = this.lev + n; i > 0; i--) {\n        ret += this.opt.indent;\n      }\n    }\n    return ret;\n  }\n\n  get lf(): string {\n    return this.opt?.newline || '';\n  }\n\n  get lfsp(): string {\n    return this.opt?.newline || ' ';\n  }\n\n  down(n: number): Formatter {\n    return new Formatter(this.opt, this.lev + n);\n  }\n}\n\nfunction hasArgs(node: Expr): node is Prim {\n  return (\n    'prim' in node &&\n    ((node.annots !== undefined && node.annots.length !== 0) ||\n      (node.args !== undefined && node.args.length !== 0))\n  );\n}\n\nfunction isMultiline(node: Prim): boolean {\n  if (node.args !== undefined) {\n    for (const a of node.args) {\n      if (Array.isArray(a) || hasArgs(a)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nfunction emitExpr(node: Expr, f: Formatter, foldMacros: boolean): string {\n  const macro = node[sourceReference]?.macro;\n  if (foldMacros && macro) {\n    return emitExpr(macro, f, foldMacros);\n  }\n\n  if (Array.isArray(node)) {\n    return emitSeq(node, f, foldMacros);\n  } else if ('string' in node) {\n    return JSON.stringify(node.string);\n  } else if ('int' in node) {\n    return node.int;\n  } else if ('bytes' in node) {\n    return '0x' + node.bytes;\n  } else {\n    if (\n      (node.annots === undefined || node.annots.length === 0) &&\n      (node.args === undefined || node.args.length === 0)\n    ) {\n      return node.prim;\n    }\n\n    let ret = '(' + node.prim;\n    if (node.annots !== undefined) {\n      for (const a of node.annots) {\n        ret += ' ' + a;\n      }\n    }\n    if (node.args !== undefined) {\n      const multiline = isMultiline(node);\n      for (const a of node.args) {\n        if (multiline) {\n          ret += f.lfsp + f.indent(1) + emitExpr(a, f.down(1), foldMacros);\n        } else {\n          ret += ' ' + emitExpr(a, f, foldMacros);\n        }\n      }\n    }\n    return ret + ')';\n  }\n}\n\nfunction emitSeq(node: Expr[], f: Formatter, foldMacros: boolean): string {\n  let ret = '{' + f.lf;\n  let i = node.length;\n  for (const el of node) {\n    ret += f.indent(1);\n\n    if ('prim' in el) {\n      ret += el.prim;\n\n      if (el.annots !== undefined) {\n        for (const a of el.annots) {\n          ret += ' ' + a;\n        }\n      }\n      if (el.args !== undefined) {\n        const multiline = isMultiline(el);\n        for (const a of el.args) {\n          if (multiline) {\n            ret += f.lfsp + f.indent(2) + emitExpr(a, f.down(2), foldMacros);\n          } else {\n            ret += ' ' + emitExpr(a, f, foldMacros);\n          }\n        }\n      }\n    } else {\n      ret += emitExpr(el, f.down(1), foldMacros);\n    }\n\n    ret += i > 1 ? ';' + f.lfsp : f.lf;\n    i--;\n  }\n  return ret + f.indent() + '}';\n}\n\n/**\n * Formats Micheline expression\n * @param expr An AST node\n * @param opt Options\n */\nexport function emitMicheline(expr: Expr, opt?: FormatOptions, foldMacros = false): string {\n  if (typeof expr !== 'object') {\n    throw new TypeError(`object type was expected, got ${typeof expr} instead`);\n  }\n\n  return emitExpr(expr, new Formatter(opt), foldMacros);\n}\n","const H = [\n  0x6a09e667 | 0,\n  0xbb67ae85 | 0,\n  0x3c6ef372 | 0,\n  0xa54ff53a | 0,\n  0x510e527f | 0,\n  0x9b05688c | 0,\n  0x1f83d9ab | 0,\n  0x5be0cd19 | 0,\n];\n\nconst K = [\n  0x428a2f98 | 0,\n  0x71374491 | 0,\n  0xb5c0fbcf | 0,\n  0xe9b5dba5 | 0,\n  0x3956c25b | 0,\n  0x59f111f1 | 0,\n  0x923f82a4 | 0,\n  0xab1c5ed5 | 0,\n  0xd807aa98 | 0,\n  0x12835b01 | 0,\n  0x243185be | 0,\n  0x550c7dc3 | 0,\n  0x72be5d74 | 0,\n  0x80deb1fe | 0,\n  0x9bdc06a7 | 0,\n  0xc19bf174 | 0,\n  0xe49b69c1 | 0,\n  0xefbe4786 | 0,\n  0x0fc19dc6 | 0,\n  0x240ca1cc | 0,\n  0x2de92c6f | 0,\n  0x4a7484aa | 0,\n  0x5cb0a9dc | 0,\n  0x76f988da | 0,\n  0x983e5152 | 0,\n  0xa831c66d | 0,\n  0xb00327c8 | 0,\n  0xbf597fc7 | 0,\n  0xc6e00bf3 | 0,\n  0xd5a79147 | 0,\n  0x06ca6351 | 0,\n  0x14292967 | 0,\n  0x27b70a85 | 0,\n  0x2e1b2138 | 0,\n  0x4d2c6dfc | 0,\n  0x53380d13 | 0,\n  0x650a7354 | 0,\n  0x766a0abb | 0,\n  0x81c2c92e | 0,\n  0x92722c85 | 0,\n  0xa2bfe8a1 | 0,\n  0xa81a664b | 0,\n  0xc24b8b70 | 0,\n  0xc76c51a3 | 0,\n  0xd192e819 | 0,\n  0xd6990624 | 0,\n  0xf40e3585 | 0,\n  0x106aa070 | 0,\n  0x19a4c116 | 0,\n  0x1e376c08 | 0,\n  0x2748774c | 0,\n  0x34b0bcb5 | 0,\n  0x391c0cb3 | 0,\n  0x4ed8aa4a | 0,\n  0x5b9cca4f | 0,\n  0x682e6ff3 | 0,\n  0x748f82ee | 0,\n  0x78a5636f | 0,\n  0x84c87814 | 0,\n  0x8cc70208 | 0,\n  0x90befffa | 0,\n  0xa4506ceb | 0,\n  0xbef9a3f7 | 0,\n  0xc67178f2 | 0,\n];\n\n/**\n *  @category Error\n *  @description Error that indicates a failure when decoding a base58 encoding\n */\nexport class Base58DecodingError extends Error {\n  public name = 'Base58DecodingError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n\n/**\n *  @category Error\n *  @description\n */\nexport class InvalidMessageError extends Error {\n  public name = 'InvalidMessageError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n\n// https://tools.ietf.org/html/rfc6234\nfunction sha256(msg: number[] | Uint8Array): number[] {\n  // pad the message\n  const r = (msg.length + 9) % 64;\n  const pad = r === 0 ? 0 : 64 - r;\n\n  if (msg.length > 268435455) {\n    throw new InvalidMessageError(`SHA-256 -- message length is too big: ${msg.length}`);\n  }\n\n  const l = msg.length << 3;\n  const buffer = [\n    ...msg,\n    0x80,\n    ...new Array<number>(pad).fill(0),\n    0,\n    0,\n    0,\n    0,\n    (l >> 24) & 0xff,\n    (l >> 16) & 0xff,\n    (l >> 8) & 0xff,\n    l & 0xff,\n  ];\n\n  function ror(x: number, n: number): number {\n    return (x >>> n) | (x << (32 - n));\n  }\n\n  const h = [...H];\n  const w = new Array<number>(64);\n  const v = new Array<number>(8);\n\n  for (let offset = 0; offset < buffer.length; offset += 64) {\n    let q = offset;\n    let i = 0;\n    while (i < 16) {\n      w[i] = (buffer[q] << 24) | (buffer[q + 1] << 16) | (buffer[q + 2] << 8) | buffer[q + 3];\n      q += 4;\n      i++;\n    }\n    while (i < 64) {\n      const s0 = ror(w[i - 15], 7) ^ ror(w[i - 15], 18) ^ (w[i - 15] >>> 3);\n      const s1 = ror(w[i - 2], 17) ^ ror(w[i - 2], 19) ^ (w[i - 2] >>> 10);\n      w[i] = ((s1 | 0) + w[i - 7] + s0 + w[i - 16]) | 0;\n      i++;\n    }\n\n    for (let i = 0; i < 8; i++) {\n      v[i] = h[i];\n    }\n\n    for (let i = 0; i < 64; i++) {\n      const b0 = ror(v[0], 2) ^ ror(v[0], 13) ^ ror(v[0], 22);\n      const b1 = ror(v[4], 6) ^ ror(v[4], 11) ^ ror(v[4], 25);\n      const t1 = (v[7] + b1 + ((v[4] & v[5]) ^ (~v[4] & v[6])) + K[i] + w[i]) | 0;\n      const t2 = (b0 + ((v[0] & v[1]) ^ (v[0] & v[2]) ^ (v[1] & v[2]))) | 0;\n\n      v[7] = v[6];\n      v[6] = v[5];\n      v[5] = v[4];\n      v[4] = (v[3] + t1) | 0;\n      v[3] = v[2];\n      v[2] = v[1];\n      v[1] = v[0];\n      v[0] = (t1 + t2) | 0;\n    }\n\n    for (let i = 0; i < 8; i++) {\n      h[i] = (h[i] + v[i]) | 0;\n    }\n  }\n\n  const digest: number[] = [];\n  for (const v of h) {\n    digest.push((v >> 24) & 0xff);\n    digest.push((v >> 16) & 0xff);\n    digest.push((v >> 8) & 0xff);\n    digest.push(v & 0xff);\n  }\n\n  return digest;\n}\n\nconst base58alphabetFwd: number[] = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, -1, -1, -1, -1, -1, -1, -1, 9, 10, 11, 12, 13, 14, 15, 16, -1, 17, 18,\n  19, 20, 21, -1, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, -1, -1, -1, -1, -1, -1, 33, 34, 35,\n  36, 37, 38, 39, 40, 41, 42, 43, -1, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,\n];\n\nconst base58alphabetBwd: number[] = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35,\n  36, 37, 38, 39, 40, 41, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66,\n  67, 68, 69, 70, 71, 72, 73,\n];\n\nfunction byteAt(src: string, i: number): number {\n  const c = src.charCodeAt(i) - 49;\n  if (c >= base58alphabetFwd.length || base58alphabetFwd[c] === -1) {\n    throw new Base58DecodingError(`Unexpected character at position ${i}: ${src[i]}`);\n  }\n  return base58alphabetFwd[c];\n}\n\nexport function decodeBase58(src: string): number[] {\n  const acc: number[] = [];\n  let i = 0;\n  // count and skip leading zeros\n  while (i < src.length && byteAt(src, i) === 0) {\n    i++;\n  }\n  let zeros = i;\n  while (i < src.length) {\n    let carry = byteAt(src, i++);\n    /*\n        for every symbol x\n        acc = acc * 58 + x\n        where acc is a little endian arbitrary length integer\n        */\n    let ii = 0;\n    while (carry !== 0 || ii < acc.length) {\n      const m = (acc[ii] || 0) * 58 + carry;\n      acc[ii++] = m % 256;\n      carry = Math.floor(m / 256);\n    }\n  }\n  while (zeros-- > 0) {\n    acc.push(0);\n  }\n  return acc.reverse();\n}\n\nexport function encodeBase58(src: number[] | Uint8Array): string {\n  const acc: number[] = [];\n  let i = 0;\n  // count and skip leading zeros\n  while (i < src.length && src[i] === 0) {\n    i++;\n  }\n  let zeros = i;\n  while (i < src.length) {\n    let carry = src[i++];\n    let ii = 0;\n    while (carry !== 0 || ii < acc.length) {\n      const m = (acc[ii] || 0) * 256 + carry;\n      acc[ii++] = m % 58;\n      carry = Math.floor(m / 58);\n    }\n  }\n  while (zeros-- > 0) {\n    acc.push(0);\n  }\n  acc.reverse();\n  return String.fromCharCode(...acc.map((v) => base58alphabetBwd[v] + 49));\n}\n\nexport function decodeBase58Check(src: string): number[] {\n  const buffer = decodeBase58(src);\n  if (buffer.length < 4) {\n    throw new Base58DecodingError(`Data is too short ${buffer.length}`);\n  }\n\n  const data = buffer.slice(0, buffer.length - 4);\n  const sum = buffer.slice(buffer.length - 4);\n  const computed = sha256(sha256(data));\n  if (\n    sum[0] !== computed[0] ||\n    sum[1] !== computed[1] ||\n    sum[2] !== computed[2] ||\n    sum[3] !== computed[3]\n  ) {\n    throw new Base58DecodingError('Invalid checksum');\n  }\n\n  return data;\n}\n\nexport function encodeBase58Check(src: number[] | Uint8Array): string {\n  const sum = sha256(sha256(src));\n  return encodeBase58([...src, ...sum.slice(0, 4)]);\n}\n","/**\n *  @category Error\n *  @description Error that indicates an invalid contract being passed or used\n */\nexport class InvalidContractError extends Error {\n  public name = 'InvalidContractError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid type expression being passed or used\n */\nexport class InvalidTypeExpressionError extends Error {\n  public name = 'InvalidTypeExpressionError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid data expression being passed or used\n */\nexport class InvalidDataExpressionError extends Error {\n  public name = 'InvalidDataExpressionError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid contract entrypoint being referenced or passed\n */\nexport class InvalidEntrypointError extends Error {\n  public name = 'InvalidEntrypointError';\n  constructor(public entrypoint?: string) {\n    super(`Contract has no entrypoint named: '${entrypoint}'`);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates a failure happening when trying to encode Tezos ID\n */\nexport class TezosIdEncodeError extends Error {\n  public name = 'TezosIdEncodeError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates a general error happening when trying to create a LongInteger\n */\nexport class LongIntegerError extends Error {\n  public name = 'LongIntegerError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates a failure occurring when trying to parse a hex byte\n */\nexport class HexParseError extends Error {\n  public name = 'HexParseError';\n  constructor(public hexByte: string) {\n    super(`Unable to parse hex byte: ${hexByte}`);\n  }\n}\n","import { Prim, Expr, StringLiteral, IntLiteral } from './micheline';\nimport { decodeBase58Check, encodeBase58Check } from './base58';\nimport {\n  MichelsonData,\n  MichelsonDataPair,\n  MichelsonType,\n  MichelsonTypePair,\n} from './michelson-types';\nimport { HexParseError, LongIntegerError, TezosIdEncodeError } from './error';\n\nexport type Tuple<N extends number, T> = N extends 1\n  ? [T]\n  : N extends 2\n  ? [T, T]\n  : N extends 3\n  ? [T, T, T]\n  : N extends 4\n  ? [T, T, T, T]\n  : N extends 5\n  ? [T, T, T, T, T]\n  : N extends 6\n  ? [T, T, T, T, T, T]\n  : N extends 7\n  ? [T, T, T, T, T, T, T]\n  : N extends 8\n  ? [T, T, T, T, T, T, T, T]\n  : T[];\n\ntype RequiredProp<T, K extends keyof T> = Omit<T, K> & Required<Pick<T, K>>;\ntype OmitProp<T, K extends keyof T> = Omit<T, K> & { [P in K]?: undefined };\n\nexport type ReqArgs<T extends Prim> = RequiredProp<T, 'args'>;\nexport type NoArgs<T extends Prim> = OmitProp<T, 'args'>;\nexport type NoAnnots<T extends Prim> = OmitProp<T, 'annots'>;\n\nexport type Nullable<T> = { [P in keyof T]: T[P] | null };\n\n/**\n *  @category Error\n *  @description Error that indicates a Michelson failure occurring\n */\nexport class MichelsonError<T extends Expr = Expr> extends Error {\n  /**\n   * @param val Value of a AST node caused the error\n   * @param path Path to a node caused the error\n   * @param message An error message\n   */\n  constructor(public val: T, message?: string) {\n    super(message);\n    Object.setPrototypeOf(this, MichelsonError.prototype);\n  }\n}\n\nexport function isMichelsonError<T extends Expr = Expr>(err: unknown): err is MichelsonError<T> {\n  return err instanceof MichelsonError;\n}\n\nexport class MichelsonTypeError extends MichelsonError<MichelsonType | MichelsonType[]> {\n  public data?: Expr;\n\n  /**\n   * @param val Value of a type node caused the error\n   * @param data Value of a data node caused the error\n   * @param message An error message\n   */\n  constructor(val: MichelsonType | MichelsonType[], data?: Expr, message?: string) {\n    super(val, message);\n    if (data !== undefined) {\n      this.data = data;\n    }\n    Object.setPrototypeOf(this, MichelsonTypeError.prototype);\n  }\n}\n\n// Ad hoc big integer parser\nexport class LongInteger {\n  private neg = false;\n  private buf: number[] = [];\n\n  private append(c: number) {\n    let i = 0;\n    while (c !== 0 || i < this.buf.length) {\n      const m = (this.buf[i] || 0) * 10 + c;\n      this.buf[i++] = m % 256;\n      c = Math.floor(m / 256);\n    }\n  }\n\n  constructor(arg?: string | number) {\n    if (arg === undefined) {\n      return;\n    }\n    if (typeof arg === 'string') {\n      for (let i = 0; i < arg.length; i++) {\n        const c = arg.charCodeAt(i);\n        if (i === 0 && c === 0x2d) {\n          this.neg = true;\n        } else {\n          if (c < 0x30 || c > 0x39) {\n            throw new LongIntegerError(`unexpected character in integer constant: ${arg[i]}`);\n          }\n          this.append(c - 0x30);\n        }\n      }\n    } else if (arg < 0) {\n      this.neg = true;\n      this.append(-arg);\n    } else {\n      this.append(arg);\n    }\n  }\n\n  cmp(arg: LongInteger): number {\n    if (this.neg !== arg.neg) {\n      return (arg.neg ? 1 : 0) - (this.neg ? 1 : 0);\n    } else {\n      let ret = 0;\n      if (this.buf.length !== arg.buf.length) {\n        ret = this.buf.length < arg.buf.length ? -1 : 1;\n      } else if (this.buf.length !== 0) {\n        let i = arg.buf.length - 1;\n        while (i >= 0 && this.buf[i] === arg.buf[i]) {\n          i--;\n        }\n        ret = i < 0 ? 0 : this.buf[i] < arg.buf[i] ? -1 : 1;\n      }\n      return !this.neg ? ret : ret === 0 ? 0 : -ret;\n    }\n  }\n\n  get sign(): number {\n    return this.buf.length === 0 ? 0 : this.neg ? -1 : 1;\n  }\n}\n\nexport function parseBytes(s: string): number[] | null {\n  const ret: number[] = [];\n  for (let i = 0; i < s.length; i += 2) {\n    const x = parseInt(s.slice(i, i + 2), 16);\n    if (Number.isNaN(x)) {\n      return null;\n    }\n    ret.push(x);\n  }\n  return ret;\n}\n\nexport function compareBytes(a: number[] | Uint8Array, b: number[] | Uint8Array): number {\n  if (a.length !== b.length) {\n    return a.length < b.length ? -1 : 1;\n  } else if (a.length !== 0) {\n    let i = 0;\n    while (i < a.length && a[i] === b[i]) {\n      i++;\n    }\n    return i === a.length ? 0 : a[i] < b[i] ? -1 : 1;\n  } else {\n    return 0;\n  }\n}\n\nexport function isDecimal(x: string): boolean {\n  try {\n    new LongInteger(x);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function isNatural(x: string): boolean {\n  try {\n    return new LongInteger(x).sign >= 0;\n  } catch {\n    return false;\n  }\n}\n\nexport interface UnpackedAnnotations {\n  f?: string[];\n  t?: string[];\n  v?: string[];\n}\n\nexport interface UnpackAnnotationsOptions {\n  specialVar?: boolean; // CAR, CDR\n  emptyVar?: boolean;\n  specialFields?: boolean; // PAIR, LEFT, RIGHT\n  emptyFields?: boolean;\n}\n\nconst annRe = /^(@%|@%%|%@|[@:%]([_0-9a-zA-Z][_0-9a-zA-Z.%@]*)?)$/;\n\nexport function unpackAnnotations(\n  p: Prim | Expr[],\n  opt?: UnpackAnnotationsOptions\n): UnpackedAnnotations {\n  if (Array.isArray(p)) {\n    return {};\n  }\n\n  let field: string[] | undefined;\n  let type: string[] | undefined;\n  let vars: string[] | undefined;\n\n  if (p.annots !== undefined) {\n    for (const v of p.annots) {\n      if (v.length !== 0) {\n        if (\n          !annRe.test(v) ||\n          (!opt?.specialVar && (v === '@%' || v === '@%%')) ||\n          (!opt?.specialFields && v === '%@')\n        ) {\n          throw new MichelsonError(p, `${p.prim}: unexpected annotation: ${v}`);\n        }\n\n        switch (v[0]) {\n          case '%':\n            if (opt?.emptyFields || v.length > 1) {\n              field = field || [];\n              field.push(v);\n            }\n            break;\n          case ':':\n            if (v.length > 1) {\n              type = type || [];\n              type.push(v);\n            }\n            break;\n          case '@':\n            if (opt?.emptyVar || v.length > 1) {\n              vars = vars || [];\n              vars.push(v);\n            }\n            break;\n        }\n      }\n    }\n  }\n  return { f: field, t: type, v: vars };\n}\n\nexport type TezosIDType =\n  | 'BlockHash'\n  | 'OperationHash'\n  | 'OperationListHash'\n  | 'OperationListListHash'\n  | 'ProtocolHash'\n  | 'ContextHash'\n  | 'ED25519PublicKeyHash'\n  | 'SECP256K1PublicKeyHash'\n  | 'P256PublicKeyHash'\n  | 'ContractHash'\n  | 'CryptoboxPublicKeyHash'\n  | 'ED25519Seed'\n  | 'ED25519PublicKey'\n  | 'SECP256K1SecretKey'\n  | 'P256SecretKey'\n  | 'ED25519EncryptedSeed'\n  | 'SECP256K1EncryptedSecretKey'\n  | 'P256EncryptedSecretKey'\n  | 'SECP256K1PublicKey'\n  | 'P256PublicKey'\n  | 'SECP256K1Scalar'\n  | 'SECP256K1Element'\n  | 'ED25519SecretKey'\n  | 'ED25519Signature'\n  | 'SECP256K1Signature'\n  | 'P256Signature'\n  | 'GenericSignature'\n  | 'ChainID';\n\nexport type TezosIDPrefix = [number, number[]]; // payload length, prefix\n\nexport const tezosPrefix: Record<TezosIDType, TezosIDPrefix> = {\n  BlockHash: [32, [1, 52]], // B(51)\n  OperationHash: [32, [5, 116]], // o(51)\n  OperationListHash: [32, [133, 233]], // Lo(52)\n  OperationListListHash: [32, [29, 159, 109]], // LLo(53)\n  ProtocolHash: [32, [2, 170]], // P(51)\n  ContextHash: [32, [79, 199]], // Co(52)\n  ED25519PublicKeyHash: [20, [6, 161, 159]], // tz1(36)\n  SECP256K1PublicKeyHash: [20, [6, 161, 161]], // tz2(36)\n  P256PublicKeyHash: [20, [6, 161, 164]], // tz3(36)\n  ContractHash: [20, [2, 90, 121]], // KT1(36)\n  CryptoboxPublicKeyHash: [16, [153, 103]], // id(30)\n  ED25519Seed: [32, [13, 15, 58, 7]], // edsk(54)\n  ED25519PublicKey: [32, [13, 15, 37, 217]], // edpk(54)\n  SECP256K1SecretKey: [32, [17, 162, 224, 201]], // spsk(54)\n  P256SecretKey: [32, [16, 81, 238, 189]], // p2sk(54)\n  ED25519EncryptedSeed: [56, [7, 90, 60, 179, 41]], // edesk(88)\n  SECP256K1EncryptedSecretKey: [56, [9, 237, 241, 174, 150]], // spesk(88)\n  P256EncryptedSecretKey: [56, [9, 48, 57, 115, 171]], // p2esk(88)\n  SECP256K1PublicKey: [33, [3, 254, 226, 86]], // sppk(55)\n  P256PublicKey: [33, [3, 178, 139, 127]], // p2pk(55)\n  SECP256K1Scalar: [33, [38, 248, 136]], // SSp(53)\n  SECP256K1Element: [33, [5, 92, 0]], // GSp(54)\n  ED25519SecretKey: [64, [43, 246, 78, 7]], // edsk(98)\n  ED25519Signature: [64, [9, 245, 205, 134, 18]], // edsig(99)\n  SECP256K1Signature: [64, [13, 115, 101, 19, 63]], // spsig1(99)\n  P256Signature: [64, [54, 240, 44, 52]], // p2sig(98)\n  GenericSignature: [64, [4, 130, 43]], // sig(96)\n  ChainID: [4, [87, 82, 0]],\n};\n\nexport function checkDecodeTezosID<T extends TezosIDType[]>(\n  id: string,\n  ...types: T\n): [T[number], number[]] | null {\n  const buf = decodeBase58Check(id);\n  for (const t of types) {\n    const [plen, p] = tezosPrefix[t];\n    if (buf.length === plen + p.length) {\n      let i = 0;\n      while (i < p.length && buf[i] === p[i]) {\n        i++;\n      }\n      if (i === p.length) {\n        return [t, buf.slice(p.length)];\n      }\n    }\n  }\n  return null;\n}\n\nexport function encodeTezosID(id: TezosIDType, data: number[] | Uint8Array): string {\n  const [plen, p] = tezosPrefix[id];\n  if (data.length !== plen) {\n    throw new TezosIdEncodeError(`Incorrect data length for ${id}: ${data.length}`);\n  }\n  return encodeBase58Check([...p, ...data]);\n}\n\n// reassemble comb pair for transparent comparison etc. non-recursive!\ntype PairTypeOrDataPrim<I extends 'pair' | 'Pair'> = I extends 'pair'\n  ? Extract<MichelsonTypePair<MichelsonType[]>, Prim>\n  : Extract<MichelsonDataPair<MichelsonData[]>, Prim>;\nexport function unpackComb<I extends 'pair' | 'Pair'>(\n  id: I,\n  v: I extends 'pair' ? MichelsonTypePair<MichelsonType[]> : MichelsonDataPair<MichelsonData[]>\n): PairTypeOrDataPrim<I> {\n  const vv: MichelsonTypePair<MichelsonType[]> | MichelsonDataPair<MichelsonData[]> = v;\n  const args = Array.isArray(vv) ? vv : vv.args;\n  if (args.length === 2) {\n    // it's a way to make a union of two interfaces not an interface with two independent properties of union types\n    const ret =\n      id === 'pair'\n        ? {\n            prim: 'pair',\n            args,\n          }\n        : {\n            prim: 'Pair',\n            args,\n          };\n    return ret as PairTypeOrDataPrim<I>;\n  }\n\n  return {\n    ...(Array.isArray(vv) ? { prim: id } : vv),\n    args: [\n      args[0],\n      {\n        prim: id,\n        args: args.slice(1),\n      },\n    ],\n  } as PairTypeOrDataPrim<I>;\n}\n\nexport function isPairType(t: MichelsonType): t is MichelsonTypePair<MichelsonType[]> {\n  return Array.isArray(t) || t.prim === 'pair';\n}\n\nexport function isPairData(d: Expr): d is MichelsonDataPair<MichelsonData[]> {\n  return Array.isArray(d) || ('prim' in d && d.prim === 'Pair');\n}\n\nconst rfc3339Re =\n  /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])[T ]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\\.[0-9]+)?(Z|[+-]([01][0-9]|2[0-3]):([0-5][0-9]))$/;\n\nexport function parseDate(a: StringLiteral | IntLiteral): Date | null {\n  if ('string' in a) {\n    if (isNatural(a.string)) {\n      return new Date(parseInt(a.string, 10));\n    } else if (rfc3339Re.test(a.string)) {\n      const x = new Date(a.string);\n      if (!Number.isNaN(x.valueOf)) {\n        return x;\n      }\n    }\n  } else if (isDecimal(a.int)) {\n    return new Date(parseInt(a.int, 10));\n  }\n  return null;\n}\n\nexport function parseHex(s: string): number[] {\n  const res: number[] = [];\n  for (let i = 0; i < s.length; i += 2) {\n    const ss = s.slice(i, i + 2);\n    const x = parseInt(ss, 16);\n    if (Number.isNaN(x)) {\n      throw new HexParseError(ss);\n    }\n    res.push(x);\n  }\n  return res;\n}\n\nexport function hexBytes(bytes: number[]): string {\n  return bytes.map((x) => ((x >> 4) & 0xf).toString(16) + (x & 0xf).toString(16)).join('');\n}\n","import { Prim, Expr, IntLiteral, StringLiteral } from './micheline';\nimport { Tuple, NoArgs, ReqArgs, MichelsonError } from './utils';\nimport {\n  MichelsonCode,\n  MichelsonType,\n  MichelsonData,\n  MichelsonContract,\n  MichelsonNoArgInstruction,\n  MichelsonInstruction,\n  InstructionList,\n  MichelsonTypeID,\n  MichelsonSimpleComparableTypeID,\n} from './michelson-types';\n\n// Michelson validator\n\nconst maxViewNameLength = 31;\n\nconst noArgInstructionIDs: Record<MichelsonNoArgInstruction['prim'], true> = {\n  ABS: true,\n  ADD: true,\n  ADDRESS: true,\n  AMOUNT: true,\n  AND: true,\n  APPLY: true,\n  BALANCE: true,\n  BLAKE2B: true,\n  CAR: true,\n  CDR: true,\n  CHAIN_ID: true,\n  CHECK_SIGNATURE: true,\n  COMPARE: true,\n  CONCAT: true,\n  CONS: true,\n  EDIV: true,\n  EQ: true,\n  EXEC: true,\n  FAILWITH: true,\n  GE: true,\n  GET_AND_UPDATE: true,\n  GT: true,\n  HASH_KEY: true,\n  IMPLICIT_ACCOUNT: true,\n  INT: true,\n  ISNAT: true,\n  JOIN_TICKETS: true,\n  KECCAK: true,\n  LE: true,\n  LEVEL: true,\n  LSL: true,\n  LSR: true,\n  LT: true,\n  MEM: true,\n  MUL: true,\n  NEG: true,\n  NEQ: true,\n  NEVER: true,\n  NOT: true,\n  NOW: true,\n  OR: true,\n  PACK: true,\n  PAIRING_CHECK: true,\n  READ_TICKET: true,\n  SAPLING_VERIFY_UPDATE: true,\n  SELF: true,\n  SELF_ADDRESS: true,\n  SENDER: true,\n  SET_DELEGATE: true,\n  SHA256: true,\n  SHA3: true,\n  SHA512: true,\n  SIZE: true,\n  SLICE: true,\n  SOME: true,\n  SOURCE: true,\n  SPLIT_TICKET: true,\n  SUB: true,\n  SWAP: true,\n  TICKET: true,\n  TOTAL_VOTING_POWER: true,\n  TRANSFER_TOKENS: true,\n  UNIT: true,\n  VOTING_POWER: true,\n  XOR: true,\n  RENAME: true,\n  OPEN_CHEST: true,\n  SUB_MUTEZ: true,\n};\n\nexport const instructionIDs: Record<MichelsonInstruction['prim'], true> = Object.assign(\n  {},\n  noArgInstructionIDs,\n  {\n    CONTRACT: true,\n    CREATE_CONTRACT: true,\n    DIG: true,\n    DIP: true,\n    DROP: true,\n    DUG: true,\n    DUP: true,\n    EMPTY_BIG_MAP: true,\n    EMPTY_MAP: true,\n    EMPTY_SET: true,\n    GET: true,\n    IF: true,\n    IF_CONS: true,\n    IF_LEFT: true,\n    IF_NONE: true,\n    ITER: true,\n    LAMBDA: true,\n    LEFT: true,\n    LOOP: true,\n    LOOP_LEFT: true,\n    MAP: true,\n    NIL: true,\n    NONE: true,\n    PAIR: true,\n    PUSH: true,\n    RIGHT: true,\n    SAPLING_EMPTY_STATE: true,\n    UNPACK: true,\n    UNPAIR: true,\n    UPDATE: true,\n    CAST: true,\n    VIEW: true,\n  } as const\n);\n\nconst simpleComparableTypeIDs: Record<MichelsonSimpleComparableTypeID, true> = {\n  unit: true,\n  never: true,\n  bool: true,\n  int: true,\n  nat: true,\n  string: true,\n  chain_id: true,\n  bytes: true,\n  mutez: true,\n  key_hash: true,\n  key: true,\n  signature: true,\n  timestamp: true,\n  address: true,\n};\n\nconst typeIDs: Record<MichelsonTypeID, true> = Object.assign({}, simpleComparableTypeIDs, {\n  or: true,\n  pair: true,\n  set: true,\n  big_map: true,\n  contract: true,\n  lambda: true,\n  list: true,\n  map: true,\n  operation: true,\n  option: true,\n  bls12_381_g1: true,\n  bls12_381_g2: true,\n  bls12_381_fr: true,\n  sapling_transaction: true,\n  sapling_state: true,\n  ticket: true,\n  chest_key: true,\n  chest: true,\n} as const);\n\nexport class MichelsonValidationError extends MichelsonError {\n  /**\n   * @param val Value of a node caused the error\n   * @param message An error message\n   */\n  constructor(public val: Expr, message?: string) {\n    super(val, message);\n    Object.setPrototypeOf(this, MichelsonValidationError.prototype);\n  }\n}\n\nfunction isPrim(ex: Expr): ex is Prim {\n  return 'prim' in ex;\n}\n\nfunction isPrimOrSeq(ex: Expr): ex is Prim | Expr[] {\n  return Array.isArray(ex) || 'prim' in ex;\n}\n\nfunction assertPrim(ex: Expr): ex is Prim {\n  if (isPrim(ex)) {\n    return true;\n  }\n  throw new MichelsonValidationError(ex, 'prim expression expected');\n}\n\nfunction assertSeq(ex: Expr): ex is Expr[] {\n  if (Array.isArray(ex)) {\n    return true;\n  }\n  throw new MichelsonValidationError(ex, 'sequence expression expected');\n}\n\nfunction assertPrimOrSeq(ex: Expr): ex is Prim | Expr[] {\n  if (isPrimOrSeq(ex)) {\n    return true;\n  }\n  throw new MichelsonValidationError(ex, 'prim or sequence expression expected');\n}\n\nfunction assertNatural(i: IntLiteral) {\n  if (i.int[0] === '-') {\n    throw new MichelsonValidationError(i, 'natural number expected');\n  }\n}\n\nfunction assertIntLiteral(ex: Expr): ex is IntLiteral {\n  if ('int' in ex) {\n    return true;\n  }\n  throw new MichelsonValidationError(ex, 'int literal expected');\n}\n\nfunction assertStringLiteral(ex: Expr): ex is StringLiteral {\n  if ('string' in ex) {\n    return true;\n  }\n  throw new MichelsonValidationError(ex, 'string literal expected');\n}\n\nfunction assertArgs<N extends number>(\n  ex: Prim,\n  n: N\n): ex is N extends 0 ? NoArgs<Prim<string>> : ReqArgs<Prim<string, Tuple<N, Expr>>> {\n  if ((n === 0 && ex.args === undefined) || ex.args?.length === n) {\n    return true;\n  }\n  throw new MichelsonValidationError(ex, `${n} arguments expected`);\n}\n\n/**\n * Checks if the node is a valid Michelson code (sequence of instructions).\n * This is a type guard function which either returns true of throws an exception.\n * @param ex An AST node\n */\nexport function assertMichelsonInstruction(ex: Expr): ex is MichelsonCode {\n  if (Array.isArray(ex)) {\n    for (const n of ex) {\n      if (!Array.isArray(n) && !isPrim(n)) {\n        throw new MichelsonValidationError(ex, 'sequence or prim expected');\n      }\n      assertMichelsonInstruction(n);\n    }\n    return true;\n  }\n\n  if (assertPrim(ex)) {\n    if (Object.prototype.hasOwnProperty.call(noArgInstructionIDs, ex.prim)) {\n      assertArgs(ex, 0);\n      return true;\n    }\n\n    switch (ex.prim) {\n      case 'DROP':\n      case 'PAIR':\n      case 'UNPAIR':\n      case 'DUP':\n      case 'UPDATE':\n      case 'GET':\n        if (ex.args !== undefined && assertArgs(ex, 1)) {\n          /* istanbul ignore else */\n          if (assertIntLiteral(ex.args[0])) {\n            assertNatural(ex.args[0]);\n          }\n        }\n        break;\n\n      case 'DIG':\n      case 'DUG':\n      case 'SAPLING_EMPTY_STATE':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 1)) {\n          /* istanbul ignore else */\n          if (assertIntLiteral(ex.args[0])) {\n            assertNatural(ex.args[0]);\n          }\n        }\n        break;\n\n      case 'NONE':\n      case 'LEFT':\n      case 'RIGHT':\n      case 'NIL':\n      case 'CAST':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 1)) {\n          assertMichelsonType(ex.args[0]);\n        }\n        break;\n\n      case 'UNPACK':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 1)) {\n          assertMichelsonPackableType(ex.args[0]);\n        }\n        break;\n\n      case 'CONTRACT':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 1)) {\n          assertMichelsonPassableType(ex.args[0]);\n        }\n        break;\n\n      case 'IF_NONE':\n      case 'IF_LEFT':\n      case 'IF_CONS':\n      case 'IF':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 2)) {\n          /* istanbul ignore else */\n          if (assertSeq(ex.args[0])) {\n            assertMichelsonInstruction(ex.args[0]);\n          }\n          /* istanbul ignore else */\n          if (assertSeq(ex.args[1])) {\n            assertMichelsonInstruction(ex.args[1]);\n          }\n        }\n        break;\n\n      case 'MAP':\n      case 'ITER':\n      case 'LOOP':\n      case 'LOOP_LEFT':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 1)) {\n          assertMichelsonInstruction(ex.args[0]);\n        }\n        break;\n\n      case 'CREATE_CONTRACT':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 1)) {\n          assertMichelsonContract(ex.args[0]);\n        }\n        break;\n\n      case 'DIP':\n        if (ex.args?.length === 2) {\n          /* istanbul ignore else */\n          if (assertIntLiteral(ex.args[0])) {\n            assertNatural(ex.args[0]);\n          }\n          /* istanbul ignore else */\n          if (assertSeq(ex.args[1])) {\n            assertMichelsonInstruction(ex.args[1]);\n          }\n        } else if (ex.args?.length === 1) {\n          /* istanbul ignore else */\n          if (assertSeq(ex.args[0])) {\n            assertMichelsonInstruction(ex.args[0]);\n          }\n        } else {\n          throw new MichelsonValidationError(ex, '1 or 2 arguments expected');\n        }\n        break;\n\n      case 'PUSH':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 2)) {\n          assertMichelsonPushableType(ex.args[0]);\n          assertMichelsonData(ex.args[1]);\n        }\n        break;\n\n      case 'EMPTY_SET':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 1)) {\n          assertMichelsonComparableType(ex.args[0]);\n        }\n        break;\n\n      case 'EMPTY_MAP':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 2)) {\n          assertMichelsonComparableType(ex.args[0]);\n          assertMichelsonType(ex.args[1]);\n        }\n        break;\n\n      case 'EMPTY_BIG_MAP':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 2)) {\n          assertMichelsonComparableType(ex.args[0]);\n          assertMichelsonBigMapStorableType(ex.args[1]);\n        }\n        break;\n\n      case 'LAMBDA':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 3)) {\n          assertMichelsonType(ex.args[0]);\n          assertMichelsonType(ex.args[1]);\n          /* istanbul ignore else */\n          if (assertSeq(ex.args[2])) {\n            assertMichelsonInstruction(ex.args[2]);\n          }\n        }\n        break;\n\n      case 'VIEW':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 2)) {\n          if (assertStringLiteral(ex.args[0])) {\n            assertViewNameValid(ex.args[0]);\n          }\n          if (assertMichelsonType(ex.args[1])) {\n            assertMichelsonPushableType(ex.args[1]);\n          }\n        }\n        break;\n\n      default:\n        throw new MichelsonValidationError(ex, 'instruction expected');\n    }\n  }\n  return true;\n}\n\nexport function assertMichelsonComparableType(ex: Expr): ex is MichelsonType {\n  /* istanbul ignore else */\n  if (assertPrimOrSeq(ex)) {\n    if (Array.isArray(ex) || ex.prim === 'pair' || ex.prim === 'or' || ex.prim === 'option') {\n      traverseType(ex, (ex) => assertMichelsonComparableType(ex));\n    } else if (!Object.prototype.hasOwnProperty.call(simpleComparableTypeIDs, ex.prim)) {\n      throw new MichelsonValidationError(ex, `${ex.prim}: type is not comparable`);\n    }\n  }\n  return true;\n}\n\nexport function assertMichelsonPackableType(ex: Expr): ex is MichelsonType {\n  /* istanbul ignore else */\n  if (assertPrimOrSeq(ex)) {\n    if (isPrim(ex)) {\n      if (\n        !Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) ||\n        ex.prim === 'big_map' ||\n        ex.prim === 'operation' ||\n        ex.prim === 'sapling_state' ||\n        ex.prim === 'ticket'\n      ) {\n        throw new MichelsonValidationError(\n          ex,\n          `${ex.prim}: type can't be used inside PACK/UNPACK instructions`\n        );\n      }\n      traverseType(ex, (ex) => assertMichelsonPackableType(ex));\n    }\n  }\n  return true;\n}\n\nexport function assertMichelsonPushableType(ex: Expr): ex is MichelsonType {\n  /* istanbul ignore else */\n  if (assertPrimOrSeq(ex)) {\n    if (isPrim(ex)) {\n      if (\n        !Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) ||\n        ex.prim === 'big_map' ||\n        ex.prim === 'operation' ||\n        ex.prim === 'sapling_state' ||\n        ex.prim === 'ticket' ||\n        ex.prim === 'contract'\n      ) {\n        throw new MichelsonValidationError(ex, `${ex.prim}: type can't be pushed`);\n      }\n      traverseType(ex, (ex) => assertMichelsonPushableType(ex));\n    }\n  }\n  return true;\n}\n\nexport function assertMichelsonStorableType(ex: Expr): ex is MichelsonType {\n  /* istanbul ignore else */\n  if (assertPrimOrSeq(ex)) {\n    if (isPrim(ex)) {\n      if (\n        !Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) ||\n        ex.prim === 'operation' ||\n        ex.prim === 'contract'\n      ) {\n        throw new MichelsonValidationError(\n          ex,\n          `${ex.prim}: type can't be used as part of a storage`\n        );\n      }\n      traverseType(ex, (ex) => assertMichelsonStorableType(ex));\n    }\n  }\n  return true;\n}\n\nexport function assertMichelsonPassableType(ex: Expr): ex is MichelsonType {\n  /* istanbul ignore else */\n  if (assertPrimOrSeq(ex)) {\n    if (isPrim(ex)) {\n      if (!Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) || ex.prim === 'operation') {\n        throw new MichelsonValidationError(\n          ex,\n          `${ex.prim}: type can't be used as part of a parameter`\n        );\n      }\n      traverseType(ex, (ex) => assertMichelsonPassableType(ex));\n    }\n  }\n  return true;\n}\n\nexport function assertMichelsonBigMapStorableType(ex: Expr): ex is MichelsonType {\n  /* istanbul ignore else */\n  if (assertPrimOrSeq(ex)) {\n    if (isPrim(ex)) {\n      if (\n        !Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) ||\n        ex.prim === 'big_map' ||\n        ex.prim === 'operation' ||\n        ex.prim === 'sapling_state'\n      ) {\n        throw new MichelsonValidationError(ex, `${ex.prim}: type can't be used inside a big_map`);\n      }\n      traverseType(ex, (ex) => assertMichelsonBigMapStorableType(ex));\n    }\n  }\n  return true;\n}\n\nconst viewRe = new RegExp('^[a-zA-Z0-9_.%@]*$');\n\nexport function assertViewNameValid(name: StringLiteral): void {\n  if (name.string.length > maxViewNameLength) {\n    throw new MichelsonValidationError(name, `view name too long: ${name.string}`);\n  }\n  if (!viewRe.test(name.string)) {\n    throw new MichelsonValidationError(name, `invalid character(s) in view name: ${name.string}`);\n  }\n}\n\n/**\n * Checks if the node is a valid Michelson type expression.\n * This is a type guard function which either returns true of throws an exception.\n * @param ex An AST node\n */\nexport function assertMichelsonType(ex: Expr): ex is MichelsonType {\n  /* istanbul ignore else */\n  if (assertPrimOrSeq(ex)) {\n    if (isPrim(ex)) {\n      if (!Object.prototype.hasOwnProperty.call(typeIDs, ex.prim)) {\n        throw new MichelsonValidationError(ex, 'type expected');\n      }\n      traverseType(ex, (ex) => assertMichelsonType(ex));\n    }\n  }\n  return true;\n}\n\nfunction traverseType(ex: Prim | Expr[], cb: (ex: Prim | Expr[]) => void): ex is MichelsonType {\n  if (Array.isArray(ex) || ex.prim === 'pair') {\n    const args = Array.isArray(ex) ? ex : ex.args;\n    if (args === undefined || args.length < 2) {\n      throw new MichelsonValidationError(ex, 'at least 2 arguments expected');\n    }\n    args.forEach((a) => {\n      if (assertPrimOrSeq(a)) {\n        cb(a);\n      }\n    });\n    return true;\n  }\n\n  switch (ex.prim) {\n    case 'option':\n    case 'list':\n      /* istanbul ignore else */\n      if (assertArgs(ex, 1) && assertPrimOrSeq(ex.args[0])) {\n        cb(ex.args[0]);\n      }\n      break;\n\n    case 'contract':\n      /* istanbul ignore else */\n      if (assertArgs(ex, 1)) {\n        assertMichelsonPassableType(ex.args[0]);\n      }\n      break;\n\n    case 'or':\n      /* istanbul ignore else */\n      if (assertArgs(ex, 2) && assertPrimOrSeq(ex.args[0]) && assertPrimOrSeq(ex.args[1])) {\n        cb(ex.args[0]);\n        cb(ex.args[1]);\n      }\n      break;\n\n    case 'lambda':\n      /* istanbul ignore else */\n      if (assertArgs(ex, 2)) {\n        assertMichelsonType(ex.args[0]);\n        assertMichelsonType(ex.args[1]);\n      }\n      break;\n\n    case 'set':\n      /* istanbul ignore else */\n      if (assertArgs(ex, 1)) {\n        assertMichelsonComparableType(ex.args[0]);\n      }\n      break;\n\n    case 'map':\n      /* istanbul ignore else */\n      if (assertArgs(ex, 2) && assertPrimOrSeq(ex.args[0]) && assertPrimOrSeq(ex.args[1])) {\n        assertMichelsonComparableType(ex.args[0]);\n        cb(ex.args[1]);\n      }\n      break;\n\n    case 'big_map':\n      /* istanbul ignore else */\n      if (assertArgs(ex, 2) && assertPrimOrSeq(ex.args[0]) && assertPrimOrSeq(ex.args[1])) {\n        assertMichelsonComparableType(ex.args[0]);\n        assertMichelsonBigMapStorableType(ex.args[1]);\n        cb(ex.args[1]);\n      }\n      break;\n\n    case 'ticket':\n      /* istanbul ignore else */\n      if (assertArgs(ex, 1) && assertPrimOrSeq(ex.args[0])) {\n        assertMichelsonComparableType(ex.args[0]);\n      }\n      break;\n\n    case 'sapling_state':\n    case 'sapling_transaction':\n      if (assertArgs(ex, 1)) {\n        assertIntLiteral(ex.args[0]);\n      }\n      break;\n\n    default:\n      assertArgs(ex, 0);\n  }\n\n  return true;\n}\n/**\n * Checks if the node is a valid Michelson data literal such as `(Pair {Elt \"0\" 0} 0)`.\n * This is a type guard function which either returns true of throws an exception.\n * @param ex An AST node\n */\nexport function assertMichelsonData(ex: Expr): ex is MichelsonData {\n  if ('int' in ex || 'string' in ex || 'bytes' in ex) {\n    return true;\n  }\n\n  if (Array.isArray(ex)) {\n    let mapElts = 0;\n    for (const n of ex) {\n      if (isPrim(n) && n.prim === 'Elt') {\n        /* istanbul ignore else */\n        if (assertArgs(n, 2)) {\n          assertMichelsonData(n.args[0]);\n          assertMichelsonData(n.args[1]);\n        }\n        mapElts++;\n      } else {\n        assertMichelsonData(n);\n      }\n    }\n\n    if (mapElts !== 0 && mapElts !== ex.length) {\n      throw new MichelsonValidationError(ex, \"data entries and map elements can't be intermixed\");\n    }\n    return true;\n  }\n\n  if (isPrim(ex)) {\n    switch (ex.prim) {\n      case 'Unit':\n      case 'True':\n      case 'False':\n      case 'None':\n        assertArgs(ex, 0);\n        break;\n\n      case 'Pair':\n        /* istanbul ignore else */\n        if (ex.args === undefined || ex.args.length < 2) {\n          throw new MichelsonValidationError(ex, 'at least 2 arguments expected');\n        }\n        for (const a of ex.args) {\n          assertMichelsonData(a);\n        }\n        break;\n\n      case 'Left':\n      case 'Right':\n      case 'Some':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 1)) {\n          assertMichelsonData(ex.args[0]);\n        }\n        break;\n\n      default:\n        if (Object.prototype.hasOwnProperty.call(instructionIDs, ex.prim)) {\n          assertMichelsonInstruction(ex);\n        } else {\n          throw new MichelsonValidationError(ex, 'data entry or instruction expected');\n        }\n    }\n  } else {\n    throw new MichelsonValidationError(ex, 'data entry expected');\n  }\n\n  return true;\n}\n\n/**\n * Checks if the node is a valid Michelson smart contract source containing all required and valid properties such as `parameter`, `storage` and `code`.\n * This is a type guard function which either returns true of throws an exception.\n * @param ex An AST node\n */\nexport function assertMichelsonContract(ex: Expr): ex is MichelsonContract {\n  /* istanbul ignore else */\n  if (assertSeq(ex)) {\n    const toplevelSec: { [sec: string]: boolean } = {};\n    const views: { [name: string]: boolean } = {};\n    for (const sec of ex) {\n      if (assertPrim(sec)) {\n        if (sec.prim !== 'view') {\n          if (sec.prim in toplevelSec) {\n            throw new MichelsonValidationError(ex, `duplicate contract section: ${sec.prim}`);\n          }\n          toplevelSec[sec.prim] = true;\n        }\n\n        /* istanbul ignore else */\n        switch (sec.prim) {\n          case 'code':\n            if (assertArgs(sec, 1)) {\n              /* istanbul ignore else */\n              if (assertSeq(sec.args[0])) {\n                assertMichelsonInstruction(sec.args[0]);\n              }\n            }\n            break;\n\n          case 'parameter':\n            if (assertArgs(sec, 1)) {\n              assertMichelsonPassableType(sec.args[0]);\n            }\n            break;\n\n          case 'storage':\n            if (assertArgs(sec, 1)) {\n              assertMichelsonStorableType(sec.args[0]);\n            }\n            break;\n\n          case 'view':\n            if (assertArgs(sec, 4)) {\n              if (assertStringLiteral(sec.args[0])) {\n                const name = sec.args[0];\n                if (name.string in views) {\n                  throw new MichelsonValidationError(ex, `duplicate view name: ${name.string}`);\n                }\n                views[name.string] = true;\n                assertViewNameValid(name);\n              }\n\n              assertMichelsonPushableType(sec.args[1]);\n              assertMichelsonPushableType(sec.args[2]);\n              if (assertSeq(sec.args[3])) {\n                assertMichelsonInstruction(sec.args[3]);\n              }\n            }\n            break;\n\n          default:\n            throw new MichelsonValidationError(ex, `unexpected contract section: ${sec.prim}`);\n        }\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * Checks if the node is a valid Michelson smart contract source containing all required and valid properties such as `parameter`, `storage` and `code`.\n * @param ex An AST node\n */\nexport function isMichelsonScript(ex: Expr): ex is MichelsonContract {\n  try {\n    assertMichelsonContract(ex);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Checks if the node is a valid Michelson data literal such as `(Pair {Elt \"0\" 0} 0)`.\n * @param ex An AST node\n */\nexport function isMichelsonData(ex: Expr): ex is MichelsonData {\n  try {\n    assertMichelsonData(ex);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Checks if the node is a valid Michelson code (sequence of instructions).\n * @param ex An AST node\n */\nexport function isMichelsonCode(ex: Expr): ex is InstructionList {\n  try {\n    assertMichelsonInstruction(ex);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Checks if the node is a valid Michelson type expression.\n * @param ex An AST node\n */\nexport function isMichelsonType(ex: Expr): ex is MichelsonType {\n  try {\n    assertMichelsonType(ex);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function isInstruction(p: Prim): p is MichelsonInstruction {\n  return Object.prototype.hasOwnProperty.call(instructionIDs, p.prim);\n}\n\nexport function assertDataListIfAny(d: MichelsonData): d is MichelsonData[] {\n  if (!Array.isArray(d)) {\n    return false;\n  }\n  for (const v of d) {\n    if ('prim' in v) {\n      if (isInstruction(v)) {\n        throw new MichelsonError(d, `Instruction outside of a lambda: ${JSON.stringify(d)}`);\n      } else if (v.prim === 'Elt') {\n        throw new MichelsonError(d, `Elt item outside of a map literal: ${JSON.stringify(d)}`);\n      }\n    }\n  }\n  return true;\n}\n","import { BytesLiteral, Expr, IntLiteral, Prim } from './micheline';\nimport {\n  MichelsonTypeID,\n  MichelsonDataID,\n  MichelsonSectionID,\n  MichelsonInstructionID,\n  MichelsonData,\n  MichelsonType,\n  MichelsonDataOr,\n  MichelsonDataOption,\n  MichelsonInstruction,\n} from './michelson-types';\nimport {\n  assertDataListIfAny,\n  assertMichelsonData,\n  assertMichelsonInstruction,\n} from './michelson-validator';\nimport {\n  checkDecodeTezosID,\n  encodeTezosID,\n  hexBytes,\n  isPairData,\n  isPairType,\n  MichelsonTypeError,\n  parseBytes,\n  parseDate,\n  parseHex,\n  unpackComb,\n} from './utils';\n\ntype PrimID =\n  | MichelsonTypeID\n  | MichelsonDataID\n  | MichelsonSectionID\n  | MichelsonInstructionID\n  | 'Elt'\n  | 'constant';\n\nconst primitives: PrimID[] = [\n  'parameter',\n  'storage',\n  'code',\n  'False',\n  'Elt',\n  'Left',\n  'None',\n  'Pair',\n  'Right',\n  'Some',\n  'True',\n  'Unit',\n  'PACK',\n  'UNPACK',\n  'BLAKE2B',\n  'SHA256',\n  'SHA512',\n  'ABS',\n  'ADD',\n  'AMOUNT',\n  'AND',\n  'BALANCE',\n  'CAR',\n  'CDR',\n  'CHECK_SIGNATURE',\n  'COMPARE',\n  'CONCAT',\n  'CONS',\n  'CREATE_ACCOUNT',\n  'CREATE_CONTRACT',\n  'IMPLICIT_ACCOUNT',\n  'DIP',\n  'DROP',\n  'DUP',\n  'EDIV',\n  'EMPTY_MAP',\n  'EMPTY_SET',\n  'EQ',\n  'EXEC',\n  'FAILWITH',\n  'GE',\n  'GET',\n  'GT',\n  'HASH_KEY',\n  'IF',\n  'IF_CONS',\n  'IF_LEFT',\n  'IF_NONE',\n  'INT',\n  'LAMBDA',\n  'LE',\n  'LEFT',\n  'LOOP',\n  'LSL',\n  'LSR',\n  'LT',\n  'MAP',\n  'MEM',\n  'MUL',\n  'NEG',\n  'NEQ',\n  'NIL',\n  'NONE',\n  'NOT',\n  'NOW',\n  'OR',\n  'PAIR',\n  'PUSH',\n  'RIGHT',\n  'SIZE',\n  'SOME',\n  'SOURCE',\n  'SENDER',\n  'SELF',\n  'STEPS_TO_QUOTA',\n  'SUB',\n  'SWAP',\n  'TRANSFER_TOKENS',\n  'SET_DELEGATE',\n  'UNIT',\n  'UPDATE',\n  'XOR',\n  'ITER',\n  'LOOP_LEFT',\n  'ADDRESS',\n  'CONTRACT',\n  'ISNAT',\n  'CAST',\n  'RENAME',\n  'bool',\n  'contract',\n  'int',\n  'key',\n  'key_hash',\n  'lambda',\n  'list',\n  'map',\n  'big_map',\n  'nat',\n  'option',\n  'or',\n  'pair',\n  'set',\n  'signature',\n  'string',\n  'bytes',\n  'mutez',\n  'timestamp',\n  'unit',\n  'operation',\n  'address',\n  'SLICE',\n  'DIG',\n  'DUG',\n  'EMPTY_BIG_MAP',\n  'APPLY',\n  'chain_id',\n  'CHAIN_ID',\n  'LEVEL',\n  'SELF_ADDRESS',\n  'never',\n  'NEVER',\n  'UNPAIR',\n  'VOTING_POWER',\n  'TOTAL_VOTING_POWER',\n  'KECCAK',\n  'SHA3',\n  'PAIRING_CHECK',\n  'bls12_381_g1',\n  'bls12_381_g2',\n  'bls12_381_fr',\n  'sapling_state',\n  'sapling_transaction',\n  'SAPLING_EMPTY_STATE',\n  'SAPLING_VERIFY_UPDATE',\n  'ticket',\n  'TICKET',\n  'READ_TICKET',\n  'SPLIT_TICKET',\n  'JOIN_TICKETS',\n  'GET_AND_UPDATE',\n  'chest',\n  'chest_key',\n  'OPEN_CHEST',\n  'VIEW',\n  'view',\n  'constant',\n  'SUB_MUTEZ',\n];\n\nconst primTags: { [key in PrimID]?: number } & { [key: string]: number | undefined } =\n  Object.assign({}, ...primitives.map((v, i) => ({ [v]: i })));\n\nenum Tag {\n  Int = 0,\n  String = 1,\n  Sequence = 2,\n  Prim0 = 3,\n  Prim0Annot = 4,\n  Prim1 = 5,\n  Prim1Annot = 6,\n  Prim2 = 7,\n  Prim2Annot = 8,\n  Prim = 9,\n  Bytes = 10,\n}\nclass Writer {\n  public buffer: number[] = [];\n\n  get length(): number {\n    return this.buffer.length;\n  }\n\n  writeBytes(val: number[]) {\n    this.buffer.push(...val.map((v) => v & 0xff));\n  }\n\n  writeUint8(val: number) {\n    const v = val | 0;\n    this.buffer.push(v & 0xff);\n  }\n\n  writeUint16(val: number) {\n    const v = val | 0;\n    this.buffer.push((v >> 8) & 0xff);\n    this.buffer.push(v & 0xff);\n  }\n\n  writeUint32(val: number) {\n    const v = val | 0;\n    this.buffer.push((v >> 24) & 0xff);\n    this.buffer.push((v >> 16) & 0xff);\n    this.buffer.push((v >> 8) & 0xff);\n    this.buffer.push(v & 0xff);\n  }\n\n  writeInt8(val: number) {\n    this.writeUint8(val);\n  }\n\n  writeInt16(val: number) {\n    this.writeUint16(val);\n  }\n\n  writeInt32(val: number) {\n    this.writeUint32(val);\n  }\n}\n\nconst boundsErr = new Error('bounds out of range');\nclass Reader {\n  constructor(\n    private buffer: number[] | Uint8Array,\n    private idx: number = 0,\n    private cap: number = buffer.length\n  ) {}\n\n  /** Remaining length */\n  get length(): number {\n    return this.cap - this.idx;\n  }\n\n  readBytes(len: number): number[] | Uint8Array {\n    if (this.cap - this.idx < len) {\n      throw boundsErr;\n    }\n    const ret = this.buffer.slice(this.idx, this.idx + len);\n    this.idx += len;\n    return ret;\n  }\n\n  reader(len: number): Reader {\n    if (this.cap - this.idx < len) {\n      throw boundsErr;\n    }\n    const ret = new Reader(this.buffer, this.idx, this.idx + len);\n    this.idx += len;\n    return ret;\n  }\n\n  copy(): Reader {\n    return new Reader(this.buffer, this.idx, this.cap);\n  }\n\n  readUint8(): number {\n    if (this.cap - this.idx < 1) {\n      throw boundsErr;\n    }\n    return this.buffer[this.idx++] >>> 0;\n  }\n\n  readUint16(): number {\n    if (this.cap - this.idx < 2) {\n      throw boundsErr;\n    }\n    const x0 = this.buffer[this.idx++];\n    const x1 = this.buffer[this.idx++];\n    return ((x0 << 8) | x1) >>> 0;\n  }\n\n  readUint32(): number {\n    if (this.cap - this.idx < 4) {\n      throw boundsErr;\n    }\n    const x0 = this.buffer[this.idx++];\n    const x1 = this.buffer[this.idx++];\n    const x2 = this.buffer[this.idx++];\n    const x3 = this.buffer[this.idx++];\n    return ((x0 << 24) | (x1 << 16) | (x2 << 8) | x3) >>> 0;\n  }\n\n  readInt8(): number {\n    if (this.cap - this.idx < 1) {\n      throw boundsErr;\n    }\n    const x = this.buffer[this.idx++];\n    return (x << 24) >> 24;\n  }\n\n  readInt16(): number {\n    if (this.cap - this.idx < 2) {\n      throw boundsErr;\n    }\n    const x0 = this.buffer[this.idx++];\n    const x1 = this.buffer[this.idx++];\n    return (((x0 << 8) | x1) << 16) >> 16;\n  }\n\n  readInt32(): number {\n    if (this.cap - this.idx < 4) {\n      throw boundsErr;\n    }\n    const x0 = this.buffer[this.idx++];\n    const x1 = this.buffer[this.idx++];\n    const x2 = this.buffer[this.idx++];\n    const x3 = this.buffer[this.idx++];\n    return (x0 << 24) | (x1 << 16) | (x2 << 8) | x3;\n  }\n}\n\nenum ContractID {\n  Implicit = 0,\n  Originated = 1,\n}\n\nenum PublicKeyHashID {\n  ED25519 = 0,\n  SECP256K1 = 1,\n  P256 = 2,\n}\n\ntype AddressType =\n  | 'ED25519PublicKeyHash'\n  | 'SECP256K1PublicKeyHash'\n  | 'P256PublicKeyHash'\n  | 'ContractHash';\n\nexport interface Address {\n  type: AddressType;\n  hash: number[] | Uint8Array;\n  entryPoint?: string;\n}\n\nfunction readPublicKeyHash(rd: Reader): Address {\n  let type: AddressType;\n  const tag = rd.readUint8();\n  switch (tag) {\n    case PublicKeyHashID.ED25519:\n      type = 'ED25519PublicKeyHash';\n      break;\n    case PublicKeyHashID.SECP256K1:\n      type = 'SECP256K1PublicKeyHash';\n      break;\n    case PublicKeyHashID.P256:\n      type = 'P256PublicKeyHash';\n      break;\n    default:\n      throw new Error(`unknown public key hash tag: ${tag}`);\n  }\n  return { type, hash: rd.readBytes(20) };\n}\n\nfunction readAddress(rd: Reader): Address {\n  let address: Address;\n  const tag = rd.readUint8();\n  switch (tag) {\n    case ContractID.Implicit:\n      address = readPublicKeyHash(rd);\n      break;\n\n    case ContractID.Originated:\n      address = {\n        type: 'ContractHash',\n        hash: rd.readBytes(20),\n      };\n      rd.readBytes(1);\n      break;\n\n    default:\n      throw new Error(`unknown address tag: ${tag}`);\n  }\n\n  if (rd.length !== 0) {\n    // entry point\n    const dec = new TextDecoder();\n    address.entryPoint = dec.decode(new Uint8Array(rd.readBytes(rd.length)));\n  }\n  return address;\n}\n\nfunction writePublicKeyHash(a: Address, w: Writer): void {\n  let tag: PublicKeyHashID;\n  switch (a.type) {\n    case 'ED25519PublicKeyHash':\n      tag = PublicKeyHashID.ED25519;\n      break;\n    case 'SECP256K1PublicKeyHash':\n      tag = PublicKeyHashID.SECP256K1;\n      break;\n    case 'P256PublicKeyHash':\n      tag = PublicKeyHashID.P256;\n      break;\n    default:\n      throw new Error(`unexpected address type: ${a.type}`);\n  }\n  w.writeUint8(tag);\n  w.writeBytes(Array.from(a.hash));\n}\n\nfunction writeAddress(a: Address, w: Writer): void {\n  if (a.type === 'ContractHash') {\n    w.writeUint8(ContractID.Originated);\n    w.writeBytes(Array.from(a.hash));\n    w.writeUint8(0);\n  } else {\n    w.writeUint8(ContractID.Implicit);\n    writePublicKeyHash(a, w);\n  }\n\n  if (a.entryPoint !== undefined && a.entryPoint !== '' && a.entryPoint !== 'default') {\n    const enc = new TextEncoder();\n    const bytes = enc.encode(a.entryPoint);\n    w.writeBytes(Array.from(bytes));\n  }\n}\n\nenum PublicKeyID {\n  ED25519 = 0,\n  SECP256K1 = 1,\n  P256 = 2,\n}\n\nexport type PublicKeyType = 'ED25519PublicKey' | 'SECP256K1PublicKey' | 'P256PublicKey';\nexport interface PublicKey {\n  type: PublicKeyType;\n  publicKey: number[] | Uint8Array;\n}\n\nfunction readPublicKey(rd: Reader): PublicKey {\n  let ln: number;\n  let type: PublicKeyType;\n  const tag = rd.readUint8();\n  switch (tag) {\n    case PublicKeyID.ED25519:\n      type = 'ED25519PublicKey';\n      ln = 32;\n      break;\n    case PublicKeyID.SECP256K1:\n      type = 'SECP256K1PublicKey';\n      ln = 33;\n      break;\n    case PublicKeyID.P256:\n      type = 'P256PublicKey';\n      ln = 33;\n      break;\n    default:\n      throw new Error(`unknown public key tag: ${tag}`);\n  }\n  return { type, publicKey: rd.readBytes(ln) };\n}\n\nfunction writePublicKey(pk: PublicKey, w: Writer): void {\n  let tag: PublicKeyID;\n  switch (pk.type) {\n    case 'ED25519PublicKey':\n      tag = PublicKeyID.ED25519;\n      break;\n    case 'SECP256K1PublicKey':\n      tag = PublicKeyID.SECP256K1;\n      break;\n    case 'P256PublicKey':\n      tag = PublicKeyID.P256;\n      break;\n    default:\n      throw new Error(`unexpected public key type: ${pk.type}`);\n  }\n  w.writeUint8(tag);\n  w.writeBytes(Array.from(pk.publicKey));\n}\n\ntype WriteTransformFunc = (e: Expr) => [Expr, IterableIterator<WriteTransformFunc>];\n\nfunction writeExpr(expr: Expr, wr: Writer, tf: WriteTransformFunc): void {\n  const [e, args] = tf(expr);\n\n  if (Array.isArray(e)) {\n    const w = new Writer();\n    for (const v of e) {\n      const a = args.next();\n      if (a.done) {\n        throw new Error('REPORT ME: iterator is done');\n      }\n      writeExpr(v, w, a.value);\n    }\n    wr.writeUint8(Tag.Sequence);\n    wr.writeUint32(w.length);\n    wr.writeBytes(w.buffer);\n    return;\n  }\n\n  if ('string' in e) {\n    const enc = new TextEncoder();\n    const bytes = enc.encode(e.string);\n    wr.writeUint8(Tag.String);\n    wr.writeUint32(bytes.length);\n    wr.writeBytes(Array.from(bytes));\n    return;\n  }\n\n  if ('int' in e) {\n    wr.writeUint8(Tag.Int);\n    let val = BigInt(e.int);\n    const sign = val < 0;\n    if (sign) {\n      val = -val;\n    }\n    let i = 0;\n    do {\n      const bits = i === 0 ? BigInt(6) : BigInt(7);\n      let byte = val & ((BigInt(1) << bits) - BigInt(1));\n      val >>= bits;\n      if (val) {\n        byte |= BigInt(0x80);\n      }\n      if (i === 0 && sign) {\n        byte |= BigInt(0x40);\n      }\n      wr.writeUint8(Number(byte));\n      i++;\n    } while (val);\n    return;\n  }\n\n  if ('bytes' in e) {\n    const bytes = parseHex(e.bytes);\n    wr.writeUint8(Tag.Bytes);\n    wr.writeUint32(bytes.length);\n    wr.writeBytes(bytes);\n    return;\n  }\n\n  const prim = primTags[e.prim];\n  if (prim === undefined) {\n    throw new TypeError(`Can't encode primary: ${e.prim}`);\n  }\n\n  const tag =\n    (e.args?.length || 0) < 3\n      ? Tag.Prim0 +\n        (e.args?.length || 0) * 2 +\n        (e.annots === undefined || e.annots.length === 0 ? 0 : 1)\n      : Tag.Prim;\n\n  wr.writeUint8(tag);\n  wr.writeUint8(prim);\n\n  if (e.args !== undefined) {\n    if (e.args.length < 3) {\n      for (const v of e.args) {\n        const a = args.next();\n        if (a.done) {\n          throw new Error('REPORT ME: iterator is done');\n        }\n        writeExpr(v, wr, a.value);\n      }\n    } else {\n      const w = new Writer();\n      for (const v of e.args) {\n        const a = args.next();\n        if (a.done) {\n          throw new Error('REPORT ME: iterator is done');\n        }\n        writeExpr(v, w, a.value);\n      }\n      wr.writeUint32(w.length);\n      wr.writeBytes(w.buffer);\n    }\n  }\n\n  if (e.annots !== undefined && e.annots.length !== 0) {\n    const enc = new TextEncoder();\n    const bytes = enc.encode(e.annots.join(' '));\n    wr.writeUint32(bytes.length);\n    wr.writeBytes(Array.from(bytes));\n  } else if (e.args !== undefined && e.args.length >= 3) {\n    wr.writeUint32(0);\n  }\n}\n\ntype ReadTransformFuncs = [(e: Expr) => IterableIterator<ReadTransformFuncs>, (e: Expr) => Expr];\n\nfunction readExpr(rd: Reader, tf: ReadTransformFuncs): Expr {\n  function* passThrough() {\n    while (true) {\n      yield readPassThrough;\n    }\n  }\n  const [args, tr] = tf;\n  const tag = rd.readUint8();\n  switch (tag) {\n    case Tag.Int: {\n      const buf: number[] = [];\n      let byte: number;\n      do {\n        byte = rd.readInt8();\n        buf.push(byte);\n      } while ((byte & 0x80) !== 0);\n      let val = BigInt(0);\n      let sign = false;\n      for (let i = buf.length - 1; i >= 0; i--) {\n        const bits = i === 0 ? BigInt(6) : BigInt(7);\n        const byte = BigInt(buf[i]);\n        val <<= bits;\n        val |= byte & ((BigInt(1) << bits) - BigInt(1));\n        if (i === 0) {\n          sign = !!(byte & BigInt(0x40));\n        }\n      }\n      if (sign) {\n        val = -val;\n      }\n      return tr({ int: String(val) });\n    }\n\n    case Tag.String: {\n      const length = rd.readUint32();\n      const bytes = rd.readBytes(length);\n      const dec = new TextDecoder();\n      return tr({ string: dec.decode(new Uint8Array(bytes)) });\n    }\n\n    case Tag.Bytes: {\n      const length = rd.readUint32();\n      const bytes = rd.readBytes(length);\n      const hex = hexBytes(Array.from(bytes));\n      return tr({ bytes: hex });\n    }\n\n    case Tag.Sequence: {\n      const length = rd.readUint32();\n      let res: Expr[] = [];\n      let savedrd = rd.copy();\n      // make two passes\n      let it: IterableIterator<ReadTransformFuncs> = passThrough();\n      for (let n = 0; n < 2; n++) {\n        const r = savedrd.reader(length);\n        res = [];\n        while (r.length > 0) {\n          const a = it.next();\n          if (a.done) {\n            throw new Error('REPORT ME: iterator is done');\n          }\n          res.push(readExpr(r, a.value));\n        }\n        // make a second pass with injected side effects\n        it = args(res);\n        savedrd = rd;\n      }\n      return tr(res);\n    }\n\n    default: {\n      if (tag > 9) {\n        throw new Error(`Unknown tag: ${tag}`);\n      }\n      const p = rd.readUint8();\n      if (p >= primitives.length) {\n        throw new Error(`Unknown primitive tag: ${p}`);\n      }\n      const prim = primitives[p];\n      const argn = (tag - 3) >> 1;\n      let res: Prim = { prim };\n      // make two passes\n      let it: IterableIterator<ReadTransformFuncs> = passThrough();\n      let savedrd = rd.copy();\n      for (let n = 0; n < 2; n++) {\n        res = { prim };\n        if (argn < 3) {\n          for (let i = 0; i < argn; i++) {\n            const a = it.next();\n            if (a.done) {\n              throw new Error('REPORT ME: iterator is done');\n            }\n            res.args = res.args || [];\n            res.args.push(readExpr(savedrd, a.value));\n          }\n        } else {\n          res.args = res.args || [];\n          const length = savedrd.readUint32();\n          const r = savedrd.reader(length);\n          while (r.length > 0) {\n            const a = it.next();\n            if (a.done) {\n              throw new Error('REPORT ME: iterator is done');\n            }\n            res.args.push(readExpr(r, a.value));\n          }\n        }\n        // make a second pass with injected side effects\n        it = args(res);\n        savedrd = rd;\n      }\n\n      if (((tag - 3) & 1) === 1 || argn === 3) {\n        // read annotations\n        const length = rd.readUint32();\n        if (length !== 0) {\n          const bytes = rd.readBytes(length);\n          const dec = new TextDecoder();\n          res.annots = dec.decode(new Uint8Array(bytes)).split(' ');\n        }\n      }\n      return tr(res);\n    }\n  }\n}\n\nconst isOrData = (e: Expr): e is MichelsonDataOr =>\n  'prim' in e && (e.prim === 'Left' || e.prim === 'Right');\nconst isOptionData = (e: Expr): e is MichelsonDataOption =>\n  'prim' in e && (e.prim === 'Some' || e.prim === 'None');\n\nconst getWriteTransformFunc = (t: MichelsonType): WriteTransformFunc => {\n  if (isPairType(t)) {\n    return (d: Expr) => {\n      if (!isPairData(d)) {\n        throw new MichelsonTypeError(t, d, `pair expected: ${JSON.stringify(d)}`);\n      }\n      assertDataListIfAny(d);\n      // combs aren't used in pack format\n      const tc = unpackComb('pair', t);\n      const dc = unpackComb('Pair', d);\n      return [\n        dc,\n        (function* () {\n          for (const a of tc.args) {\n            yield getWriteTransformFunc(a);\n          }\n        })(),\n      ];\n    };\n  }\n\n  switch (t.prim) {\n    case 'or':\n      return (d: Expr) => {\n        if (!isOrData(d)) {\n          throw new MichelsonTypeError(t, d, `or expected: ${JSON.stringify(d)}`);\n        }\n        return [\n          d,\n          (function* () {\n            yield getWriteTransformFunc(t.args[d.prim === 'Left' ? 0 : 1]);\n          })(),\n        ];\n      };\n\n    case 'option':\n      return (d: Expr) => {\n        if (!isOptionData(d)) {\n          throw new MichelsonTypeError(t, d, `option expected: ${JSON.stringify(d)}`);\n        }\n        return [\n          d,\n          (function* () {\n            const dd = d;\n            if (dd.prim === 'Some') {\n              yield getWriteTransformFunc(t.args[0]);\n            }\n          })(),\n        ];\n      };\n\n    case 'list':\n    case 'set':\n      return (d: Expr) => {\n        if (!Array.isArray(d)) {\n          throw new MichelsonTypeError(t, d, `${t.prim} expected: ${JSON.stringify(d)}`);\n        }\n        return [\n          d,\n          (function* () {\n            for (const _v of d) {\n              yield getWriteTransformFunc(t.args[0]);\n            }\n          })(),\n        ];\n      };\n\n    case 'map':\n      return (d: Expr) => {\n        if (!Array.isArray(d)) {\n          throw new MichelsonTypeError(t, d, `map expected: ${JSON.stringify(d)}`);\n        }\n        return [\n          d,\n          (function* (): Generator<WriteTransformFunc> {\n            for (const _elt of d) {\n              yield (elt: Expr) => {\n                if (!('prim' in elt) || elt.prim !== 'Elt') {\n                  throw new MichelsonTypeError(\n                    t,\n                    elt,\n                    `map element expected: ${JSON.stringify(elt)}`\n                  );\n                }\n                return [\n                  elt,\n                  (function* () {\n                    for (const a of t.args) {\n                      yield getWriteTransformFunc(a);\n                    }\n                  })(),\n                ];\n              };\n            }\n          })(),\n        ];\n      };\n\n    case 'chain_id':\n      return (d: Expr) => {\n        if (!('bytes' in d) && !('string' in d)) {\n          throw new MichelsonTypeError(t, d, `chain id expected: ${JSON.stringify(d)}`);\n        }\n        let bytes: BytesLiteral;\n        if ('string' in d) {\n          const id = checkDecodeTezosID(d.string, 'ChainID');\n          if (id === null) {\n            throw new MichelsonTypeError(t, d, `chain id base58 expected: ${d.string}`);\n          }\n          bytes = { bytes: hexBytes(id[1]) };\n        } else {\n          bytes = d;\n        }\n        return [bytes, [][Symbol.iterator]()];\n      };\n\n    case 'signature':\n      return (d: Expr) => {\n        if (!('bytes' in d) && !('string' in d)) {\n          throw new MichelsonTypeError(t, d, `signature expected: ${JSON.stringify(d)}`);\n        }\n        let bytes: BytesLiteral;\n        if ('string' in d) {\n          const sig = checkDecodeTezosID(\n            d.string,\n            'ED25519Signature',\n            'SECP256K1Signature',\n            'P256Signature',\n            'GenericSignature'\n          );\n          if (sig === null) {\n            throw new MichelsonTypeError(t, d, `signature base58 expected: ${d.string}`);\n          }\n          bytes = { bytes: hexBytes(sig[1]) };\n        } else {\n          bytes = d;\n        }\n        return [bytes, [][Symbol.iterator]()];\n      };\n\n    case 'key_hash':\n      return (d: Expr) => {\n        if (!('bytes' in d) && !('string' in d)) {\n          throw new MichelsonTypeError(t, d, `key hash expected: ${JSON.stringify(d)}`);\n        }\n        let bytes: BytesLiteral;\n        if ('string' in d) {\n          const pkh = checkDecodeTezosID(\n            d.string,\n            'ED25519PublicKeyHash',\n            'SECP256K1PublicKeyHash',\n            'P256PublicKeyHash'\n          );\n          if (pkh === null) {\n            throw new MichelsonTypeError(t, d, `key hash base58 expected: ${d.string}`);\n          }\n          const w = new Writer();\n          writePublicKeyHash({ type: pkh[0], hash: pkh[1] }, w);\n          bytes = { bytes: hexBytes(w.buffer) };\n        } else {\n          bytes = d;\n        }\n        return [bytes, [][Symbol.iterator]()];\n      };\n\n    case 'key':\n      return (d: Expr) => {\n        if (!('bytes' in d) && !('string' in d)) {\n          throw new MichelsonTypeError(t, d, `public key expected: ${JSON.stringify(d)}`);\n        }\n        let bytes: BytesLiteral;\n        if ('string' in d) {\n          const key = checkDecodeTezosID(\n            d.string,\n            'ED25519PublicKey',\n            'SECP256K1PublicKey',\n            'P256PublicKey'\n          );\n          if (key === null) {\n            throw new MichelsonTypeError(t, d, `public key base58 expected: ${d.string}`);\n          }\n          const w = new Writer();\n          writePublicKey({ type: key[0], publicKey: key[1] }, w);\n          bytes = { bytes: hexBytes(w.buffer) };\n        } else {\n          bytes = d;\n        }\n        return [bytes, [][Symbol.iterator]()];\n      };\n\n    case 'address':\n      return (d: Expr) => {\n        if (!('bytes' in d) && !('string' in d)) {\n          throw new MichelsonTypeError(t, d, `address expected: ${JSON.stringify(d)}`);\n        }\n        let bytes: BytesLiteral;\n        if ('string' in d) {\n          const s = d.string.split('%');\n          const address = checkDecodeTezosID(\n            s[0],\n            'ED25519PublicKeyHash',\n            'SECP256K1PublicKeyHash',\n            'P256PublicKeyHash',\n            'ContractHash'\n          );\n          if (address === null) {\n            throw new MichelsonTypeError(t, d, `address base58 expected: ${d.string}`);\n          }\n          const w = new Writer();\n          writeAddress(\n            { type: address[0], hash: address[1], entryPoint: s.length > 1 ? s[1] : undefined },\n            w\n          );\n          bytes = { bytes: hexBytes(w.buffer) };\n        } else {\n          bytes = d;\n        }\n        return [bytes, [][Symbol.iterator]()];\n      };\n\n    case 'timestamp':\n      return (d: Expr) => {\n        if (!('string' in d) && !('int' in d)) {\n          throw new MichelsonTypeError(t, d, `timestamp expected: ${JSON.stringify(d)}`);\n        }\n        let int: IntLiteral;\n        if ('string' in d) {\n          const p = parseDate(d);\n          if (p === null) {\n            throw new MichelsonTypeError(t, d, `can't parse date: ${d.string}`);\n          }\n          int = { int: String(Math.floor(p.getTime() / 1000)) };\n        } else {\n          int = d;\n        }\n        return [int, [][Symbol.iterator]()];\n      };\n\n    default:\n      return writePassThrough;\n  }\n};\n\ntype PushInstruction = MichelsonInstruction & Prim<'PUSH'>;\nconst isPushInstruction = (e: Expr): e is PushInstruction => 'prim' in e && e.prim === 'PUSH';\n\nconst writePassThrough: WriteTransformFunc = (e: Expr) => {\n  if (isPushInstruction(e)) {\n    assertMichelsonInstruction(e);\n    // capture inlined type definition\n    return [\n      e,\n      (function* () {\n        yield writePassThrough;\n        yield getWriteTransformFunc(e.args[0]);\n      })(),\n    ];\n  }\n\n  return [\n    e,\n    (function* () {\n      while (true) {\n        yield writePassThrough;\n      }\n    })(),\n  ];\n};\n\n/**\n * Serializes any value of packable type to its optimized binary representation\n * identical to the one used by PACK and UNPACK Michelson instructions.\n * Without a type definition (not recommended) the data will be encoded as a binary form of a generic Michelson expression.\n * Type definition allows some types like `timestamp` and `address` and other base58 representable types to be encoded to\n * corresponding optimized binary forms borrowed from the Tezos protocol\n *\n * ```typescript\n * const data: MichelsonData = {\n *     string: \"KT1RvkwF4F7pz1gCoxkyZrG1RkrxQy3gmFTv%foo\"\n * };\n *\n * const typ: MichelsonType = {\n *     prim: \"address\"\n * };\n *\n * const packed = packData(data, typ);\n *\n * // 050a0000001901be41ee922ddd2cf33201e49d32da0afec571dce300666f6f\n * ```\n *\n * Without a type definition the base58 encoded address will be treated as a string\n * ```typescript\n * const data: MichelsonData = {\n *     string: \"KT1RvkwF4F7pz1gCoxkyZrG1RkrxQy3gmFTv%foo\"\n * };\n *\n * const packed = packData(data);\n *\n * // 0501000000284b543152766b7746344637707a3167436f786b795a724731526b7278517933676d46547625666f6f\n * ```\n * @param d Data object\n * @param t Optional type definition\n * @returns Binary representation as numeric array\n */\nexport function packData(d: MichelsonData, t?: MichelsonType): number[] {\n  const w = new Writer();\n  w.writeUint8(5);\n  writeExpr(d, w, t !== undefined ? getWriteTransformFunc(t) : writePassThrough);\n  return w.buffer;\n}\n\n/**\n * Serializes any value of packable type to its optimized binary representation\n * identical to the one used by PACK and UNPACK Michelson instructions.\n * Same as {@link packData} but returns a `bytes` Michelson data literal instead of an array\n *\n * ```typescript\n * const data: MichelsonData = {\n *     string: \"2019-09-26T10:59:51Z\"\n * };\n *\n * const typ: MichelsonType = {\n *     prim: \"timestamp\"\n * };\n *\n * const packed = packDataBytes(data, typ);\n *\n * // { bytes: \"0500a7e8e4d80b\" }\n * ```\n * @param d Data object\n * @param t Optional type definition\n * @returns Binary representation as a bytes literal\n */\nexport function packDataBytes(d: MichelsonData, t?: MichelsonType): BytesLiteral {\n  return { bytes: hexBytes(packData(d, t)) };\n}\n\nconst getReadTransformFuncs = (t: MichelsonType): ReadTransformFuncs => {\n  if (isPairType(t)) {\n    const args = Array.isArray(t) ? t : t.args;\n    return [\n      (d: Expr) => {\n        if (!isPairData(d)) {\n          throw new MichelsonTypeError(t, d, `pair expected: ${JSON.stringify(d)}`);\n        }\n        return (function* () {\n          for (const a of args) {\n            yield getReadTransformFuncs(a);\n          }\n        })();\n      },\n      (d: Expr) => d,\n    ];\n  }\n\n  switch (t.prim) {\n    case 'or':\n      return [\n        (d: Expr) => {\n          if (!isOrData(d)) {\n            throw new MichelsonTypeError(t, d, `or expected: ${JSON.stringify(d)}`);\n          }\n          return (function* () {\n            yield getReadTransformFuncs(t.args[d.prim === 'Left' ? 0 : 1]);\n          })();\n        },\n        (d: Expr) => d,\n      ];\n\n    case 'option':\n      return [\n        (d: Expr) => {\n          if (!isOptionData(d)) {\n            throw new MichelsonTypeError(t, d, `option expected: ${JSON.stringify(d)}`);\n          }\n          return (function* () {\n            if (d.prim === 'Some') {\n              yield getReadTransformFuncs(t.args[0]);\n            }\n          })();\n        },\n        (d: Expr) => d,\n      ];\n\n    case 'list':\n    case 'set':\n      return [\n        (d: Expr) => {\n          if (!Array.isArray(d)) {\n            throw new MichelsonTypeError(t, d, `${t.prim} expected: ${JSON.stringify(d)}`);\n          }\n          return (function* () {\n            while (true) {\n              yield getReadTransformFuncs(t.args[0]);\n            }\n          })();\n        },\n        (d: Expr) => d,\n      ];\n\n    case 'map':\n      return [\n        (d: Expr): IterableIterator<ReadTransformFuncs> => {\n          if (!Array.isArray(d)) {\n            throw new MichelsonTypeError(t, d, `map expected: ${JSON.stringify(d)}`);\n          }\n          return (function* (): Generator<ReadTransformFuncs> {\n            while (true) {\n              yield [\n                (elt: Expr) => {\n                  if (!('prim' in elt) || elt.prim !== 'Elt') {\n                    throw new MichelsonTypeError(\n                      t,\n                      elt,\n                      `map element expected: ${JSON.stringify(elt)}`\n                    );\n                  }\n                  return (function* () {\n                    for (const a of t.args) {\n                      yield getReadTransformFuncs(a);\n                    }\n                  })();\n                },\n                (elt: Expr) => elt,\n              ];\n            }\n          })();\n        },\n        (d: Expr) => d,\n      ];\n\n    case 'chain_id':\n      return [\n        () => [][Symbol.iterator](),\n        (d: Expr) => {\n          if (!('bytes' in d) && !('string' in d)) {\n            throw new MichelsonTypeError(t, d, `chain id expected: ${JSON.stringify(d)}`);\n          }\n          if ('string' in d) {\n            return d;\n          }\n          const bytes = parseBytes(d.bytes);\n          if (bytes === null) {\n            throw new MichelsonTypeError(t, d, `can't parse bytes: ${d.bytes}`);\n          }\n          return { string: encodeTezosID('ChainID', bytes) };\n        },\n      ];\n\n    case 'signature':\n      return [\n        () => [][Symbol.iterator](),\n        (d: Expr) => {\n          if (!('bytes' in d) && !('string' in d)) {\n            throw new MichelsonTypeError(t, d, `signature expected: ${JSON.stringify(d)}`);\n          }\n          if ('string' in d) {\n            return d;\n          }\n          const bytes = parseBytes(d.bytes);\n          if (bytes === null) {\n            throw new MichelsonTypeError(t, d, `can't parse bytes: ${d.bytes}`);\n          }\n          return { string: encodeTezosID('GenericSignature', bytes) };\n        },\n      ];\n\n    case 'key_hash':\n      return [\n        () => [][Symbol.iterator](),\n        (d: Expr) => {\n          if (!('bytes' in d) && !('string' in d)) {\n            throw new MichelsonTypeError(t, d, `key hash expected: ${JSON.stringify(d)}`);\n          }\n          if ('string' in d) {\n            return d;\n          }\n          const bytes = parseBytes(d.bytes);\n          if (bytes === null) {\n            throw new MichelsonTypeError(t, d, `can't parse bytes: ${d.bytes}`);\n          }\n          const rd = new Reader(new Uint8Array(bytes));\n          const addr = readPublicKeyHash(rd);\n          return {\n            string:\n              encodeTezosID(addr.type, addr.hash) + (addr.entryPoint ? '%' + addr.entryPoint : ''),\n          };\n        },\n      ];\n\n    case 'key':\n      return [\n        () => [][Symbol.iterator](),\n        (d: Expr) => {\n          if (!('bytes' in d) && !('string' in d)) {\n            throw new MichelsonTypeError(t, d, `public key expected: ${JSON.stringify(d)}`);\n          }\n          if ('string' in d) {\n            return d;\n          }\n          const bytes = parseBytes(d.bytes);\n          if (bytes === null) {\n            throw new MichelsonTypeError(t, d, `can't parse bytes: ${d.bytes}`);\n          }\n          const rd = new Reader(new Uint8Array(bytes));\n          const pk = readPublicKey(rd);\n          return { string: encodeTezosID(pk.type, pk.publicKey) };\n        },\n      ];\n\n    case 'address':\n      return [\n        () => [][Symbol.iterator](),\n        (d: Expr) => {\n          if (!('bytes' in d) && !('string' in d)) {\n            throw new MichelsonTypeError(t, d, `address expected: ${JSON.stringify(d)}`);\n          }\n          if ('string' in d) {\n            return d;\n          }\n          const bytes = parseBytes(d.bytes);\n          if (bytes === null) {\n            throw new MichelsonTypeError(t, d, `can't parse bytes: ${d.bytes}`);\n          }\n          const rd = new Reader(new Uint8Array(bytes));\n          const addr = readAddress(rd);\n          return {\n            string:\n              encodeTezosID(addr.type, addr.hash) + (addr.entryPoint ? '%' + addr.entryPoint : ''),\n          };\n        },\n      ];\n\n    case 'timestamp':\n      return [\n        () => [][Symbol.iterator](),\n        (d: Expr) => {\n          if (!('int' in d) && !('string' in d)) {\n            throw new MichelsonTypeError(t, d, `address expected: ${JSON.stringify(d)}`);\n          }\n          if ('string' in d) {\n            return d;\n          }\n          const date = new Date(parseInt(d.int, 10) * 1000);\n          return { string: date.toISOString().slice(0, 19) + 'Z' };\n        },\n      ];\n\n    default:\n      return readPassThrough;\n  }\n};\n\nconst readPassThrough: ReadTransformFuncs = [\n  (e: Expr) => {\n    if (isPushInstruction(e)) {\n      assertMichelsonInstruction(e);\n      // capture inlined type definition\n      return (function* () {\n        yield readPassThrough;\n        yield getReadTransformFuncs(e.args[0]);\n      })();\n    }\n\n    return (function* () {\n      while (true) {\n        yield readPassThrough;\n      }\n    })();\n  },\n  (e: Expr) => e,\n];\n\n/**\n * Deserialize a byte array into the corresponding Michelson value.\n * Without a type definition (not recommended) the binary data will be treated as a binary form of a generic Michelson expression and returned as is.\n * Type definition allows some types like `timestamp` and `address` and other types usually encoded in optimized binary forms to be transformed\n * back to their string representations like base58 and ISO timestamps.\n *\n * ```typescript\n * const src = [0x05, 0x00, 0xa7, 0xe8, 0xe4, 0xd8, 0x0b];\n *\n * const typ: MichelsonType = {\n *     prim: \"timestamp\"\n * };\n *\n * const data = unpackData(src, typ);\n *\n * // { string: \"2019-09-26T10:59:51Z\" }\n * ```\n *\n * Same binary data without a type definition\n * ```typescript\n * const src = [0x05, 0x00, 0xa7, 0xe8, 0xe4, 0xd8, 0x0b];\n *\n * const data = unpackData(src);\n *\n * // { int: \"1569495591\" }\n * ```\n * @param src Byte array\n * @param t Optional type definition\n * @returns Deserialized data\n */\nexport function unpackData(src: number[] | Uint8Array, t?: MichelsonType): MichelsonData {\n  const r = new Reader(src);\n  if (r.readUint8() !== 5) {\n    throw new Error('incorrect packed data magic number');\n  }\n  const ex = readExpr(r, t !== undefined ? getReadTransformFuncs(t) : readPassThrough);\n  if (assertMichelsonData(ex)) {\n    return ex;\n  }\n  throw new Error(); // never\n}\n\n/**\n * Deserialize a byte array into the corresponding Michelson value.\n * Same as {@link unpackData} but takes a `bytes` Michelson data literal instead of an array\n *\n * ```typescript\n * const src = { bytes: \"0500a7e8e4d80b\" };\n *\n * const typ: MichelsonType = {\n *     prim: \"timestamp\"\n * };\n *\n * const data = unpackDataBytes(src, typ);\n *\n * // { string: \"2019-09-26T10:59:51Z\" }\n * ```\n * @param src Bytes object\n * @param t Optional type definition\n * @returns Deserialized data\n */\nexport function unpackDataBytes(src: BytesLiteral, t?: MichelsonType): MichelsonData {\n  const bytes = parseBytes(src.bytes);\n  if (bytes === null) {\n    throw new Error(`can't parse bytes: \"${src.bytes}\"`);\n  }\n  return unpackData(bytes, t);\n}\n\n// helper functions also used by validator\n\nexport function decodeAddressBytes(b: BytesLiteral): Address {\n  const bytes = parseBytes(b.bytes);\n  if (bytes === null) {\n    throw new Error(`can't parse bytes: \"${b.bytes}\"`);\n  }\n  const rd = new Reader(new Uint8Array(bytes));\n  return readAddress(rd);\n}\n\nexport function decodePublicKeyHashBytes(b: BytesLiteral): Address {\n  const bytes = parseBytes(b.bytes);\n  if (bytes === null) {\n    throw new Error(`can't parse bytes: \"${b.bytes}\"`);\n  }\n  const rd = new Reader(new Uint8Array(bytes));\n  return readPublicKeyHash(rd);\n}\n\nexport function decodePublicKeyBytes(b: BytesLiteral): PublicKey {\n  const bytes = parseBytes(b.bytes);\n  if (bytes === null) {\n    throw new Error(`can't parse bytes: \"${b.bytes}\"`);\n  }\n  const rd = new Reader(new Uint8Array(bytes));\n  return readPublicKey(rd);\n}\n","import { Prim, Expr } from './micheline';\nimport {\n  MichelsonType,\n  MichelsonData,\n  MichelsonMapElt,\n  MichelsonCode,\n  MichelsonTypeOption,\n  MichelsonContract,\n  MichelsonContractSection,\n  MichelsonReturnType,\n  MichelsonTypePair,\n  MichelsonInstruction,\n  InstructionList,\n  MichelsonTypeID,\n  MichelsonTypeOr,\n  DefaultProtocol,\n  Protocol,\n  refContract,\n  MichelsonTypeAddress,\n  MichelsonContractView,\n  ProtoInferiorTo,\n} from './michelson-types';\nimport {\n  unpackAnnotations,\n  MichelsonError,\n  isNatural,\n  LongInteger,\n  parseBytes,\n  compareBytes,\n  isDecimal,\n  checkDecodeTezosID,\n  UnpackedAnnotations,\n  Nullable,\n  UnpackAnnotationsOptions,\n  unpackComb,\n  MichelsonTypeError,\n  isPairType,\n  isPairData,\n  parseDate,\n} from './utils';\nimport { decodeBase58Check } from './base58';\nimport { decodeAddressBytes, decodePublicKeyBytes, decodePublicKeyHashBytes } from './binary';\nimport {\n  assertMichelsonComparableType,\n  assertMichelsonPackableType,\n  assertMichelsonStorableType,\n  assertMichelsonBigMapStorableType,\n  assertMichelsonPushableType,\n  isInstruction,\n  assertDataListIfAny,\n} from './michelson-validator';\nimport { ParserOptions } from './micheline-parser';\n\nexport interface Context extends ParserOptions {\n  contract?: MichelsonContract;\n  traceCallback?: (t: InstructionTrace) => void;\n}\n\nexport class MichelsonInstructionError extends MichelsonError<MichelsonCode> {\n  /**\n   * @param val Value of a type node caused the error\n   * @param stackState Current stack state\n   * @param message An error message\n   */\n  constructor(val: MichelsonCode, public stackState: MichelsonReturnType, message?: string) {\n    super(val, message);\n    Object.setPrototypeOf(this, MichelsonInstructionError.prototype);\n  }\n}\n\n// 'sequence as a pair' edo syntax helpers\nfunction typeID(t: MichelsonType): MichelsonTypeID {\n  return Array.isArray(t) ? 'pair' : t.prim;\n}\n\ntype TypeArgs<T extends MichelsonType> = T extends Prim ? T['args'] : T;\nfunction typeArgs<T extends MichelsonType>(t: T): TypeArgs<T> {\n  return ('prim' in t ? (t as Extract<MichelsonType, Prim>).args : t) as TypeArgs<T>;\n}\n\nfunction assertScalarTypesEqual(a: MichelsonType, b: MichelsonType, field = false): void {\n  if (typeID(a) !== typeID(b)) {\n    throw new MichelsonTypeError(a, undefined, `types mismatch: ${typeID(a)} != ${typeID(b)}`);\n  }\n\n  const ann = [unpackAnnotations(a), unpackAnnotations(b)];\n  if (ann[0].t && ann[1].t && ann[0].t[0] !== ann[1].t[0]) {\n    throw new MichelsonTypeError(\n      a,\n      undefined,\n      `${typeID(a)}: type names mismatch: ${ann[0].t[0]} != ${ann[1].t[0]}`\n    );\n  }\n  if (field && ann[0].f && ann[1].f && ann[0].f[0] !== ann[1].f[0]) {\n    throw new MichelsonTypeError(\n      a,\n      undefined,\n      `${typeID(a)}: field names mismatch: ${ann[0].f[0]} != ${ann[1].f}`\n    );\n  }\n\n  if (isPairType(a)) {\n    const aArgs = unpackComb('pair', a);\n    const bArgs = unpackComb('pair', b as typeof a);\n    assertScalarTypesEqual(aArgs.args[0], bArgs.args[0], true);\n    assertScalarTypesEqual(aArgs.args[1], bArgs.args[1], true);\n    return;\n  }\n\n  switch (a.prim) {\n    case 'option':\n    case 'list':\n    case 'contract':\n    case 'set':\n    case 'ticket':\n      assertScalarTypesEqual(a.args[0], (b as typeof a).args[0]);\n      break;\n\n    case 'or':\n      assertScalarTypesEqual(a.args[0], (b as typeof a).args[0], true);\n      assertScalarTypesEqual(a.args[1], (b as typeof a).args[1], true);\n      break;\n\n    case 'lambda':\n    case 'map':\n    case 'big_map':\n      assertScalarTypesEqual(a.args[0], (b as typeof a).args[0]);\n      assertScalarTypesEqual(a.args[1], (b as typeof a).args[1]);\n      break;\n\n    case 'sapling_state':\n    case 'sapling_transaction':\n      if (parseInt(a.args[0].int, 10) !== parseInt((b as typeof a).args[0].int, 10)) {\n        throw new MichelsonTypeError(\n          a,\n          undefined,\n          `${typeID(a)}: type argument mismatch: ${a.args[0].int} != ${(b as typeof a).args[0].int}`\n        );\n      }\n  }\n}\n\nfunction assertStacksEqual<T1 extends MichelsonType[], T2 extends T1>(a: T1, b: T2): void {\n  if (a.length !== b.length) {\n    throw new MichelsonTypeError(a, undefined, `stack length mismatch: ${a.length} != ${b.length}`);\n  }\n  for (let i = 0; i < a.length; i++) {\n    assertScalarTypesEqual(a[i], b[i]);\n  }\n}\n\nexport function assertTypeAnnotationsValid(t: MichelsonType, field = false): void {\n  if (!Array.isArray(t)) {\n    const ann = unpackAnnotations(t);\n    if ((ann.t?.length || 0) > 1) {\n      throw new MichelsonTypeError(\n        t,\n        undefined,\n        `${t.prim}: at most one type annotation allowed: ${t.annots}`\n      );\n    }\n\n    if (field) {\n      if ((ann.f?.length || 0) > 1) {\n        throw new MichelsonTypeError(\n          t,\n          undefined,\n          `${t.prim}: at most one field annotation allowed: ${t.annots}`\n        );\n      }\n    } else {\n      if ((ann.f?.length || 0) > 0) {\n        throw new MichelsonTypeError(\n          t,\n          undefined,\n          `${t.prim}: field annotations aren't allowed: ${t.annots}`\n        );\n      }\n    }\n  }\n\n  if (isPairType(t)) {\n    const args = typeArgs(t);\n    for (const a of args) {\n      assertTypeAnnotationsValid(a, true);\n    }\n    return;\n  }\n\n  switch (t.prim) {\n    case 'option':\n    case 'list':\n    case 'contract':\n    case 'set':\n      assertTypeAnnotationsValid(t.args[0]);\n      break;\n\n    case 'or':\n      for (const a of t.args) {\n        assertTypeAnnotationsValid(a, true);\n      }\n      break;\n\n    case 'lambda':\n    case 'map':\n    case 'big_map':\n      assertTypeAnnotationsValid(t.args[0]);\n      assertTypeAnnotationsValid(t.args[1]);\n  }\n}\n\n// Data integrity check\n\nfunction compareMichelsonData(t: MichelsonType, a: MichelsonData, b: MichelsonData): number {\n  if (isPairType(t)) {\n    if (isPairData(a) && isPairData(b)) {\n      assertDataListIfAny(a);\n      assertDataListIfAny(b);\n      const tComb = unpackComb('pair', t);\n      const aComb = unpackComb('Pair', a);\n      const bComb = unpackComb('Pair', b);\n      const x = compareMichelsonData(tComb.args[0], aComb.args[0], bComb.args[0]);\n      if (x !== 0) {\n        return x;\n      }\n      return compareMichelsonData(tComb.args[0], aComb.args[1], bComb.args[1]);\n    }\n  } else {\n    switch (t.prim) {\n      case 'int':\n      case 'nat':\n      case 'mutez':\n        if ('int' in a && 'int' in b) {\n          return new LongInteger(a.int).cmp(new LongInteger(b.int));\n        }\n        break;\n\n      case 'string':\n        if ('string' in a && 'string' in b) {\n          const x = a.string.localeCompare(b.string);\n          return x < 0 ? -1 : x > 0 ? 1 : 0;\n        }\n        break;\n\n      case 'bytes':\n        if ('bytes' in a && 'bytes' in b) {\n          const aa = parseBytes(a.bytes);\n          const bb = parseBytes(b.bytes);\n          if (aa !== null && bb !== null) {\n            return compareBytes(aa, bb);\n          }\n        }\n        break;\n\n      case 'bool':\n        if (\n          'prim' in a &&\n          'prim' in b &&\n          (a.prim === 'True' || a.prim === 'False') &&\n          (b.prim === 'True' || b.prim === 'False')\n        ) {\n          return a.prim === b.prim ? 0 : a.prim === 'False' ? -1 : 1;\n        }\n        break;\n\n      case 'key':\n      case 'key_hash':\n      case 'address':\n      case 'signature':\n      case 'chain_id':\n        if (('string' in a || 'bytes' in a) && ('string' in b || 'bytes' in b)) {\n          return compareBytes(\n            'string' in a ? decodeBase58Check(a.string) : parseBytes(a.bytes) || [],\n            'string' in b ? decodeBase58Check(b.string) : parseBytes(b.bytes) || []\n          );\n        }\n        break;\n\n      case 'timestamp':\n        if (('string' in a || 'int' in a) && ('string' in b || 'int' in b)) {\n          const aa = parseDate(a);\n          const bb = parseDate(b);\n          if (aa !== null && bb !== null) {\n            const x = aa.valueOf() - bb.valueOf();\n            return x < 0 ? -1 : x > 0 ? 1 : 0;\n          }\n        }\n        break;\n\n      case 'unit':\n        if ('prim' in a && 'prim' in b && a.prim === 'Unit' && b.prim === 'Unit') {\n          return 0;\n        }\n    }\n  }\n\n  // Unlikely, types are expected to be verified before the function call\n  throw new MichelsonTypeError(\n    t,\n    undefined,\n    `${typeID(t)}: not comparable values: ${JSON.stringify(a)}, ${JSON.stringify(b)}`\n  );\n}\n\n// Simplified version of assertMichelsonInstruction() for previously validated data\nfunction isFunction(d: MichelsonData): d is InstructionList {\n  if (!Array.isArray(d)) {\n    return false;\n  }\n  for (const v of d) {\n    if (!((Array.isArray(v) && isFunction(v)) || ('prim' in v && isInstruction(v)))) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction assertDataValidInternal(d: MichelsonData, t: MichelsonType, ctx: Context | null): void {\n  if (isPairType(t)) {\n    if (isPairData(d)) {\n      assertDataListIfAny(d);\n      const dc = unpackComb('Pair', d);\n      const tc = unpackComb('pair', t);\n      assertDataValidInternal(dc.args[0], tc.args[0], ctx);\n      assertDataValidInternal(dc.args[1], tc.args[1], ctx);\n      return;\n    }\n    throw new MichelsonTypeError(t, d, `pair expected: ${JSON.stringify(d)}`);\n  }\n\n  switch (t.prim) {\n    // Atomic literals\n    case 'int':\n      if ('int' in d && isDecimal(d.int)) {\n        return;\n      }\n      throw new MichelsonTypeError(t, d, `integer value expected: ${JSON.stringify(d)}`);\n\n    case 'nat':\n    case 'mutez':\n      if ('int' in d && isNatural(d.int)) {\n        return;\n      }\n      throw new MichelsonTypeError(t, d, `natural value expected: ${JSON.stringify(d)}`);\n\n    case 'string':\n      if ('string' in d) {\n        return;\n      }\n      throw new MichelsonTypeError(t, d, `string value expected: ${JSON.stringify(d)}`);\n\n    case 'bytes':\n    case 'bls12_381_g1':\n    case 'bls12_381_g2':\n      if ('bytes' in d && parseBytes(d.bytes) !== null) {\n        return;\n      }\n      throw new MichelsonTypeError(t, d, `bytes value expected: ${JSON.stringify(d)}`);\n\n    case 'bool':\n      if ('prim' in d && (d.prim === 'True' || d.prim === 'False')) {\n        return;\n      }\n      throw new MichelsonTypeError(t, d, `boolean value expected: ${JSON.stringify(d)}`);\n\n    case 'key_hash':\n      if (\n        'string' in d &&\n        checkDecodeTezosID(\n          d.string,\n          'ED25519PublicKeyHash',\n          'SECP256K1PublicKeyHash',\n          'P256PublicKeyHash'\n        ) !== null\n      ) {\n        return;\n      } else if ('bytes' in d) {\n        try {\n          decodePublicKeyHashBytes(d);\n          return;\n        } catch (err) {\n          // ignore message\n        }\n      }\n      throw new MichelsonTypeError(t, d, `key hash expected: ${JSON.stringify(d)}`);\n\n    case 'timestamp':\n      if (('string' in d || 'int' in d) && parseDate(d) !== null) {\n        return;\n      }\n      throw new MichelsonTypeError(t, d, `timestamp expected: ${JSON.stringify(d)}`);\n\n    case 'address':\n      if ('string' in d) {\n        let address = d.string;\n        const ep = d.string.indexOf('%');\n        if (ep >= 0) {\n          // trim entry point\n          address = d.string.slice(0, ep);\n        }\n        if (\n          checkDecodeTezosID(\n            address,\n            'ED25519PublicKeyHash',\n            'SECP256K1PublicKeyHash',\n            'P256PublicKeyHash',\n            'ContractHash'\n          ) !== null\n        ) {\n          return;\n        }\n      } else if ('bytes' in d) {\n        try {\n          decodeAddressBytes(d);\n          return;\n        } catch (err) {\n          // ignore message\n        }\n      }\n      throw new MichelsonTypeError(t, d, `address expected: ${JSON.stringify(d)}`);\n\n    case 'key':\n      if (\n        'string' in d &&\n        checkDecodeTezosID(d.string, 'ED25519PublicKey', 'SECP256K1PublicKey', 'P256PublicKey') !==\n          null\n      ) {\n        return;\n      } else if ('bytes' in d) {\n        try {\n          decodePublicKeyBytes(d);\n          return;\n        } catch (err) {\n          // ignore message\n        }\n      }\n      throw new MichelsonTypeError(t, d, `public key expected: ${JSON.stringify(d)}`);\n\n    case 'unit':\n      if ('prim' in d && d.prim === 'Unit') {\n        return;\n      }\n      throw new MichelsonTypeError(t, d, `unit value expected: ${JSON.stringify(d)}`);\n\n    case 'signature':\n      if (\n        'bytes' in d ||\n        ('string' in d &&\n          checkDecodeTezosID(\n            d.string,\n            'ED25519Signature',\n            'SECP256K1Signature',\n            'P256Signature',\n            'GenericSignature'\n          ) !== null)\n      ) {\n        return;\n      }\n      throw new MichelsonTypeError(t, d, `signature expected: ${JSON.stringify(d)}`);\n\n    case 'chain_id':\n      if ('bytes' in d || 'string' in d) {\n        const x = 'string' in d ? decodeBase58Check(d.string) : parseBytes(d.bytes);\n        if (x !== null) {\n          return;\n        }\n      }\n      throw new MichelsonTypeError(t, d, `chain id expected: ${JSON.stringify(d)}`);\n\n    // Complex types\n    case 'option':\n      if ('prim' in d) {\n        if (d.prim === 'None') {\n          return;\n        } else if (d.prim === 'Some') {\n          assertDataValidInternal(d.args[0], t.args[0], ctx);\n          return;\n        }\n      }\n      throw new MichelsonTypeError(t, d, `option expected: ${JSON.stringify(d)}`);\n\n    case 'list':\n    case 'set':\n      if (assertDataListIfAny(d)) {\n        //let prev: MichelsonData | undefined;\n        for (const v of d) {\n          assertDataValidInternal(v, t.args[0], ctx);\n        }\n        return;\n      }\n      throw new MichelsonTypeError(t, d, `${t.prim} expected: ${JSON.stringify(d)}`);\n\n    case 'or':\n      if ('prim' in d) {\n        if (d.prim === 'Left') {\n          assertDataValidInternal(d.args[0], t.args[0], ctx);\n          return;\n        } else if (d.prim === 'Right') {\n          assertDataValidInternal(d.args[0], t.args[1], ctx);\n          return;\n        }\n      }\n      throw new MichelsonTypeError(t, d, `union (or) expected: ${JSON.stringify(d)}`);\n\n    case 'lambda':\n      if (isFunction(d)) {\n        const ret = functionTypeInternal(d, [t.args[0]], ctx);\n        if ('failed' in ret) {\n          throw new MichelsonTypeError(t, d, `function is failed with error type: ${ret.failed}`);\n        }\n        if (ret.length !== 1) {\n          throw new MichelsonTypeError(t, d, 'function must return a value');\n        }\n        assertScalarTypesEqual(t.args[1], ret[0]);\n        return;\n      }\n      throw new MichelsonTypeError(t, d, `function expected: ${JSON.stringify(d)}`);\n\n    case 'map':\n    case 'big_map':\n      if (Array.isArray(d)) {\n        //let prev: MichelsonMapElt | undefined;\n        for (const v of d) {\n          if (!('prim' in v) || v.prim !== 'Elt') {\n            throw new MichelsonTypeError(t, d, `map elements expected: ${JSON.stringify(d)}`);\n          }\n          assertDataValidInternal(v.args[0], t.args[0], ctx);\n          assertDataValidInternal(v.args[1], t.args[1], ctx);\n        }\n        return;\n      }\n      throw new MichelsonTypeError(t, d, `${t.prim} expected: ${JSON.stringify(d)}`);\n\n    case 'bls12_381_fr':\n      if (('int' in d && isDecimal(d.int)) || ('bytes' in d && parseBytes(d.bytes) !== null)) {\n        return;\n      }\n      throw new MichelsonTypeError(t, d, `BLS12-381 element expected: ${JSON.stringify(d)}`);\n\n    case 'sapling_state':\n      if (Array.isArray(d)) {\n        return;\n      }\n      throw new MichelsonTypeError(t, d, `sapling state expected: ${JSON.stringify(d)}`);\n\n    case 'ticket':\n      assertDataValidInternal(\n        d,\n        {\n          prim: 'pair',\n          args: [{ prim: 'address' }, t.args[0], { prim: 'nat' }],\n        },\n        ctx\n      );\n      return;\n\n    default:\n      throw new MichelsonTypeError(\n        t,\n        d,\n        `type ${typeID(t)} don't have Michelson literal representation`\n      );\n  }\n}\n\n// Code validation\n\ntype StackType<T extends (MichelsonTypeID[] | null)[]> = {\n  [N in keyof T]: T[N] extends MichelsonTypeID[] ? MichelsonType<T[N][number]> : MichelsonType;\n};\n\nexport interface InstructionTrace {\n  op: MichelsonCode;\n  in: MichelsonType[];\n  out: MichelsonReturnType;\n}\n\nfunction instructionListType(\n  inst: InstructionList,\n  stack: MichelsonType[],\n  ctx: Context | null\n): MichelsonReturnType {\n  let ret: MichelsonReturnType = stack;\n  let s = stack;\n  let i = 0;\n  for (const op of inst) {\n    const ft = functionTypeInternal(op, s, ctx);\n    ret = ft;\n    if ('failed' in ft) {\n      break;\n    }\n    s = ft;\n    i++;\n  }\n\n  if (\n    'failed' in ret &&\n    ret.level == 0 &&\n    (!('prim' in ret.failed) || ret.failed.prim !== 'never') &&\n    i !== inst.length - 1\n  ) {\n    throw new MichelsonInstructionError(inst, ret, 'FAIL must appear in a tail position');\n  }\n\n  if (ctx?.traceCallback !== undefined) {\n    const trace: InstructionTrace = {\n      op: inst,\n      in: stack,\n      out: ret,\n    };\n    ctx.traceCallback(trace);\n  }\n  return 'failed' in ret ? { failed: ret.failed, level: ret.level + 1 } : ret;\n}\n\nfunction functionTypeInternal(\n  inst: MichelsonCode,\n  stack: MichelsonType[],\n  ctx: Context | null\n): MichelsonReturnType {\n  const proto = ctx?.protocol || DefaultProtocol;\n\n  if (Array.isArray(inst)) {\n    return instructionListType(inst, stack, ctx);\n  }\n  const instruction = inst; // Make it const for type guarding\n\n  // make sure the stack has enough number of arguments of specific types\n  function args<T extends (MichelsonTypeID[] | null)[]>(n: number, ...typeIds: T): StackType<T> {\n    if (stack.length < typeIds.length + n) {\n      throw new MichelsonInstructionError(\n        instruction,\n        stack,\n        `${instruction.prim}: stack must have at least ${typeIds.length} element(s)`\n      );\n    }\n\n    let i = n;\n    for (const ids of typeIds) {\n      if (ids !== null && ids.length !== 0) {\n        let ii = 0;\n        while (ii < ids.length && ids[ii] !== typeID(stack[i])) {\n          ii++;\n        }\n        if (ii === ids.length) {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: stack type mismatch: [${i}] expected to be ${ids}, got ${typeID(\n              stack[i]\n            )} instead`\n          );\n        }\n      }\n      i++;\n    }\n    return stack.slice(n, typeIds.length + n) as StackType<T>;\n  }\n\n  function rethrow<T extends unknown[], U>(fn: (...args: T) => U) {\n    return (...args: T): U => {\n      try {\n        return fn(...args);\n      } catch (err) {\n        if (err instanceof MichelsonError) {\n          throw new MichelsonInstructionError(instruction, stack, err.message);\n        } else {\n          throw err;\n        }\n      }\n    };\n  }\n\n  function rethrowTypeGuard<T extends Expr, U extends MichelsonType & T>(fn: (arg: T) => arg is U) {\n    return (arg: T): arg is U => {\n      try {\n        return fn(arg);\n      } catch (err) {\n        if (err instanceof MichelsonError) {\n          throw new MichelsonInstructionError(instruction, stack, err.message);\n        } else {\n          throw err;\n        }\n      }\n    };\n  }\n\n  const argAnn = rethrow(unpackAnnotations);\n  const ensureStacksEqual = rethrow(assertStacksEqual);\n  const ensureTypesEqual = rethrow(assertScalarTypesEqual);\n  const ensureComparableType = rethrowTypeGuard(assertMichelsonComparableType);\n  const ensurePackableType = rethrowTypeGuard(assertMichelsonPackableType);\n  const ensureStorableType = rethrowTypeGuard(assertMichelsonStorableType);\n  const ensurePushableType = rethrowTypeGuard(assertMichelsonPushableType);\n  const ensureBigMapStorableType = rethrowTypeGuard(assertMichelsonBigMapStorableType);\n\n  // unpack instruction annotations and assert their maximum number\n  function instructionAnn(\n    num: { f?: number; t?: number; v?: number },\n    opt?: UnpackAnnotationsOptions\n  ) {\n    const a = argAnn(instruction, {\n      ...opt,\n      emptyFields: num.f !== undefined && num.f > 1,\n      emptyVar: num.v !== undefined && num.v > 1,\n    });\n    const assertNum = (a: string[] | undefined, n: number | undefined, type: string) => {\n      if (a && a.length > (n || 0)) {\n        throw new MichelsonInstructionError(\n          instruction,\n          stack,\n          `${instruction.prim}: at most ${n || 0} ${type} annotations allowed`\n        );\n      }\n    };\n    assertNum(a.f, num.f, 'field');\n    assertNum(a.t, num.t, 'type');\n    assertNum(a.v, num.v, 'variable');\n    return a;\n  }\n\n  // also keeps annotation class if null is provided\n  function annotate<T extends MichelsonType>(tt: T, a: Nullable<UnpackedAnnotations>): T {\n    const tx: MichelsonType = tt;\n    const t: Extract<MichelsonType, Prim> = Array.isArray(tx) ? { prim: 'pair', args: tx } : tx;\n    const src = argAnn(t);\n    const ann =\n      a.v !== undefined || a.t !== undefined || a.f !== undefined\n        ? [\n            ...((a.v === null ? src.v : a.v) || []),\n            ...((a.t === null ? src.t : a.t) || []),\n            ...((a.f === null ? src.f : a.f) || []),\n          ]\n        : undefined;\n\n    const { annots, ...rest } = t;\n    return { ...(rest as T), ...(ann && ann.length !== 0 && { annots: ann }) };\n  }\n\n  // shortcut to copy at most one variable annotation from the instruction to the type\n  function annotateVar<T extends MichelsonType>(t: T, def?: string) {\n    const ia = instructionAnn({ v: 1 });\n    return annotate(t, {\n      v: ia.v !== undefined ? ia.v : def !== undefined ? [def] : null,\n      t: null,\n    });\n  }\n\n  // annotate CAR/CDR/UNPAIR/GET\n  function annotateField(\n    arg: MichelsonTypePair<MichelsonType[]>,\n    field: MichelsonType,\n    insAnn: UnpackedAnnotations,\n    n: number,\n    defField: string\n  ): MichelsonType {\n    const fieldAnn = argAnn(field).f?.[0]; // field's field annotation\n    const insFieldAnn = insAnn.f?.[n];\n    if (\n      insFieldAnn !== undefined &&\n      insFieldAnn !== '%' &&\n      fieldAnn !== undefined &&\n      insFieldAnn !== fieldAnn\n    ) {\n      throw new MichelsonInstructionError(\n        instruction,\n        stack,\n        `${instruction.prim}: field names doesn't match: ${insFieldAnn} !== ${fieldAnn}`\n      );\n    }\n    const insVarAnn = insAnn.v?.[n]; // nth instruction's variable annotation\n    const varAnn = argAnn(arg).v?.[0]; // instruction argument's variable annotation\n    return annotate(field, {\n      t: null,\n      v: insVarAnn\n        ? insVarAnn === '@%'\n          ? fieldAnn\n            ? ['@' + fieldAnn.slice(1)]\n            : undefined\n          : insVarAnn === '@%%'\n          ? varAnn\n            ? ['@' + varAnn.slice(1) + '.' + (fieldAnn ? fieldAnn.slice(1) : defField)]\n            : fieldAnn\n            ? ['@' + fieldAnn.slice(1)]\n            : undefined\n          : [insVarAnn]\n        : null,\n    });\n  }\n\n  // comb helper functions\n  function getN(\n    src: MichelsonTypePair<MichelsonType[]>,\n    n: number,\n    i: number = n\n  ): MichelsonType[] {\n    const p = unpackComb('pair', src);\n    if (i === 1) {\n      return [p.args[0]];\n    } else if (i === 2) {\n      return p.args;\n    }\n    const right = p.args[1];\n    if (isPairType(right)) {\n      return [p.args[0], ...getN(right, n, i - 1)];\n    } else {\n      throw new MichelsonInstructionError(\n        instruction,\n        stack,\n        `${instruction.prim}: at least ${n} fields are expected`\n      );\n    }\n  }\n\n  function getNth(\n    src: MichelsonTypePair<MichelsonType[]>,\n    n: number,\n    i: number = n\n  ): MichelsonType {\n    if (i === 0) {\n      return src;\n    }\n    const p = unpackComb('pair', src);\n    if (i === 1) {\n      return p.args[0];\n    }\n    const right = p.args[1];\n    if (isPairType(right)) {\n      return getNth(right, n, i - 2);\n    } else if (i === 2) {\n      return right;\n    }\n    throw new MichelsonInstructionError(\n      instruction,\n      stack,\n      `${instruction.prim}: at least ${n + 1} fields are expected`\n    );\n  }\n\n  function updateNth(\n    src: MichelsonTypePair<MichelsonType[]>,\n    x: MichelsonType,\n    n: number,\n    i: number = n\n  ): MichelsonType {\n    if (i === 0) {\n      return x;\n    }\n    const p = unpackComb('pair', src);\n    if (i === 1) {\n      return {\n        ...p,\n        args: [x, p.args[1]],\n      };\n    }\n    const right = p.args[1];\n    if (isPairType(right)) {\n      return {\n        ...p,\n        args: [p.args[0], updateNth(right, x, n, i - 2)],\n      };\n    } else if (i === 2) {\n      return {\n        ...p,\n        args: [p.args[0], x],\n      };\n    }\n    throw new MichelsonInstructionError(\n      instruction,\n      stack,\n      `${instruction.prim}: at least ${n + 1} fields are expected`\n    );\n  }\n\n  const varSuffix = (a: UnpackedAnnotations, suffix: string) => [\n    '@' + (a.v ? a.v[0].slice(1) + '.' : '') + suffix,\n  ];\n\n  function branchType(br0: MichelsonReturnType, br1: MichelsonReturnType): MichelsonReturnType {\n    if ('failed' in br0 || 'failed' in br1) {\n      return 'failed' in br0 ? br1 : br0;\n    } else {\n      ensureStacksEqual(br0, br1);\n      return br0;\n    }\n  }\n\n  const retStack = ((instruction: MichelsonInstruction): MichelsonReturnType => {\n    switch (instruction.prim) {\n      case 'DUP': {\n        const n = instruction.args ? parseInt(instruction.args[0].int, 10) : 1;\n        if (n === 0) {\n          throw new MichelsonInstructionError(instruction, stack, 'DUP 0 is forbidden');\n        }\n        const s = args(n - 1, null)[0];\n        if (typeID(s) === 'ticket') {\n          throw new MichelsonInstructionError(instruction, stack, \"ticket can't be DUPed\");\n        }\n        return [s, ...stack];\n      }\n\n      case 'SWAP': {\n        const s = args(0, null, null);\n        instructionAnn({});\n        return [s[1], s[0], ...stack.slice(2)];\n      }\n\n      case 'SOME':\n        return [\n          annotate({ prim: 'option', args: [args(0, null)[0]] }, instructionAnn({ t: 1, v: 1 })),\n          ...stack.slice(1),\n        ];\n\n      case 'UNIT':\n        return [annotate({ prim: 'unit' }, instructionAnn({ v: 1, t: 1 })), ...stack];\n\n      case 'PAIR': {\n        const n = instruction.args ? parseInt(instruction.args[0].int, 10) : 2;\n        if (n < 2) {\n          throw new MichelsonInstructionError(instruction, stack, `PAIR ${n} is forbidden`);\n        }\n        const s = args(0, ...new Array<null>(n).fill(null));\n        const ia = instructionAnn({ f: n, t: 1, v: 1 }, { specialFields: true });\n        const trim = (s: string) => {\n          const i = s.lastIndexOf('.');\n          return s.slice(i > 0 ? i + 1 : 1);\n        };\n        const retArgs = s.map((v, i) => {\n          const va = argAnn(v);\n          const f =\n            ia.f && ia.f.length > i && ia.f[i] !== '%'\n              ? ia.f[i] === '%@'\n                ? va.v\n                  ? ['%' + trim(va.v?.[0] || '')]\n                  : undefined\n                : [ia.f[i]]\n              : undefined;\n          return annotate(v, { v: null, t: null, f });\n        });\n        return [\n          annotate(\n            {\n              prim: 'pair',\n              args: retArgs,\n            },\n            { t: ia.t, v: ia.v }\n          ),\n          ...stack.slice(n),\n        ];\n      }\n\n      case 'UNPAIR': {\n        const n = instruction.args ? parseInt(instruction.args[0].int, 10) : 2;\n        if (n < 2) {\n          throw new MichelsonInstructionError(instruction, stack, `UNPAIR ${n} is forbidden`);\n        }\n        const s = args(0, ['pair'])[0];\n        const ia = instructionAnn({ f: 2, v: 2 }, { specialVar: true });\n        const fields = getN(s, n);\n        return [\n          ...fields.map((field, i) => annotateField(s, field, ia, i, i === 0 ? 'car' : 'cdr')),\n          ...stack.slice(1),\n        ];\n      }\n\n      case 'CAR':\n      case 'CDR': {\n        const s = unpackComb('pair', args(0, ['pair'])[0]);\n        const field = s.args[instruction.prim === 'CAR' ? 0 : 1];\n        const ia = instructionAnn({ f: 1, v: 1 }, { specialVar: true });\n        return [\n          annotateField(s, field, ia, 0, instruction.prim.toLocaleLowerCase()),\n          ...stack.slice(1),\n        ];\n      }\n\n      case 'CONS': {\n        const s = args(0, null, ['list']);\n        ensureTypesEqual(s[0], s[1].args[0]);\n        return [annotateVar({ prim: 'list', args: [s[1].args[0]] }), ...stack.slice(2)];\n      }\n\n      case 'SIZE':\n        args(0, ['string', 'list', 'set', 'map', 'bytes']);\n        return [annotateVar({ prim: 'nat' }), ...stack.slice(1)];\n\n      case 'MEM': {\n        const s = args(0, null, ['set', 'map', 'big_map']);\n        ensureComparableType(s[0]);\n        ensureTypesEqual(s[0], s[1].args[0]);\n        return [annotateVar({ prim: 'bool' }), ...stack.slice(2)];\n      }\n\n      case 'GET':\n        if (instruction.args) {\n          // comb operation\n          const n = parseInt(instruction.args[0].int, 10);\n          const s = args(0, ['pair'])[0];\n          return [annotateVar(getNth(s, n)), ...stack.slice(1)];\n        } else {\n          // map operation\n          const s = args(0, null, ['map', 'big_map']);\n          ensureComparableType(s[0]);\n          ensureTypesEqual(s[0], s[1].args[0]);\n          return [annotateVar({ prim: 'option', args: [s[1].args[1]] }), ...stack.slice(2)];\n        }\n\n      case 'UPDATE':\n        if (instruction.args) {\n          // comb operation\n          const n = parseInt(instruction.args[0].int, 10);\n          const s = args(0, null, ['pair']);\n          return [annotateVar(updateNth(s[1], s[0], n)), ...stack.slice(2)];\n        } else {\n          // map operation\n          const s0 = args(0, null, ['bool', 'option']);\n          ensureComparableType(s0[0]);\n          if (s0[1].prim === 'bool') {\n            const s1 = args(2, ['set']);\n            ensureTypesEqual(s0[0], s1[0].args[0]);\n            return [\n              annotateVar({\n                prim: 'set',\n                args: [annotate(s0[0], { t: null })],\n              }),\n              ...stack.slice(3),\n            ];\n          }\n\n          const s1 = args(2, ['map', 'big_map']);\n          ensureTypesEqual(s0[0], s1[0].args[0]);\n          if (s1[0].prim === 'map') {\n            return [\n              annotateVar({\n                prim: 'map',\n                args: [annotate(s0[0], { t: null }), annotate(s0[1].args[0], { t: null })],\n              }),\n              ...stack.slice(3),\n            ];\n          }\n          ensureBigMapStorableType(s0[1].args[0]);\n          return [\n            annotateVar({\n              prim: 'big_map',\n              args: [annotate(s0[0], { t: null }), annotate(s0[1].args[0], { t: null })],\n            }),\n            ...stack.slice(3),\n          ];\n        }\n\n      case 'GET_AND_UPDATE': {\n        const ia = instructionAnn({ v: 2 });\n        const s = args(0, null, ['option'], ['map', 'big_map']);\n        ensureComparableType(s[0]);\n        ensureTypesEqual(s[0], s[2].args[0]);\n        ensureTypesEqual(s[1].args[0], s[2].args[1]);\n        const va = ia.v?.map((v) => (v !== '@' ? [v] : undefined));\n        if (s[2].prim === 'map') {\n          return [\n            annotate({ prim: 'option', args: [s[2].args[1]] }, { v: va?.[0] }),\n            annotate(\n              {\n                prim: 'map',\n                args: [annotate(s[0], { t: null }), annotate(s[1].args[0], { t: null })],\n              },\n              { v: va?.[1] }\n            ),\n            ...stack.slice(3),\n          ];\n        }\n        ensureBigMapStorableType(s[1].args[0]);\n        return [\n          annotate({ prim: 'option', args: [s[2].args[1]] }, { v: va?.[0] }),\n          annotate(\n            {\n              prim: 'big_map',\n              args: [annotate(s[0], { t: null }), annotate(s[1].args[0], { t: null })],\n            },\n            { v: va?.[1] }\n          ),\n          ...stack.slice(3),\n        ];\n      }\n\n      case 'EXEC': {\n        const s = args(0, null, ['lambda']);\n        ensureTypesEqual(s[0], s[1].args[0]);\n        return [annotateVar(s[1].args[1]), ...stack.slice(2)];\n      }\n\n      case 'APPLY': {\n        const s = args(0, null, ['lambda']);\n        ensureStorableType(s[0]);\n        ensurePushableType(s[0]);\n        if (!isPairType(s[1].args[0])) {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: function's argument must be a pair: ${typeID(s[1].args[0])}`\n          );\n        }\n        const pt = s[1].args[0];\n        ensureTypesEqual(s[0], typeArgs(pt)[0]);\n        return [\n          annotateVar({ prim: 'lambda', args: [typeArgs(pt)[1], s[1].args[1]] }),\n          ...stack.slice(2),\n        ];\n      }\n\n      case 'FAILWITH': {\n        const s = args(0, null)[0];\n        if (!ProtoInferiorTo(proto, Protocol.PtEdo2Zk)) {\n          ensurePackableType(s);\n        }\n        return { failed: s, level: 0 };\n      }\n\n      case 'NEVER':\n        args(0, ['never']);\n        return { failed: { prim: 'never' }, level: 0 };\n\n      case 'RENAME':\n        return [annotateVar(args(0, null)[0]), ...stack.slice(1)];\n\n      case 'CONCAT': {\n        const s0 = args(0, ['string', 'list', 'bytes']);\n        if (s0[0].prim === 'list') {\n          if (typeID(s0[0].args[0]) !== 'string' && typeID(s0[0].args[0]) !== 'bytes') {\n            throw new MichelsonInstructionError(\n              instruction,\n              stack,\n              `${instruction.prim}: can't concatenate list of ${typeID(s0[0].args[0])}'s`\n            );\n          }\n          return [annotateVar(s0[0].args[0]), ...stack.slice(1)];\n        }\n        const s1 = args(1, ['string', 'bytes']);\n        if (s0[0].prim !== s1[0].prim) {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: can't concatenate ${s0[0].prim} with ${s1[0].prim}`\n          );\n        }\n        return [annotateVar(s1[0]), ...stack.slice(2)];\n      }\n\n      case 'SLICE':\n        return [\n          annotateVar(\n            { prim: 'option', args: [args(0, ['nat'], ['nat'], ['string', 'bytes'])[2]] },\n            '@slice'\n          ),\n          ...stack.slice(3),\n        ];\n\n      case 'PACK': {\n        const s = args(0, null)[0];\n        ensurePackableType(s);\n        return [annotateVar({ prim: 'bytes' }, '@packed'), ...stack.slice(1)];\n      }\n\n      case 'ADD': {\n        const s = args(\n          0,\n          ['nat', 'int', 'timestamp', 'mutez', 'bls12_381_g1', 'bls12_381_g2', 'bls12_381_fr'],\n          ['nat', 'int', 'timestamp', 'mutez', 'bls12_381_g1', 'bls12_381_g2', 'bls12_381_fr']\n        );\n        if (\n          (s[0].prim === 'nat' && s[1].prim === 'int') ||\n          (s[0].prim === 'int' && s[1].prim === 'nat')\n        ) {\n          return [annotateVar({ prim: 'int' }), ...stack.slice(2)];\n        } else if (\n          (s[0].prim === 'int' && s[1].prim === 'timestamp') ||\n          (s[0].prim === 'timestamp' && s[1].prim === 'int')\n        ) {\n          return [annotateVar({ prim: 'timestamp' }), ...stack.slice(2)];\n        } else if (\n          (s[0].prim === 'int' ||\n            s[0].prim === 'nat' ||\n            s[0].prim === 'mutez' ||\n            s[0].prim === 'bls12_381_g1' ||\n            s[0].prim === 'bls12_381_g2' ||\n            s[0].prim === 'bls12_381_fr') &&\n          s[0].prim === s[1].prim\n        ) {\n          return [annotateVar(s[0]), ...stack.slice(2)];\n        }\n        throw new MichelsonInstructionError(\n          instruction,\n          stack,\n          `${instruction.prim}: can't add ${s[0].prim} to ${s[1].prim}`\n        );\n      }\n\n      case 'SUB': {\n        const s = ProtoInferiorTo(proto, Protocol.PsiThaCa)\n          ? args(0, ['nat', 'int', 'timestamp', 'mutez'], ['nat', 'int', 'timestamp', 'mutez'])\n          : args(0, ['nat', 'int', 'timestamp'], ['nat', 'int', 'timestamp']);\n\n        if (\n          ((s[0].prim === 'nat' || s[0].prim === 'int') &&\n            (s[1].prim === 'nat' || s[1].prim === 'int')) ||\n          (s[0].prim === 'timestamp' && s[1].prim === 'timestamp')\n        ) {\n          return [annotateVar({ prim: 'int' }), ...stack.slice(2)];\n        } else if (s[0].prim === 'timestamp' && s[1].prim === 'int') {\n          return [annotateVar({ prim: 'timestamp' }), ...stack.slice(2)];\n        } else if (s[0].prim === 'mutez' && s[1].prim === 'mutez') {\n          return [annotateVar({ prim: 'mutez' }), ...stack.slice(2)];\n        }\n        throw new MichelsonInstructionError(\n          instruction,\n          stack,\n          `${instruction.prim}: can't subtract ${s[0].prim} from ${s[1].prim}`\n        );\n      }\n\n      case 'SUB_MUTEZ': {\n        const s = args(0, ['mutez'], ['mutez']);\n        return [annotateVar({ prim: 'option', args: [{ prim: 'mutez' }] }), ...stack.slice(2)];\n      }\n\n      case 'MUL': {\n        const s = args(\n          0,\n          ['nat', 'int', 'mutez', 'bls12_381_g1', 'bls12_381_g2', 'bls12_381_fr'],\n          ['nat', 'int', 'mutez', 'bls12_381_g1', 'bls12_381_g2', 'bls12_381_fr']\n        );\n        if (\n          (s[0].prim === 'nat' && s[1].prim === 'int') ||\n          (s[0].prim === 'int' && s[1].prim === 'nat')\n        ) {\n          return [annotateVar({ prim: 'int' }), ...stack.slice(2)];\n        } else if (\n          (s[0].prim === 'nat' && s[1].prim === 'mutez') ||\n          (s[0].prim === 'mutez' && s[1].prim === 'nat')\n        ) {\n          return [annotateVar({ prim: 'mutez' }), ...stack.slice(2)];\n        } else if (\n          ((s[0].prim === 'bls12_381_g1' ||\n            s[0].prim === 'bls12_381_g2' ||\n            s[0].prim === 'bls12_381_fr') &&\n            s[1].prim === 'bls12_381_fr') ||\n          ((s[0].prim === 'nat' || s[0].prim === 'int') && s[0].prim === s[1].prim)\n        ) {\n          return [annotateVar(s[0]), ...stack.slice(2)];\n        } else if (\n          ((s[0].prim === 'nat' || s[0].prim === 'int') && s[1].prim === 'bls12_381_fr') ||\n          ((s[1].prim === 'nat' || s[1].prim === 'int') && s[0].prim === 'bls12_381_fr')\n        ) {\n          return [annotateVar({ prim: 'bls12_381_fr' }), ...stack.slice(2)];\n        }\n        throw new MichelsonInstructionError(\n          instruction,\n          stack,\n          `${instruction.prim}: can't multiply ${s[0].prim} by ${s[1].prim}`\n        );\n      }\n\n      case 'EDIV': {\n        const res = (\n          a: 'nat' | 'int' | 'mutez',\n          b: 'nat' | 'int' | 'mutez'\n        ): MichelsonTypeOption<MichelsonType> => ({\n          prim: 'option',\n          args: [{ prim: 'pair', args: [{ prim: a }, { prim: b }] }],\n        });\n        const s = args(0, ['nat', 'int', 'mutez'], ['nat', 'int', 'mutez']);\n        if (s[0].prim === 'nat' && s[1].prim === 'nat') {\n          return [annotateVar(res('nat', 'nat')), ...stack.slice(2)];\n        } else if (\n          (s[0].prim === 'nat' || s[0].prim === 'int') &&\n          (s[1].prim === 'nat' || s[1].prim === 'int')\n        ) {\n          return [annotateVar(res('int', 'nat')), ...stack.slice(2)];\n        } else if (s[0].prim === 'mutez' && s[1].prim === 'nat') {\n          return [annotateVar(res('mutez', 'mutez')), ...stack.slice(2)];\n        } else if (s[0].prim === 'mutez' && s[1].prim === 'mutez') {\n          return [annotateVar(res('nat', 'mutez')), ...stack.slice(2)];\n        }\n        throw new MichelsonInstructionError(\n          instruction,\n          stack,\n          `${instruction.prim}: can't euclideally divide ${s[0].prim} by ${s[1].prim}`\n        );\n      }\n\n      case 'ABS':\n        args(0, ['int']);\n        return [annotateVar({ prim: 'nat' }), ...stack.slice(1)];\n\n      case 'ISNAT':\n        args(0, ['int']);\n        return [annotateVar({ prim: 'option', args: [{ prim: 'nat' }] }), ...stack.slice(1)];\n\n      case 'INT':\n        args(0, ['nat', 'bls12_381_fr']);\n        return [annotateVar({ prim: 'int' }), ...stack.slice(1)];\n\n      case 'NEG': {\n        const s = args(0, ['nat', 'int', 'bls12_381_g1', 'bls12_381_g2', 'bls12_381_fr'])[0];\n        if (s.prim === 'nat' || s.prim === 'int') {\n          return [annotateVar({ prim: 'int' }), ...stack.slice(1)];\n        }\n        return [annotateVar(s), ...stack.slice(1)];\n      }\n\n      case 'LSL':\n      case 'LSR':\n        args(0, ['nat'], ['nat']);\n        return [annotateVar({ prim: 'nat' }), ...stack.slice(2)];\n\n      case 'OR':\n      case 'XOR': {\n        const s = args(0, ['nat', 'bool'], ['nat', 'bool']);\n        if (s[0].prim !== s[1].prim) {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: both arguments must be of the same type: ${s[0].prim}, ${s[1].prim}`\n          );\n        }\n        return [annotateVar(s[1]), ...stack.slice(2)];\n      }\n\n      case 'AND': {\n        const s = args(0, ['nat', 'bool', 'int'], ['nat', 'bool']);\n        if ((s[0].prim !== 'int' || s[1].prim !== 'nat') && s[0].prim !== s[1].prim) {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: both arguments must be of the same type: ${s[0].prim}, ${s[1].prim}`\n          );\n        }\n        return [annotateVar(s[1]), ...stack.slice(2)];\n      }\n\n      case 'NOT': {\n        const s = args(0, ['nat', 'bool', 'int'])[0];\n        if (s.prim === 'bool') {\n          return [annotateVar({ prim: 'bool' }), ...stack.slice(1)];\n        }\n        return [annotateVar({ prim: 'int' }), ...stack.slice(1)];\n      }\n\n      case 'COMPARE': {\n        const s = args(0, null, null);\n        ensureComparableType(s[0]);\n        ensureComparableType(s[1]);\n        return [annotateVar({ prim: 'int' }), ...stack.slice(2)];\n      }\n\n      case 'EQ':\n      case 'NEQ':\n      case 'LT':\n      case 'GT':\n      case 'LE':\n      case 'GE':\n        args(0, ['int']);\n        return [annotateVar({ prim: 'bool' }), ...stack.slice(1)];\n\n      case 'SELF': {\n        if (ctx?.contract === undefined) {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: contract required`\n          );\n        }\n        const ia = instructionAnn({ f: 1, v: 1 });\n        const ep = contractEntryPoint(ctx.contract, ia.f?.[0]);\n        if (ep === null) {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: contract has no entrypoint ${ep}`\n          );\n        }\n        return [\n          annotate({ prim: 'contract', args: [ep] }, { v: ia.v ? ia.v : ['@self'] }),\n          ...stack,\n        ];\n      }\n\n      case 'TRANSFER_TOKENS': {\n        const s = args(0, null, ['mutez'], ['contract']);\n        ensureTypesEqual(s[0], s[2].args[0]);\n        return [annotateVar({ prim: 'operation' }), ...stack.slice(3)];\n      }\n\n      case 'SET_DELEGATE': {\n        const s = args(0, ['option'])[0];\n        if (typeID(s.args[0]) !== 'key_hash') {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: key hash expected: ${typeID(s.args[0])}`\n          );\n        }\n        return [annotateVar({ prim: 'operation' }), ...stack.slice(1)];\n      }\n\n      case 'IMPLICIT_ACCOUNT':\n        args(0, ['key_hash']);\n        return [annotateVar({ prim: 'contract', args: [{ prim: 'unit' }] }), ...stack.slice(1)];\n\n      case 'NOW':\n        return [annotateVar({ prim: 'timestamp' }, '@now'), ...stack];\n\n      case 'AMOUNT':\n        return [annotateVar({ prim: 'mutez' }, '@amount'), ...stack];\n\n      case 'BALANCE':\n        return [annotateVar({ prim: 'mutez' }, '@balance'), ...stack];\n\n      case 'CHECK_SIGNATURE':\n        args(0, ['key'], ['signature'], ['bytes']);\n        return [annotateVar({ prim: 'bool' }), ...stack.slice(3)];\n\n      case 'BLAKE2B':\n      case 'SHA256':\n      case 'SHA512':\n      case 'KECCAK':\n      case 'SHA3':\n        args(0, ['bytes']);\n        return [annotateVar({ prim: 'bytes' }), ...stack.slice(1)];\n\n      case 'HASH_KEY':\n        args(0, ['key']);\n        return [annotateVar({ prim: 'key_hash' }), ...stack.slice(1)];\n\n      case 'SOURCE':\n        return [annotateVar({ prim: 'address' }, '@source'), ...stack];\n\n      case 'SENDER':\n        return [annotateVar({ prim: 'address' }, '@sender'), ...stack];\n\n      case 'ADDRESS': {\n        const s = args(0, ['contract'])[0];\n        const ia = instructionAnn({ v: 1 });\n        return [\n          annotate(\n            { prim: 'address', [refContract]: s },\n            { v: ia.v ? ia.v : varSuffix(argAnn(s), 'address') }\n          ),\n          ...stack.slice(1),\n        ];\n      }\n\n      case 'SELF_ADDRESS': {\n        const addr: MichelsonTypeAddress = { prim: 'address' };\n        if (ctx?.contract !== undefined) {\n          addr[refContract] = {\n            prim: 'contract',\n            args: [contractSection(ctx.contract, 'parameter').args[0]],\n          };\n        }\n        return [annotateVar(addr, '@address'), ...stack];\n      }\n\n      case 'CHAIN_ID':\n        return [annotateVar({ prim: 'chain_id' }), ...stack];\n\n      case 'DROP': {\n        instructionAnn({});\n        const n = instruction.args !== undefined ? parseInt(instruction.args[0].int, 10) : 1;\n        args(n - 1, null);\n        return stack.slice(n);\n      }\n\n      case 'DIG': {\n        instructionAnn({});\n        const n = parseInt(instruction.args[0].int, 10);\n        return [args(n, null)[0], ...stack.slice(0, n), ...stack.slice(n + 1)];\n      }\n\n      case 'DUG': {\n        instructionAnn({});\n        const n = parseInt(instruction.args[0].int, 10);\n        return [...stack.slice(1, n + 1), args(0, null)[0], ...stack.slice(n + 1)];\n      }\n\n      case 'NONE':\n        assertTypeAnnotationsValid(instruction.args[0]);\n        return [\n          annotate({ prim: 'option', args: [instruction.args[0]] }, instructionAnn({ t: 1, v: 1 })),\n          ...stack,\n        ];\n\n      case 'LEFT':\n      case 'RIGHT': {\n        const s = args(0, null)[0];\n        const ia = instructionAnn({ f: 2, t: 1, v: 1 }, { specialFields: true });\n        const va = argAnn(s);\n\n        const children: [MichelsonType, MichelsonType] = [\n          annotate(s, {\n            t: null,\n            v: null,\n            f:\n              ia.f && ia.f.length > 0 && ia.f[0] !== '%'\n                ? ia.f[0] === '%@'\n                  ? va.v\n                    ? ['%' + va.v[0].slice(1)]\n                    : undefined\n                  : ia.f\n                : undefined,\n          }),\n          annotate(instruction.args[0], {\n            t: null,\n            f: ia.f && ia.f.length > 1 && ia.f[1] !== '%' ? ia.f : undefined,\n          }),\n        ];\n\n        return [\n          annotate(\n            {\n              prim: 'or',\n              args: instruction.prim === 'LEFT' ? children : [children[1], children[0]],\n            },\n            { t: ia.t, v: ia.v }\n          ),\n          ...stack.slice(1),\n        ];\n      }\n\n      case 'NIL':\n        assertTypeAnnotationsValid(instruction.args[0]);\n        return [\n          annotate({ prim: 'list', args: [instruction.args[0]] }, instructionAnn({ t: 1, v: 1 })),\n          ...stack,\n        ];\n\n      case 'UNPACK':\n        args(0, ['bytes']);\n        assertTypeAnnotationsValid(instruction.args[0]);\n        return [\n          annotateVar({ prim: 'option', args: [instruction.args[0]] }, '@unpacked'),\n          ...stack.slice(1),\n        ];\n\n      case 'CONTRACT': {\n        const s = args(0, ['address'])[0];\n        assertTypeAnnotationsValid(instruction.args[0]);\n        const ia = instructionAnn({ v: 1, f: 1 });\n        const contract = s[refContract];\n        if (contract !== undefined) {\n          const ep = contractEntryPoint(contract, ia.f?.[0]);\n          if (ep === null) {\n            throw new MichelsonInstructionError(\n              instruction,\n              stack,\n              `${instruction.prim}: contract has no entrypoint ${ep}`\n            );\n          }\n          ensureTypesEqual(ep, instruction.args[0]);\n        }\n        return [\n          annotate(\n            { prim: 'option', args: [{ prim: 'contract', args: [instruction.args[0]] }] },\n            { v: ia.v ? ia.v : varSuffix(argAnn(s), 'contract') }\n          ),\n          ...stack.slice(1),\n        ];\n      }\n\n      case 'CAST': {\n        instructionAnn({});\n        const s = args(0, null)[0];\n        assertTypeAnnotationsValid(instruction.args[0]);\n        ensureTypesEqual(instruction.args[0], s);\n        return [instruction.args[0], ...stack.slice(1)];\n      }\n\n      case 'IF_NONE': {\n        instructionAnn({});\n        const s = args(0, ['option'])[0];\n        const tail = stack.slice(1);\n        const br0 = functionTypeInternal(instruction.args[0], tail, ctx);\n        const br1 = functionTypeInternal(\n          instruction.args[1],\n          [annotate(s.args[0], { t: null, v: varSuffix(argAnn(s), 'some') }), ...tail],\n          ctx\n        );\n        return branchType(br0, br1);\n      }\n\n      case 'IF_LEFT': {\n        instructionAnn({});\n        const s = args(0, ['or'])[0];\n        const va = argAnn(s);\n        const lefta = argAnn(s.args[0]);\n        const righta = argAnn(s.args[1]);\n        const tail = stack.slice(1);\n        const br0 = functionTypeInternal(\n          instruction.args[0],\n          [\n            annotate(s.args[0], {\n              t: null,\n              v: varSuffix(va, lefta.f ? lefta.f[0].slice(1) : 'left'),\n            }),\n            ...tail,\n          ],\n          ctx\n        );\n        const br1 = functionTypeInternal(\n          instruction.args[1],\n          [\n            annotate(s.args[1], {\n              t: null,\n              v: varSuffix(va, righta.f ? righta.f[0].slice(1) : 'right'),\n            }),\n            ...tail,\n          ],\n          ctx\n        );\n        return branchType(br0, br1);\n      }\n\n      case 'IF_CONS': {\n        instructionAnn({});\n        const s = args(0, ['list'])[0];\n        const va = argAnn(s);\n        const tail = stack.slice(1);\n        const br0 = functionTypeInternal(\n          instruction.args[0],\n          [\n            annotate(s.args[0], { t: null, v: varSuffix(va, 'hd') }),\n            annotate(s, { t: null, v: varSuffix(va, 'tl') }),\n            ...tail,\n          ],\n          ctx\n        );\n        const br1 = functionTypeInternal(instruction.args[1], tail, ctx);\n        return branchType(br0, br1);\n      }\n\n      case 'IF': {\n        instructionAnn({});\n        args(0, ['bool']);\n        const tail = stack.slice(1);\n        const br0 = functionTypeInternal(instruction.args[0], tail, ctx);\n        const br1 = functionTypeInternal(instruction.args[1], tail, ctx);\n        return branchType(br0, br1);\n      }\n\n      case 'MAP': {\n        const s = args(0, ['list', 'map', 'option'])[0];\n        const tail = stack.slice(1);\n        const elt = s.prim === 'map' ? { prim: 'pair' as const, args: s.args } : s.args[0];\n        const body = functionTypeInternal(\n          instruction.args[0],\n          [annotate(elt, { t: null, v: varSuffix(argAnn(s), 'elt') }), ...tail],\n          ctx\n        );\n        if ('failed' in body) {\n          if (!('prim' in body.failed) || body.failed.prim !== 'never') {\n            throw new MichelsonInstructionError(\n              instruction,\n              stack,\n              `${instruction.prim}: FAIL is not allowed in MAP`\n            );\n          }\n          return { failed: body.failed, level: body.level + 1 };\n        }\n        if (body.length < 1) {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: function must return a value`\n          );\n        }\n        ensureStacksEqual(body.slice(1), tail);\n        return s.prim === 'list'\n          ? [annotateVar({ prim: 'list', args: [body[0]] }), ...tail]\n          : s.prim === 'map'\n          ? [annotateVar({ prim: 'map', args: [s.args[0], body[0]] }), ...tail]\n          : [annotateVar({ prim: 'option', args: [body[0]] }), ...tail];\n      }\n\n      case 'ITER': {\n        instructionAnn({});\n        const s = args(0, ['set', 'list', 'map'])[0];\n        const tail = stack.slice(1);\n        const elt = s.prim === 'map' ? { prim: 'pair' as const, args: s.args } : s.args[0];\n        const body = functionTypeInternal(\n          instruction.args[0],\n          [annotate(elt, { t: null, v: varSuffix(argAnn(s), 'elt') }), ...tail],\n          ctx\n        );\n        if ('failed' in body) {\n          return { failed: body.failed, level: body.level + 1 };\n        }\n        ensureStacksEqual(body, tail);\n        return tail;\n      }\n\n      case 'LOOP': {\n        instructionAnn({});\n        args(0, ['bool']);\n        const tail = stack.slice(1);\n        const body = functionTypeInternal(instruction.args[0], tail, ctx);\n        if ('failed' in body) {\n          return { failed: body.failed, level: body.level + 1 };\n        }\n        ensureStacksEqual(body, [{ prim: 'bool' }, ...tail]);\n        return tail;\n      }\n\n      case 'LOOP_LEFT': {\n        instructionAnn({});\n        const s = args(0, ['or'])[0];\n        const tail = stack.slice(1);\n        const body = functionTypeInternal(\n          instruction.args[0],\n          [annotate(s.args[0], { t: null, v: varSuffix(argAnn(s), 'left') }), ...tail],\n          ctx\n        );\n        if ('failed' in body) {\n          return { failed: body.failed, level: body.level + 1 };\n        }\n        ensureStacksEqual(body, [s, ...tail]);\n        return [annotate(s.args[1], { t: null, v: instructionAnn({ v: 1 }).v }), ...tail];\n      }\n\n      case 'DIP': {\n        instructionAnn({});\n        const n = instruction.args.length === 2 ? parseInt(instruction.args[0].int, 10) : 1;\n        args(n - 1, null);\n        const head = stack.slice(0, n);\n        const tail = stack.slice(n);\n        // ternary operator is a type guard so use it instead of just `instruction.args.length - 1`\n        const body =\n          instruction.args.length === 2\n            ? functionTypeInternal(instruction.args[1], tail, ctx)\n            : functionTypeInternal(instruction.args[0], tail, ctx);\n        if ('failed' in body) {\n          return { failed: body.failed, level: body.level + 1 };\n        }\n        return [...head, ...body];\n      }\n\n      case 'CREATE_CONTRACT': {\n        const ia = instructionAnn({ v: 2 });\n        const s = args(0, ['option'], ['mutez'], null);\n        if (typeID(s[0].args[0]) !== 'key_hash') {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: key hash expected: ${typeID(s[0].args[0])}`\n          );\n        }\n        if (ensureStorableType(s[2])) {\n          assertContractValid(instruction.args[0]);\n          assertScalarTypesEqual(contractSection(instruction.args[0], 'storage').args[0], s[2]);\n        }\n\n        const va = ia.v?.map((v) => (v !== '@' ? [v] : undefined));\n        return [\n          annotate({ prim: 'operation' }, { v: va?.[0] }),\n          annotate(\n            {\n              prim: 'address',\n              [refContract]: {\n                prim: 'contract',\n                args: [contractSection(instruction.args[0], 'parameter').args[0]],\n              },\n            },\n            { v: va?.[1] }\n          ),\n          ...stack.slice(3),\n        ];\n      }\n\n      case 'PUSH':\n        assertTypeAnnotationsValid(instruction.args[0]);\n        assertDataValidInternal(instruction.args[1], instruction.args[0], {\n          ...ctx,\n          contract: undefined,\n        });\n        return [annotateVar(instruction.args[0]), ...stack];\n\n      case 'EMPTY_SET':\n        assertTypeAnnotationsValid(instruction.args[0]);\n        ensureComparableType(instruction.args[0]);\n        return [\n          annotate({ prim: 'set', args: instruction.args }, instructionAnn({ t: 1, v: 1 })),\n          ...stack,\n        ];\n\n      case 'EMPTY_MAP':\n        assertTypeAnnotationsValid(instruction.args[0]);\n        ensureComparableType(instruction.args[0]);\n        assertTypeAnnotationsValid(instruction.args[1]);\n        return [\n          annotate({ prim: 'map', args: instruction.args }, instructionAnn({ t: 1, v: 1 })),\n          ...stack,\n        ];\n\n      case 'EMPTY_BIG_MAP':\n        assertTypeAnnotationsValid(instruction.args[0]);\n        ensureComparableType(instruction.args[0]);\n        assertTypeAnnotationsValid(instruction.args[1]);\n        ensureBigMapStorableType(instruction.args[0]);\n        return [\n          annotate({ prim: 'big_map', args: instruction.args }, instructionAnn({ t: 1, v: 1 })),\n          ...stack,\n        ];\n\n      case 'LAMBDA': {\n        assertTypeAnnotationsValid(instruction.args[0]);\n        assertTypeAnnotationsValid(instruction.args[1]);\n        const body = functionTypeInternal(instruction.args[2], [instruction.args[0]], {\n          ...ctx,\n          contract: undefined,\n        });\n        if ('failed' in body) {\n          return { failed: body.failed, level: body.level + 1 };\n        }\n        if (body.length !== 1) {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: function must return a value`\n          );\n        }\n        ensureTypesEqual(instruction.args[1], body[0]);\n        return [\n          annotateVar({ prim: 'lambda', args: [instruction.args[0], instruction.args[1]] }),\n          ...stack,\n        ];\n      }\n\n      case 'LEVEL':\n        return [annotateVar({ prim: 'nat' }, '@level'), ...stack];\n\n      case 'TOTAL_VOTING_POWER':\n        return [annotateVar({ prim: 'nat' }), ...stack];\n\n      case 'VOTING_POWER':\n        args(0, ['key_hash']);\n        return [annotateVar({ prim: 'nat' }), ...stack.slice(1)];\n\n      case 'TICKET': {\n        const s = args(0, null, ['nat'])[0];\n        ensureComparableType(s);\n        return [\n          annotate({ prim: 'ticket', args: [s] }, instructionAnn({ t: 1, v: 1 })),\n          ...stack.slice(2),\n        ];\n      }\n\n      case 'JOIN_TICKETS': {\n        const s = unpackComb('pair', args(0, ['pair'])[0]);\n        if (typeID(s.args[0]) !== 'ticket') {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: ticket expected: ${typeID(s.args[0])}`\n          );\n        }\n        ensureTypesEqual(s.args[0], s.args[1]);\n        return [\n          annotateVar({\n            prim: 'option',\n            args: [annotate(s.args[0], { t: null })],\n          }),\n          ...stack.slice(1),\n        ];\n      }\n\n      case 'SPLIT_TICKET': {\n        const s = args(0, ['ticket'], ['pair']);\n        const p = unpackComb('pair', s[1]);\n        if (typeID(p.args[0]) !== 'nat') {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: nat expected: ${typeID(p.args[0])}`\n          );\n        }\n        ensureTypesEqual(p.args[0], p.args[1]);\n        return [\n          annotateVar({\n            prim: 'option',\n            args: [\n              {\n                prim: 'pair',\n                args: [annotate(s[0], { t: null }), annotate(s[0], { t: null })],\n              },\n            ],\n          }),\n          ...stack.slice(2),\n        ];\n      }\n\n      case 'READ_TICKET': {\n        const ia = instructionAnn({ v: 2 });\n        const s = args(0, ['ticket'])[0];\n        const va = ia.v?.map((v) => (v !== '@' ? [v] : undefined));\n        return [\n          annotate(\n            {\n              prim: 'pair',\n              args: [{ prim: 'address' }, annotate(s.args[0], { t: null }), { prim: 'nat' }],\n            },\n            { v: va?.[0] }\n          ),\n          annotate(s, { v: va?.[1], t: null }),\n          ...stack.slice(1),\n        ];\n      }\n\n      case 'PAIRING_CHECK': {\n        const p = args(0, ['list'])[0].args[0];\n        if (!isPairType(p)) {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: pair expected: ${typeID(p)}`\n          );\n        }\n        const c = unpackComb('pair', p);\n        if (typeID(c.args[0]) !== 'bls12_381_g1') {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: bls12_381_g1 expected: ${typeID(c.args[0])}`\n          );\n        }\n        if (typeID(c.args[1]) !== 'bls12_381_g2') {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: bls12_381_g2 expected: ${typeID(c.args[1])}`\n          );\n        }\n        return [annotateVar({ prim: 'bool' }), ...stack.slice(1)];\n      }\n\n      case 'SAPLING_EMPTY_STATE':\n        return [\n          annotate(\n            { prim: 'sapling_state', args: [instruction.args[0]] },\n            instructionAnn({ v: 1, t: 1 })\n          ),\n          ...stack,\n        ];\n\n      case 'SAPLING_VERIFY_UPDATE': {\n        const s = args(0, ['sapling_transaction'], ['sapling_state']);\n        if (parseInt(s[0].args[0].int, 10) !== parseInt(s[1].args[0].int, 10)) {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: sapling memo size mismatch: ${s[0].args[0].int} != ${s[1].args[0].int}`\n          );\n        }\n        return ProtoInferiorTo(proto, Protocol.PtJakarta)\n          ? [\n              annotateVar({\n                prim: 'option',\n                args: [\n                  {\n                    prim: 'pair',\n                    args: [{ prim: 'int' }, annotate(s[1], { t: null })],\n                  },\n                ],\n              }),\n              ...stack.slice(2),\n            ]\n          : [\n              annotateVar({\n                prim: 'option',\n                args: [\n                  {\n                    prim: 'pair',\n                    args: [\n                      { prim: 'bytes' },\n                      {\n                        prim: 'pair',\n                        args: [{ prim: 'int' }, annotate(s[1], { t: null })],\n                      },\n                    ],\n                  },\n                ],\n              }),\n              ...stack.slice(2),\n            ];\n      }\n\n      case 'OPEN_CHEST':\n        args(0, ['chest_key'], ['chest'], ['nat']);\n        return [\n          annotateVar({ prim: 'or', args: [{ prim: 'bytes' }, { prim: 'bool' }] }),\n          ...stack.slice(3),\n        ];\n\n      case 'VIEW': {\n        const s = args(0, null, ['address']);\n        ensurePushableType(s[0]);\n        return [annotateVar({ prim: 'option', args: [instruction.args[1]] }), ...stack.slice(2)];\n      }\n\n      default:\n        throw new MichelsonError(\n          instruction as MichelsonCode,\n          `unexpected instruction: ${(instruction as Prim).prim}`\n        );\n    }\n  })(instruction);\n\n  if (ctx?.traceCallback !== undefined) {\n    const trace: InstructionTrace = {\n      op: instruction,\n      in: stack,\n      out: retStack,\n    };\n    ctx.traceCallback(trace);\n  }\n\n  return retStack;\n}\n\nexport function contractSection<T extends 'parameter' | 'storage' | 'code'>(\n  contract: MichelsonContract,\n  section: T\n): MichelsonContractSection<T> {\n  for (const s of contract) {\n    if (s.prim === section) {\n      return s as MichelsonContractSection<T>;\n    }\n  }\n  throw new MichelsonError(contract, `missing contract section: ${section}`);\n}\n\nexport function contractViews(contract: MichelsonContract): {\n  [name: string]: MichelsonContractView;\n} {\n  const views: { [name: string]: MichelsonContractView } = {};\n  for (const s of contract) {\n    if (s.prim === 'view') {\n      views[s.args[0].string] = s;\n    }\n  }\n  return views;\n}\n\nfunction isContract(v: Expr): v is MichelsonContract {\n  if (Array.isArray(v)) {\n    for (const s of v) {\n      if ('prim' in s && (s.prim === 'parameter' || s.prim === 'storage' || s.prim === 'code')) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nexport function contractEntryPoint(\n  src: MichelsonContract | MichelsonType,\n  ep?: string\n): MichelsonType | null {\n  ep = ep || '%default';\n  const entryPoint = contractEntryPoints(src).find((x) => x[0] === ep);\n\n  if (entryPoint !== undefined) {\n    return entryPoint[1];\n  } else if (ep === '%default') {\n    return isContract(src) ? contractSection(src, 'parameter').args[0] : src;\n  }\n  return null;\n}\n\nfunction isOrType(t: MichelsonType): t is MichelsonTypeOr<[MichelsonType, MichelsonType]> {\n  return Array.isArray(t) || t.prim === 'or';\n}\n\nexport function contractEntryPoints(\n  src: MichelsonContract | MichelsonType\n): [string, MichelsonType][] {\n  if (isContract(src)) {\n    const param = contractSection(src, 'parameter');\n    const ch = contractEntryPoints(param.args[0]);\n    const a = unpackAnnotations(param);\n    return a.f ? [[a.f[0], param.args[0]], ...ch] : ch;\n  }\n\n  if (isOrType(src)) {\n    const args = typeArgs(src);\n    const getArg = (n: 0 | 1): [string, MichelsonType][] => {\n      const a = unpackAnnotations(args[n]);\n      if (typeID(args[n]) === 'or') {\n        const ch = contractEntryPoints(args[n]);\n        return a.f ? [[a.f[0], args[n]], ...ch] : ch;\n      }\n      return a.f ? [[a.f[0], args[n]]] : [];\n    };\n    return [...getArg(0), ...getArg(1)];\n  }\n  return [];\n}\n\n// Contract validation\n\nexport function assertContractValid(\n  contract: MichelsonContract,\n  ctx?: Context\n): MichelsonReturnType {\n  const assertSection = (\n    parameter: MichelsonType,\n    storage: MichelsonType,\n    ret: MichelsonType,\n    code: InstructionList\n  ): MichelsonReturnType => {\n    assertTypeAnnotationsValid(parameter, true);\n    assertTypeAnnotationsValid(storage);\n    const arg: MichelsonType = {\n      prim: 'pair',\n      args: [\n        { ...parameter, ...{ annots: ['@parameter'] } },\n        { ...storage, ...{ annots: ['@storage'] } },\n      ],\n    };\n    const out = functionTypeInternal(code, [arg], { ...ctx, ...{ contract } });\n    if ('failed' in out) {\n      return out;\n    }\n\n    try {\n      assertStacksEqual(out, [ret]);\n    } catch (err) {\n      if (err instanceof MichelsonError) {\n        throw new MichelsonInstructionError(code, out, err.message);\n      } else {\n        throw err;\n      }\n    }\n    return out;\n  };\n\n  const parameter = contractSection(contract, 'parameter').args[0];\n  const storage = contractSection(contract, 'storage').args[0];\n  const code = contractSection(contract, 'code').args[0];\n  const expected: MichelsonType = {\n    prim: 'pair',\n    args: [{ prim: 'list', args: [{ prim: 'operation' }] }, storage],\n  };\n  const ret = assertSection(parameter, storage, expected, code);\n\n  for (const view of Object.values(contractViews(contract))) {\n    assertSection(view.args[1], storage, view.args[2], view.args[3]);\n  }\n\n  return ret;\n}\n\n// Exported wrapper functions\n\nexport function assertDataValid(d: MichelsonData, t: MichelsonType, ctx?: Context): void {\n  assertTypeAnnotationsValid(t);\n  assertDataValidInternal(d, t, ctx || null);\n}\n\nexport function functionType(\n  inst: MichelsonCode,\n  stack: MichelsonType[],\n  ctx?: Context\n): MichelsonReturnType {\n  for (const t of stack) {\n    assertTypeAnnotationsValid(t);\n  }\n\n  if (ctx?.contract !== undefined) {\n    for (const typesec of ['parameter', 'storage'] as const) {\n      const sec = contractSection(ctx.contract, typesec).args[0];\n      assertTypeAnnotationsValid(sec);\n    }\n  }\n\n  return functionTypeInternal(inst, stack, ctx || null);\n}\n\nexport function assertTypesEqual<T1 extends MichelsonType | MichelsonType[], T2 extends T1>(\n  a: T1,\n  b: T2,\n  field = false\n): void {\n  if (Array.isArray(a)) {\n    // type guards don't work for parametrized generic types\n    for (const v of a as MichelsonType[]) {\n      assertTypeAnnotationsValid(v);\n    }\n    for (const v of b as MichelsonType[]) {\n      assertTypeAnnotationsValid(v);\n    }\n  } else {\n    assertTypeAnnotationsValid(a as MichelsonType);\n    assertTypeAnnotationsValid(b as MichelsonType);\n  }\n  assertScalarTypesEqual(a, b, field);\n}\n\nexport function isTypeAnnotationsValid(t: MichelsonType, field = false): boolean {\n  try {\n    assertTypeAnnotationsValid(t, field);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function isContractValid(\n  contract: MichelsonContract,\n  ctx?: Context\n): MichelsonReturnType | null {\n  try {\n    return assertContractValid(contract, ctx);\n  } catch {\n    return null;\n  }\n}\n\nexport function isDataValid(d: MichelsonData, t: MichelsonType, ctx?: Context): boolean {\n  try {\n    assertDataValid(d, t, ctx);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function isTypeEqual<T1 extends MichelsonType | MichelsonType[], T2 extends T1>(\n  a: T1,\n  b: T2,\n  field = false\n): boolean {\n  try {\n    assertTypesEqual(a, b, field);\n    return true;\n  } catch {\n    return false;\n  }\n}\n","import {\n  MichelsonContract,\n  MichelsonContractSection,\n  MichelsonType,\n  MichelsonData,\n  MichelsonCode,\n  MichelsonReturnType,\n} from './michelson-types';\nimport {\n  assertContractValid,\n  contractSection,\n  contractEntryPoint,\n  assertDataValid,\n  assertTypeAnnotationsValid,\n  InstructionTrace,\n  Context,\n  functionType,\n  isDataValid,\n  contractEntryPoints,\n} from './michelson-typecheck';\nimport { Parser, ParserOptions } from './micheline-parser';\nimport {\n  assertMichelsonContract,\n  assertMichelsonType,\n  assertMichelsonData,\n} from './michelson-validator';\nimport {\n  InvalidDataExpressionError,\n  InvalidEntrypointError,\n  InvalidContractError,\n  InvalidTypeExpressionError,\n} from './error';\n\nexport interface ContractOptions extends ParserOptions {\n  traceCallback?: (t: InstructionTrace) => void;\n}\n\nexport class Contract {\n  private ctx: Context;\n  public readonly output: MichelsonReturnType;\n\n  constructor(public readonly contract: MichelsonContract, opt?: ContractOptions) {\n    this.ctx = { contract, ...opt };\n    this.output = assertContractValid(contract, this.ctx);\n  }\n\n  static parse(src: string | object, opt?: ContractOptions): Contract {\n    const p = new Parser(opt);\n    const expr = typeof src === 'string' ? p.parseScript(src) : p.parseJSON(src);\n    if (expr === null) {\n      throw new InvalidContractError('empty contract');\n    }\n    if (assertMichelsonContract(expr)) {\n      return new Contract(expr, opt);\n    }\n    throw undefined;\n  }\n\n  static parseTypeExpression(src: string | object, opt?: ParserOptions): MichelsonType {\n    const p = new Parser(opt);\n    const expr = typeof src === 'string' ? p.parseScript(src) : p.parseJSON(src);\n    if (expr === null) {\n      throw new InvalidTypeExpressionError('empty type expression');\n    }\n    if (assertMichelsonType(expr) && assertTypeAnnotationsValid(expr)) {\n      return expr;\n    }\n    throw undefined;\n  }\n\n  static parseDataExpression(src: string | object, opt?: ParserOptions): MichelsonData {\n    const p = new Parser(opt);\n    const expr = typeof src === 'string' ? p.parseScript(src) : p.parseJSON(src);\n    if (expr === null) {\n      throw new InvalidDataExpressionError('empty data expression');\n    }\n    if (assertMichelsonData(expr)) {\n      return expr;\n    }\n    throw undefined;\n  }\n\n  section<T extends 'parameter' | 'storage' | 'code'>(section: T): MichelsonContractSection<T> {\n    return contractSection(this.contract, section);\n  }\n\n  entryPoints(): [string, MichelsonType][] {\n    return contractEntryPoints(this.contract);\n  }\n\n  entryPoint(ep?: string): MichelsonType | null {\n    return contractEntryPoint(this.contract, ep);\n  }\n\n  assertDataValid(d: MichelsonData, t: MichelsonType): void {\n    assertDataValid(d, t, this.ctx);\n  }\n\n  isDataValid(d: MichelsonData, t: MichelsonType): boolean {\n    return isDataValid(d, t, this.ctx);\n  }\n\n  assertParameterValid(ep: string | null, d: MichelsonData): void {\n    const t = this.entryPoint(ep || undefined);\n    if (t === null) {\n      throw new InvalidEntrypointError(ep?.toString());\n    }\n    this.assertDataValid(d, t);\n  }\n\n  isParameterValid(ep: string | null, d: MichelsonData): boolean {\n    try {\n      this.assertParameterValid(ep, d);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  functionType(inst: MichelsonCode, stack: MichelsonType[]): MichelsonReturnType {\n    return functionType(inst, stack, this.ctx);\n  }\n}\n\nexport const dummyContract = new Contract([\n  { prim: 'parameter', args: [{ prim: 'unit' }] },\n  { prim: 'storage', args: [{ prim: 'unit' }] },\n  {\n    prim: 'code',\n    args: [[{ prim: 'CAR' }, { prim: 'NIL', args: [{ prim: 'operation' }] }, { prim: 'PAIR' }]],\n  },\n]);\n","import { sourceReference, Expr } from './micheline';\nimport { InstructionTrace, MichelsonInstructionError } from './michelson-typecheck';\nimport { emitMicheline } from './micheline-emitter';\nimport { unpackAnnotations, MichelsonError, MichelsonTypeError } from './utils';\nimport { MichelsonReturnType } from './michelson-types';\n\nexport function formatStack(s: MichelsonReturnType): string {\n  if ('failed' in s) {\n    return `[FAILED: ${emitMicheline(s.failed)}]`;\n  }\n\n  return s\n    .map((v, i) => {\n      const ann = unpackAnnotations(v);\n      return `[${i}${ann.v ? '/' + ann.v[0] : ''}]: ${emitMicheline(v)}`;\n    })\n    .join('\\n');\n}\n\nexport function traceDumpFunc(\n  blocks: boolean,\n  cb: (s: string) => void\n): (v: InstructionTrace) => void {\n  return (v: InstructionTrace) => {\n    if (Array.isArray(v) && !blocks) {\n      return;\n    }\n    const macro = v.op[sourceReference]?.macro;\n\n    const msg = `${macro ? 'Macro' : 'Op'}: ${\n      macro ? emitMicheline(macro, undefined, true) + ' / ' : ''\n    }${emitMicheline(v.op)}\nInput:\n${formatStack(v.in)}\nOutput:\n${formatStack(v.out)}\n`;\n    cb(msg);\n  };\n}\n\nexport function formatError(err: MichelsonError): string {\n  if (err instanceof MichelsonInstructionError) {\n    const macro = err.val[sourceReference]?.macro;\n    return `${macro ? 'Macro' : 'Op'}: ${\n      macro ? emitMicheline(macro, undefined, true) + ' / ' : ''\n    }${emitMicheline(err.val)}\nStack:\n${formatStack(err.stackState)}\n`;\n  } else if (err instanceof MichelsonTypeError) {\n    const type = Array.isArray(err.val)\n      ? '[' + (err.val as Expr[]).map((v, i) => `[${i}]: ${emitMicheline(v)}`).join('; ') + ']'\n      : emitMicheline(err.val);\n\n    return `Type: ${type}\n${\n  err.data\n    ? `Data: ${emitMicheline(err.data)}\n`\n    : ''\n}\n`;\n  } else {\n    return `Value: ${emitMicheline(err.val)}`;\n  }\n}\n","\n// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\nexport const VERSION = {\n    \"commitHash\": \"cbdd0af87e400489076259d065e2d328feb8e1b4\",\n    \"version\": \"12.1.0\"\n};\n"]},"metadata":{},"sourceType":"module"}