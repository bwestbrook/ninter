{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { TransportType, ExtensionMessageTarget, TransportStatus, Origin } from '@airgap/beacon-types';\nimport { Transport, PeerManager, Logger, windowRef } from '@airgap/beacon-core';\nimport { PostMessageClient } from './PostMessageClient';\nconst logger = new Logger('PostMessageTransport');\nlet listeningForExtensions = false;\nlet extensionsPromise;\nlet extensions;\n\nconst addExtension = extension => {\n  if (!extensions) {\n    extensions = [];\n  }\n\n  if (!extensions.some(ext => ext.id === extension.id)) {\n    extensions.push(extension);\n    windowRef.postMessage('extensionsUpdated', windowRef.location.origin);\n  }\n};\n/**\n * @internalapi\n *\n *\n */\n\n\nexport class PostMessageTransport extends Transport {\n  constructor(name, keyPair, storage, storageKey) {\n    super(name, new PostMessageClient(name, keyPair), new PeerManager(storage, storageKey));\n    this.type = TransportType.POST_MESSAGE;\n  }\n\n  static isAvailable() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return new Promise(resolve => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const fn = event => {\n          const data = event.data;\n\n          if (data && data.payload === 'pong') {\n            resolve(true);\n            windowRef.removeEventListener('message', fn);\n          }\n        };\n\n        windowRef.addEventListener('message', fn);\n        const message = {\n          target: ExtensionMessageTarget.EXTENSION,\n          payload: 'ping'\n        }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n        windowRef.postMessage(message, windowRef.location.origin);\n      });\n    });\n  }\n\n  static getAvailableExtensions() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (extensionsPromise) {\n        return extensionsPromise;\n      }\n\n      if (extensions) {\n        return extensions;\n      }\n\n      extensions = [];\n      extensionsPromise = new Promise(resolve => {\n        PostMessageTransport.listenForExtensions();\n        setTimeout(() => {\n          resolve(extensions !== null && extensions !== void 0 ? extensions : []);\n        }, 1000);\n      }).finally(() => {\n        extensionsPromise = undefined;\n      });\n      return extensionsPromise;\n    });\n  }\n\n  static listenForExtensions() {\n    if (listeningForExtensions) {\n      return;\n    } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    const fn = event => {\n      if (event.source !== windowRef || event.origin !== windowRef.location.origin) {\n        // TODO: Add to error handler: console.debug('[Beacon]: Event received from untrusted origin')\n        return;\n      }\n\n      const data = event.data;\n      const sender = data.sender;\n\n      if (data && data.payload === 'pong' && sender) {\n        logger.log('getAvailableExtensions', `extension \"${sender.name}\" is available`, sender);\n        addExtension(sender);\n      }\n    };\n\n    windowRef.addEventListener('message', fn);\n    const message = {\n      target: ExtensionMessageTarget.EXTENSION,\n      payload: 'ping'\n    }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    windowRef.postMessage(message, windowRef.location.origin);\n    listeningForExtensions = true;\n  }\n\n  connect() {\n    const _super = Object.create(null, {\n      connect: {\n        get: () => super.connect\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      logger.log('connect');\n\n      if (this._isConnected !== TransportStatus.NOT_CONNECTED) {\n        return;\n      }\n\n      this._isConnected = TransportStatus.CONNECTING;\n      const knownPeers = yield this.getPeers();\n\n      if (knownPeers.length > 0) {\n        logger.log('connect', `connecting to ${knownPeers.length} peers`);\n        const connectionPromises = knownPeers.map(peer => __awaiter(this, void 0, void 0, function* () {\n          return this.listen(peer.publicKey);\n        }));\n        Promise.all(connectionPromises).catch(error => logger.error('connect', error));\n      }\n\n      yield this.startOpenChannelListener();\n      yield _super.connect.call(this);\n    });\n  }\n\n  startOpenChannelListener() {\n    return __awaiter(this, void 0, void 0, function* () {//\n    });\n  }\n\n  getPairingRequestInfo() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.client.getPairingRequestInfo();\n    });\n  }\n\n  listen(publicKey) {\n    return __awaiter(this, void 0, void 0, function* () {\n      logger.log('listen', publicKey);\n      yield this.client.listenForEncryptedMessage(publicKey, (message, context) => {\n        const connectionContext = {\n          origin: Origin.EXTENSION,\n          id: context.id\n        };\n        this.notifyListeners(message, connectionContext).catch(error => {\n          throw error;\n        });\n      }).catch(error => {\n        throw error;\n      });\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["TransportType","ExtensionMessageTarget","TransportStatus","Origin","Transport","PeerManager","Logger","windowRef","PostMessageClient","logger","listeningForExtensions","extensionsPromise","extensions","addExtension","extension","some","ext","id","push","postMessage","location","origin","PostMessageTransport","constructor","name","keyPair","storage","storageKey","POST_MESSAGE","isAvailable","Promise","resolve","fn","event","data","payload","removeEventListener","addEventListener","message","target","EXTENSION","getAvailableExtensions","listenForExtensions","setTimeout","finally","undefined","source","sender","log","connect","_isConnected","NOT_CONNECTED","CONNECTING","knownPeers","getPeers","length","connectionPromises","map","peer","__awaiter","listen","publicKey","all","catch","error","startOpenChannelListener","_super","call","getPairingRequestInfo","client","listenForEncryptedMessage","context","connectionContext","notifyListeners"],"sourceRoot":"","sources":["../../src/PostMessageTransport.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}