{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { defaultValues } from '@airgap/beacon-types';\n/**\n * @internalapi\n *\n * A storage that can be used in chrome extensions\n */\n\nexport class ChromeStorage {\n  static isSupported() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return typeof window !== 'undefined' && typeof chrome !== 'undefined' && Boolean(chrome) && Boolean(chrome.runtime) && Boolean(chrome.runtime.id);\n    });\n  }\n\n  get(key) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return new Promise(resolve => {\n        chrome.storage.local.get(null, storageContent => {\n          if (storageContent[key]) {\n            resolve(storageContent[key]);\n          } else {\n            if (typeof defaultValues[key] === 'object') {\n              resolve(JSON.parse(JSON.stringify(defaultValues[key])));\n            } else {\n              resolve(defaultValues[key]);\n            }\n          }\n        });\n      });\n    });\n  }\n\n  set(key, value) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return new Promise(resolve => {\n        chrome.storage.local.set({\n          [key]: value\n        }, () => {\n          resolve();\n        });\n      });\n    });\n  }\n\n  delete(key) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return new Promise(resolve => {\n        chrome.storage.local.set({\n          [key]: undefined\n        }, () => {\n          resolve();\n        });\n      });\n    });\n  }\n\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAoDA,aAApD,QAAyE,sBAAzE;AAEA;;;;;;AAKA,OAAM,MAAOC,aAAP,CAAoB;EACO,OAAXC,WAAW;;MAC7B,OACE,OAAOC,MAAP,KAAkB,WAAlB,IACA,OAAOC,MAAP,KAAkB,WADlB,IAEAC,OAAO,CAACD,MAAD,CAFP,IAGAC,OAAO,CAACD,MAAM,CAACE,OAAR,CAHP,IAIAD,OAAO,CAACD,MAAM,CAACE,OAAP,CAAeC,EAAhB,CALT;IAOD;EAAA;;EAEYC,GAAG,CAAuBC,GAAvB,EAA6B;;MAC3C,OAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAY;QAC7BP,MAAM,CAACQ,OAAP,CAAeC,KAAf,CAAqBL,GAArB,CAAyB,IAAzB,EAAgCM,cAAD,IAAmB;UAChD,IAAIA,cAAc,CAACL,GAAD,CAAlB,EAAyB;YACvBE,OAAO,CAACG,cAAc,CAACL,GAAD,CAAf,CAAP;UACD,CAFD,MAEO;YACL,IAAI,OAAOT,aAAa,CAACS,GAAD,CAApB,KAA8B,QAAlC,EAA4C;cAC1CE,OAAO,CAACI,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAejB,aAAa,CAACS,GAAD,CAA5B,CAAX,CAAD,CAAP;YACD,CAFD,MAEO;cACLE,OAAO,CAACX,aAAa,CAACS,GAAD,CAAd,CAAP;YACD;UACF;QACF,CAVD;MAWD,CAZM,CAAP;IAaD;EAAA;;EAEYS,GAAG,CAAuBT,GAAvB,EAA+BU,KAA/B,EAA6D;;MAC3E,OAAO,IAAIT,OAAJ,CAAaC,OAAD,IAAY;QAC7BP,MAAM,CAACQ,OAAP,CAAeC,KAAf,CAAqBK,GAArB,CAAyB;UAAE,CAACT,GAAD,GAAOU;QAAT,CAAzB,EAA2C,MAAK;UAC9CR,OAAO;QACR,CAFD;MAGD,CAJM,CAAP;IAKD;EAAA;;EAEYS,MAAM,CAAuBX,GAAvB,EAA6B;;MAC9C,OAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAY;QAC7BP,MAAM,CAACQ,OAAP,CAAeC,KAAf,CAAqBK,GAArB,CAAyB;UAAE,CAACT,GAAD,GAAOY;QAAT,CAAzB,EAA+C,MAAK;UAClDV,OAAO;QACR,CAFD;MAGD,CAJM,CAAP;IAKD;EAAA;;AAzCuB","names":["defaultValues","ChromeStorage","isSupported","window","chrome","Boolean","runtime","id","get","key","Promise","resolve","storage","local","storageContent","JSON","parse","stringify","set","value","delete","undefined"],"sourceRoot":"","sources":["../../../src/storage/ChromeStorage.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}