{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/* eslint-disable prefer-arrow/prefer-arrow-functions */\n\n\nfunction fixArrayType(array) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return array;\n}\n/* eslint-enable prefer-arrow/prefer-arrow-functions */\n\n/**\n * @internalapi\n *\n * The StorageManager provides CRUD functionality for specific entities and persists them to the provided storage.\n */\n\n\nexport class StorageManager {\n  constructor(storage, storageKey) {\n    this.storage = storage;\n    this.storageKey = storageKey;\n  }\n\n  getAll() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storage.get(this.storageKey);\n    });\n  }\n\n  getOne(predicate) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const entities = yield this.storage.get(this.storageKey);\n      return fixArrayType(entities).find(predicate);\n    });\n  }\n\n  addOne(element, predicate, overwrite = true) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const entities = yield this.storage.get(this.storageKey);\n\n      if (!fixArrayType(entities).some(predicate)) {\n        fixArrayType(entities).push(element);\n      } else if (overwrite) {\n        for (let i = 0; i < entities.length; i++) {\n          if (predicate(fixArrayType(entities)[i])) {\n            entities[i] = element;\n          }\n        }\n      }\n\n      return this.storage.set(this.storageKey, entities);\n    });\n  }\n\n  remove(predicate) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const entities = yield this.storage.get(this.storageKey);\n      const filteredEntities = fixArrayType(entities).filter(entity => !predicate(entity)); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      return this.storage.set(this.storageKey, filteredEntities);\n    });\n  }\n\n  removeAll() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storage.delete(this.storageKey);\n    });\n  }\n\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;AACA,SAASA,YAAT,CAAyBC,KAAzB,EAAiC;EAC/B;EACA,OAAOA,KAAP;AACD;AACD;;AAEA;;;;;;;AAKA,OAAM,MAAOC,cAAP,CAAqB;EAazBC,YAAYC,OAAZ,EAA8BC,UAA9B,EAA2C;IACzC,KAAKD,OAAL,GAAeA,OAAf;IACA,KAAKC,UAAL,GAAkBA,UAAlB;EACD;;EAEYC,MAAM;;MACjB,OAAO,KAAKF,OAAL,CAAaG,GAAb,CAAiB,KAAKF,UAAtB,CAAP;IACD;EAAA;;EAEYG,MAAM,CACjBC,SADiB,EACkD;;MAEnE,MAAMC,QAAQ,GAAG,MAAM,KAAKN,OAAL,CAAaG,GAAb,CAAiB,KAAKF,UAAtB,CAAvB;MAEA,OAAOL,YAAY,CAACU,QAAD,CAAZ,CAAuBC,IAAvB,CAA4BF,SAA5B,CAAP;IACD;EAAA;;EAEYG,MAAM,CACjBC,OADiB,EAEjBJ,SAFiB,EAGjBK,YAAqB,IAHJ,EAGQ;;MAEzB,MAAMJ,QAAQ,GAAG,MAAM,KAAKN,OAAL,CAAaG,GAAb,CAAiB,KAAKF,UAAtB,CAAvB;;MAEA,IAAI,CAACL,YAAY,CAACU,QAAD,CAAZ,CAAuBK,IAAvB,CAA4BN,SAA5B,CAAL,EAA6C;QAC3CT,YAAY,CAACU,QAAD,CAAZ,CAAuBM,IAAvB,CAA4BH,OAA5B;MACD,CAFD,MAEO,IAAIC,SAAJ,EAAe;QACpB,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,QAAQ,CAACQ,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;UACxC,IAAIR,SAAS,CAACT,YAAY,CAACU,QAAD,CAAZ,CAAuBO,CAAvB,CAAD,CAAb,EAA0C;YACxCP,QAAQ,CAACO,CAAD,CAAR,GAAcJ,OAAd;UACD;QACF;MACF;;MAED,OAAO,KAAKT,OAAL,CAAae,GAAb,CAAiB,KAAKd,UAAtB,EAAkCK,QAAlC,CAAP;IACD;EAAA;;EAEYU,MAAM,CACjBX,SADiB,EACkD;;MAEnE,MAAMC,QAAQ,GAAG,MAAM,KAAKN,OAAL,CAAaG,GAAb,CAAiB,KAAKF,UAAtB,CAAvB;MAEA,MAAMgB,gBAAgB,GAAGrB,YAAY,CAACU,QAAD,CAAZ,CAAuBY,MAAvB,CAA+BC,MAAD,IAAY,CAACd,SAAS,CAACc,MAAD,CAApD,CAAzB,EAEA;;MACA,OAAO,KAAKnB,OAAL,CAAae,GAAb,CAAiB,KAAKd,UAAtB,EAAkCgB,gBAAlC,CAAP;IACD;EAAA;;EAEYG,SAAS;;MACpB,OAAO,KAAKpB,OAAL,CAAaqB,MAAb,CAAoB,KAAKpB,UAAzB,CAAP;IACD;EAAA;;AA/DwB","names":["fixArrayType","array","StorageManager","constructor","storage","storageKey","getAll","get","getOne","predicate","entities","find","addOne","element","overwrite","some","push","i","length","set","remove","filteredEntities","filter","entity","removeAll","delete"],"sourceRoot":"","sources":["../../../src/managers/StorageManager.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}