{"ast":null,"code":"import { isCreateEvent, isJoinEvent, isMessageEvent } from '../utils/events';\nimport { MatrixMessage } from './MatrixMessage';\nexport var MatrixRoomStatus;\n\n(function (MatrixRoomStatus) {\n  MatrixRoomStatus[MatrixRoomStatus[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  MatrixRoomStatus[MatrixRoomStatus[\"JOINED\"] = 1] = \"JOINED\";\n  MatrixRoomStatus[MatrixRoomStatus[\"INVITED\"] = 2] = \"INVITED\";\n  MatrixRoomStatus[MatrixRoomStatus[\"LEFT\"] = 3] = \"LEFT\";\n})(MatrixRoomStatus || (MatrixRoomStatus = {}));\n\nexport class MatrixRoom {\n  constructor(id, status = MatrixRoomStatus.UNKNOWN, members = [], messages = []) {\n    this.id = id;\n    this.status = status;\n    this.members = members;\n    this.messages = messages;\n  }\n  /**\n   * Reconstruct rooms from a sync response\n   *\n   * @param roomSync\n   */\n\n\n  static fromSync(roomSync) {\n    function create(rooms, creator) {\n      return Object.entries(rooms).map(([id, room]) => creator(id, room));\n    }\n\n    return [...create(roomSync.join, MatrixRoom.fromJoined), ...create(roomSync.invite, MatrixRoom.fromInvited), ...create(roomSync.leave, MatrixRoom.fromLeft)];\n  }\n  /**\n   * Reconstruct a room from an ID or object\n   *\n   * @param roomOrId\n   * @param status\n   */\n\n\n  static from(roomOrId, status) {\n    return typeof roomOrId === 'string' ? new MatrixRoom(roomOrId, status || MatrixRoomStatus.UNKNOWN) : status !== undefined ? new MatrixRoom(roomOrId.id, status, roomOrId.members, roomOrId.messages) : roomOrId;\n  }\n  /**\n   * Merge new and old state and remove duplicates\n   *\n   * @param newState\n   * @param previousState\n   */\n\n\n  static merge(newState, previousState) {\n    if (!previousState || previousState.id !== newState.id) {\n      return MatrixRoom.from(newState);\n    }\n\n    return new MatrixRoom(newState.id, newState.status, [...previousState.members, ...newState.members].filter((member, index, array) => array.indexOf(member) === index), [...previousState.messages, ...newState.messages]);\n  }\n  /**\n   * Create a room from a join\n   *\n   * @param id\n   * @param joined\n   */\n\n\n  static fromJoined(id, joined) {\n    const events = [...joined.state.events, ...joined.timeline.events];\n    const members = MatrixRoom.getMembersFromEvents(events);\n    const messages = MatrixRoom.getMessagesFromEvents(events);\n    return new MatrixRoom(id, MatrixRoomStatus.JOINED, members, messages);\n  }\n  /**\n   * Create a room from an invite\n   *\n   * @param id\n   * @param invited\n   */\n\n\n  static fromInvited(id, invited) {\n    const members = MatrixRoom.getMembersFromEvents(invited.invite_state.events);\n    return new MatrixRoom(id, MatrixRoomStatus.INVITED, members);\n  }\n  /**\n   * Create a room from a leave\n   *\n   * @param id\n   * @param left\n   */\n\n\n  static fromLeft(id, left) {\n    const events = [...left.state.events, ...left.timeline.events];\n    const members = MatrixRoom.getMembersFromEvents(events);\n    const messages = MatrixRoom.getMessagesFromEvents(events);\n    return new MatrixRoom(id, MatrixRoomStatus.LEFT, members, messages);\n  }\n  /**\n   * Extract members from an event\n   *\n   * @param events\n   */\n\n\n  static getMembersFromEvents(events) {\n    return MatrixRoom.getUniqueEvents(events.filter(event => isCreateEvent(event) || isJoinEvent(event))).map(event => event.sender).filter((member, index, array) => array.indexOf(member) === index);\n  }\n  /**\n   * Extract messages from an event\n   *\n   * @param events\n   */\n\n\n  static getMessagesFromEvents(events) {\n    return MatrixRoom.getUniqueEvents(events.filter(isMessageEvent)).map(event => MatrixMessage.from(event)).filter(Boolean);\n  }\n  /**\n   * Get unique events and remove duplicates\n   *\n   * @param events\n   */\n\n\n  static getUniqueEvents(events) {\n    const eventIds = {};\n    const uniqueEvents = [];\n    events.forEach((event, index) => {\n      const eventId = event.event_id;\n\n      if (eventId === undefined || !(eventId in eventIds)) {\n        if (eventId !== undefined) {\n          eventIds[eventId] = index;\n        }\n\n        uniqueEvents.push(event);\n      }\n    });\n    return uniqueEvents;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["isCreateEvent","isJoinEvent","isMessageEvent","MatrixMessage","MatrixRoomStatus","MatrixRoom","constructor","id","status","UNKNOWN","members","messages","fromSync","roomSync","create","rooms","creator","Object","entries","map","room","join","fromJoined","invite","fromInvited","leave","fromLeft","from","roomOrId","undefined","merge","newState","previousState","filter","member","index","array","indexOf","joined","events","state","timeline","getMembersFromEvents","getMessagesFromEvents","JOINED","invited","invite_state","INVITED","left","LEFT","getUniqueEvents","event","sender","Boolean","eventIds","uniqueEvents","forEach","eventId","event_id","push"],"sourceRoot":"","sources":["../../../../src/matrix-client/models/MatrixRoom.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}