{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subject,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function retryWhen(notifier) {\n  return function (source) {\n    return source.lift(new RetryWhenOperator(notifier, source));\n  };\n}\n\nvar RetryWhenOperator = /*@__PURE__*/function () {\n  function RetryWhenOperator(notifier, source) {\n    this.notifier = notifier;\n    this.source = source;\n  }\n\n  RetryWhenOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  };\n\n  return RetryWhenOperator;\n}();\n\nvar RetryWhenSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(RetryWhenSubscriber, _super);\n\n  function RetryWhenSubscriber(destination, notifier, source) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.notifier = notifier;\n    _this.source = source;\n    return _this;\n  }\n\n  RetryWhenSubscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      var errors = this.errors;\n      var retries = this.retries;\n      var retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n\n        try {\n          var notifier = this.notifier;\n          retries = notifier(errors);\n        } catch (e) {\n          return _super.prototype.error.call(this, e);\n        }\n\n        retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n      } else {\n        this.errors = undefined;\n        this.retriesSubscription = undefined;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n      errors.next(err);\n    }\n  };\n\n  RetryWhenSubscriber.prototype._unsubscribe = function () {\n    var _a = this,\n        errors = _a.errors,\n        retriesSubscription = _a.retriesSubscription;\n\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = undefined;\n    }\n\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = undefined;\n    }\n\n    this.retries = undefined;\n  };\n\n  RetryWhenSubscriber.prototype.notifyNext = function () {\n    var _unsubscribe = this._unsubscribe;\n    this._unsubscribe = null;\n\n    this._unsubscribeAndRecycle();\n\n    this._unsubscribe = _unsubscribe;\n    this.source.subscribe(this);\n  };\n\n  return RetryWhenSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"mappings":";AAGA,OAAO,KAAEA,OAAT,MAAwB,OAAxB;AAIA,SAASC,OAAT,QAAS,YAAT;AAgBA,SAAMC,qBAAN,EAA6BC,cAA7B,EAAmFC,qBAAnF,QAAmF,mBAAnF;OACE,SAAOC,SAAP,CAAQC,QAAR,EAAkC;EACnC;IAAA;EAAA;AAED;;IACEC,iCAA4E,YACjC;WADrBA,4BAAsDC;IACtD;IACrB;EAED;;mBACe,CAACC,UAAUC,OAAI,sBAAoBF,MAApB,EAAgC;IAC7D;EACH;;EARA,OAQCD,iBARD;AAeA,CAd8E;;IActCI,6CAA2BC,MAA3B,EAA2B;EAMjEZ,uCAAYY,MAAZ;;WAAAD,oBAGEE,aAAMP,UAAYE,QACnB;IAHmB,8BAAsDK,WAAtD,KAAsD,IAAtD;;IACAC;;IAEnB;EAED;;qBACY,WAAWC;QAEnB,MAAIC,WAAa;MACjB,IAAIC,SAAO,KAAYA,MAAvB;MACA,IAAIC,sBAAJ;MAEA,IAAIC,mBAAU,2BAAd;;UACE,UAAS;QACTF,MAAI,gBAAJ;;YACU;UACR,YAAU,QAASX,QAAnB;UACDY;QAAC,SACAE;UACD;QACD;;QACDD;aACC;QACA,KAAKF,MAAL,GAAKI,SAAL;QACD;MAED;;MAEA,KAAKC,sBAAL;;MACA,KAAKL,MAAL,GAAYA,MAAZ;MACA,KAAKC,OAAL,GAAKA,OAAL;MAEA,2BAAkBC,mBAAlB;MACDF;IACF;EAGD;;qBACU,0BAAQ;IAChB,IAAIM,SAAJ;IAAA,IAAYN,kBAAZ;IAAA,IAAYE,4CAAZ;;QACEF,QAAO;MACPA,MAAK,YAAL;MACD;IACD;;QACEE,qBAAoB;MACpBA,mBAAK,YAAL;MACD;IACD;;IACD;EAED;;qBACU,wBAAsB;IAE9B,IAAIK,YAAC,GAAY,KAAQA,YAAzB;IACA,KAAKA,YAAL,GAAK,IAAL;;IACA,KAAKF,sBAAL;;IAEA,KAAKE,YAAL,GAAYA,YAAZ;IACD;EACH;;EAlEwC;CAAA","names":["tslib_1","Subject","SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","retryWhen","notifier","RetryWhenOperator","source","prototype","call","RetryWhenSubscriber","_super","destination","_this","error","isStopped","errors","retries","retriesSubscription","e","undefined","_unsubscribeAndRecycle","_a","_unsubscribe"],"sources":["../../../src/internal/operators/retryWhen.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}