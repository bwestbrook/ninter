{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.error.cause.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { BeaconMessageType, PermissionScope } from '@airgap/beacon-types';\nimport { getAccountIdentifier } from '../utils/get-account-identifier';\n/**\n * @internalapi\n *\n * The PermissionValidator is used to check if permissions for a certain message type have been given\n */\n\nexport class PermissionValidator {\n  /**\n   * Check if permissions were given for a certain message type.\n   *\n   * PermissionRequest and BroadcastRequest will always return true.\n   *\n   * @param message Beacon Message\n   */\n  static hasPermission(message, getOne, getAll) {\n    return __awaiter(this, void 0, void 0, function* () {\n      switch (message.type) {\n        case BeaconMessageType.PermissionRequest:\n        case BeaconMessageType.BroadcastRequest:\n          {\n            return true;\n          }\n\n        case BeaconMessageType.OperationRequest:\n          {\n            const accountIdentifier = yield getAccountIdentifier(message.sourceAddress, message.network);\n            const permission = yield getOne(accountIdentifier);\n\n            if (!permission) {\n              return false;\n            }\n\n            return permission.scopes.includes(PermissionScope.OPERATION_REQUEST);\n          }\n\n        case BeaconMessageType.SignPayloadRequest:\n          {\n            const permissions = yield getAll();\n            const filteredPermissions = permissions.filter(permission => permission.address === message.sourceAddress);\n\n            if (filteredPermissions.length === 0) {\n              return false;\n            }\n\n            return filteredPermissions.some(permission => permission.scopes.includes(PermissionScope.SIGN));\n          }\n\n        default:\n          throw new Error('Message not handled');\n      }\n    });\n  }\n\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAEEA,iBAFF,EAGEC,eAHF,QAKO,sBALP;AAMA,SAASC,oBAAT,QAAqC,iCAArC;AAEA;;;;;;AAKA,OAAM,MAAOC,mBAAP,CAA0B;EAC9B;;;;;;;EAOiC,OAAbC,aAAa,CAC/BC,OAD+B,EAE/BC,MAF+B,EAG/BC,MAH+B,EAGU;;MAEzC,QAAQF,OAAO,CAACG,IAAhB;QACE,KAAKR,iBAAiB,CAACS,iBAAvB;QACA,KAAKT,iBAAiB,CAACU,gBAAvB;UAAyC;YACvC,OAAO,IAAP;UACD;;QACD,KAAKV,iBAAiB,CAACW,gBAAvB;UAAyC;YACvC,MAAMC,iBAAiB,GAAW,MAAMV,oBAAoB,CAC1DG,OAAO,CAACQ,aADkD,EAE1DR,OAAO,CAACS,OAFkD,CAA5D;YAKA,MAAMC,UAAU,GAAiC,MAAMT,MAAM,CAACM,iBAAD,CAA7D;;YACA,IAAI,CAACG,UAAL,EAAiB;cACf,OAAO,KAAP;YACD;;YAED,OAAOA,UAAU,CAACC,MAAX,CAAkBC,QAAlB,CAA2BhB,eAAe,CAACiB,iBAA3C,CAAP;UACD;;QACD,KAAKlB,iBAAiB,CAACmB,kBAAvB;UAA2C;YACzC,MAAMC,WAAW,GAAuB,MAAMb,MAAM,EAApD;YACA,MAAMc,mBAAmB,GAAuBD,WAAW,CAACE,MAAZ,CAC7CP,UAAD,IAAkCA,UAAU,CAACQ,OAAX,KAAuBlB,OAAO,CAACQ,aADnB,CAAhD;;YAIA,IAAIQ,mBAAmB,CAACG,MAApB,KAA+B,CAAnC,EAAsC;cACpC,OAAO,KAAP;YACD;;YAED,OAAOH,mBAAmB,CAACI,IAApB,CAA0BV,UAAD,IAC9BA,UAAU,CAACC,MAAX,CAAkBC,QAAlB,CAA2BhB,eAAe,CAACyB,IAA3C,CADK,CAAP;UAGD;;QACD;UACE,MAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;MAjCJ;IAmCD;EAAA;;AAhD6B","names":["BeaconMessageType","PermissionScope","getAccountIdentifier","PermissionValidator","hasPermission","message","getOne","getAll","type","PermissionRequest","BroadcastRequest","OperationRequest","accountIdentifier","sourceAddress","network","permission","scopes","includes","OPERATION_REQUEST","SignPayloadRequest","permissions","filteredPermissions","filter","address","length","some","SIGN","Error"],"sourceRoot":"","sources":["../../../src/managers/PermissionValidator.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}