{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ready, crypto_generichash } from 'libsodium-wrappers';\nimport * as bs58check from 'bs58check';\n/**\n * @internalapi\n *\n * Generate a deterministic account identifier based on an address and a network\n *\n * @param address\n * @param network\n */\n\nexport const getAccountIdentifier = (address, network) => __awaiter(void 0, void 0, void 0, function* () {\n  const data = [address, network.type];\n\n  if (network.name) {\n    data.push(`name:${network.name}`);\n  }\n\n  if (network.rpcUrl) {\n    data.push(`rpc:${network.rpcUrl}`);\n  }\n\n  yield ready;\n  const buffer = Buffer.from(crypto_generichash(10, data.join('-')));\n  return bs58check.encode(buffer);\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,KAAT,EAAgBC,kBAAhB,QAA0C,oBAA1C;AACA,OAAO,KAAKC,SAAZ,MAA2B,WAA3B;AAGA;;;;;;;;;AAQA,OAAO,MAAMC,oBAAoB,GAAG,CAAOC,OAAP,EAAwBC,OAAxB,KAA6DC;EAC/F,MAAMC,IAAI,GAAa,CAACH,OAAD,EAAUC,OAAO,CAACG,IAAlB,CAAvB;;EACA,IAAIH,OAAO,CAACI,IAAZ,EAAkB;IAChBF,IAAI,CAACG,IAAL,CAAU,QAAQL,OAAO,CAACI,IAAI,EAA9B;EACD;;EACD,IAAIJ,OAAO,CAACM,MAAZ,EAAoB;IAClBJ,IAAI,CAACG,IAAL,CAAU,OAAOL,OAAO,CAACM,MAAM,EAA/B;EACD;;EAED,MAAMX,KAAN;EAEA,MAAMY,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYb,kBAAkB,CAAC,EAAD,EAAKM,IAAI,CAACQ,IAAL,CAAU,GAAV,CAAL,CAA9B,CAAf;EAEA,OAAOb,SAAS,CAACc,MAAV,CAAiBJ,MAAjB,CAAP;AACD,CAdgG,CAA1F","names":["ready","crypto_generichash","bs58check","getAccountIdentifier","address","network","__awaiter","data","type","name","push","rpcUrl","buffer","Buffer","from","join","encode"],"sourceRoot":"","sources":["../../../src/utils/get-account-identifier.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}