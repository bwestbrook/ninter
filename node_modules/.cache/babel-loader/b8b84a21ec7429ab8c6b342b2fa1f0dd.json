{"ast":null,"code":"import \"core-js/modules/es.array.at.js\";\nimport \"core-js/modules/es.string.at-alternative.js\";\nimport { BeaconWallet } from '@taquito/beacon-wallet';\nimport { TezosToolkit } from '@taquito/taquito';\nimport { bytes2Char } from '@taquito/utils';\nimport { NODE_URL, NFT_CONTRACT, NULL_STR } from '../constants';\nconst Tezos = new TezosToolkit(NODE_URL);\n\nconst getBeaconInstance = async () => {\n  const wallet = new BeaconWallet({\n    name: 'TzButton'\n  }); // Setting the wallet as the wallet provider for Taquito.\n\n  Tezos.setWalletProvider(wallet);\n  globalWallet = wallet;\n  return globalWallet;\n};\n\nexport const connect = async () => {\n  await connectToBeacon();\n  getMyAddress();\n};\nexport const connectToBeacon = async () => {\n  console.log('CONNECTING TO BEACON');\n  const wallet = await getBeaconInstance();\n  console.log(wallet);\n\n  if (await wallet.client.getActiveAccount()) {\n    //Check if we already have an account connected, so we can skip requestPermissions.\n    return wallet;\n  } // Send permission request to the connected wallet. This will either be the browser extension, or a wallet over the P2P network.\n\n\n  await wallet.requestPermissions();\n  return wallet;\n};\nexport const disconnectFromBeacon = async () => {\n  const wallet = await getBeaconInstance();\n  await wallet.clearActiveAccount();\n};\nexport const getMyAddress = async () => {\n  const wallet = await getBeaconInstance();\n  const activeAccount = await wallet.client.getActiveAccount();\n  return activeAccount?.address ?? '';\n};\nexport const getMyNfts = async () => {\n  const wallet = await getBeaconInstance();\n  const activeAccount = await wallet.client.getActiveAccount();\n  const activeAccountStr = activeAccount?.address ?? '';\n  return activeAccountStr;\n};\nexport const getIpfsLink = async () => {\n  const user_token_id = 0;\n  const contract = await Tezos.wallet.at(NFT_CONTRACT);\n  const storage = await contract.storage();\n  const all_token_metadata = await storage.token_metadata;\n  const user_token_metadata = await all_token_metadata.get(user_token_id);\n  console.log(user_token_metadata);\n  const user_token_ipfs_dict = await user_token_metadata.token_info.valueMap;\n  console.log(user_token_ipfs_dict);\n  const user_token_ipfs_as_bytes = await user_token_ipfs_dict.get(NULL_STR);\n  console.log(user_token_ipfs_as_bytes);\n  const ipfs_data = bytes2Char(user_token_ipfs_as_bytes);\n  return ipfs_data;\n};\nexport const helloWorld = async () => {\n  const hw = 'hello world';\n  return hw;\n};","map":{"version":3,"names":["BeaconWallet","TezosToolkit","bytes2Char","NODE_URL","NFT_CONTRACT","NULL_STR","Tezos","getBeaconInstance","wallet","name","setWalletProvider","globalWallet","connect","connectToBeacon","getMyAddress","console","log","client","getActiveAccount","requestPermissions","disconnectFromBeacon","clearActiveAccount","activeAccount","address","getMyNfts","activeAccountStr","getIpfsLink","user_token_id","contract","at","storage","all_token_metadata","token_metadata","user_token_metadata","get","user_token_ipfs_dict","token_info","valueMap","user_token_ipfs_as_bytes","ipfs_data","helloWorld","hw"],"sources":["/Users/benjaminwestbrook/Repositories/ninter/src/services/beacon-services.js"],"sourcesContent":["import { BeaconWallet } from '@taquito/beacon-wallet'\nimport { TezosToolkit } from '@taquito/taquito'\nimport { bytes2Char } from '@taquito/utils'\n\nimport { NODE_URL, NFT_CONTRACT, NULL_STR } from '../constants'\n\nconst Tezos = new TezosToolkit(NODE_URL);\n\n\n\nconst getBeaconInstance = async () => {\n \n  const wallet = new BeaconWallet({ name: 'TzButton' })\n  // Setting the wallet as the wallet provider for Taquito.\n  Tezos.setWalletProvider(wallet)\n  globalWallet = wallet\n  return globalWallet\n}\n\nexport const connect = async () => {\n  await connectToBeacon()\n  getMyAddress()\n}\n\nexport const connectToBeacon = async () => {\n  console.log('CONNECTING TO BEACON')\n  const wallet = await getBeaconInstance()\n  console.log(wallet)\n\n  if (await wallet.client.getActiveAccount()) {\n     //Check if we already have an account connected, so we can skip requestPermissions.\n    return wallet\n  }\n\n  // Send permission request to the connected wallet. This will either be the browser extension, or a wallet over the P2P network.\n  await wallet.requestPermissions()\n\n  return wallet\n}\n\nexport const disconnectFromBeacon = async () => {\n  const wallet = await getBeaconInstance()\n  await wallet.clearActiveAccount()\n}\n\nexport const getMyAddress = async () => {\n  const wallet = await getBeaconInstance()\n  const activeAccount = await wallet.client.getActiveAccount()\n  return activeAccount?.address ?? ''\n}\n\nexport const getMyNfts = async () => {\n\n  const wallet = await getBeaconInstance()\n  const activeAccount = await wallet.client.getActiveAccount()\n  const activeAccountStr = activeAccount?.address ?? ''\n  return activeAccountStr\n}\n\n\nexport const getIpfsLink = async() => {\n  const user_token_id = 0\n  const contract = await Tezos.wallet.at(NFT_CONTRACT)\n  const storage = await contract.storage()\n  const all_token_metadata = await storage.token_metadata\n  const user_token_metadata = await all_token_metadata.get(user_token_id)\n  console.log(user_token_metadata)\n  const user_token_ipfs_dict = await user_token_metadata.token_info.valueMap\n  console.log(user_token_ipfs_dict) \n  const user_token_ipfs_as_bytes = await user_token_ipfs_dict.get(NULL_STR)\n  console.log(user_token_ipfs_as_bytes)\n  const ipfs_data = bytes2Char(user_token_ipfs_as_bytes)\n  return ipfs_data\n}\n\nexport const helloWorld = async() => {\n  const hw = 'hello world'\n  return hw\n}\n\n\n\n"],"mappings":";;AAAA,SAASA,YAAT,QAA6B,wBAA7B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,UAAT,QAA2B,gBAA3B;AAEA,SAASC,QAAT,EAAmBC,YAAnB,EAAiCC,QAAjC,QAAiD,cAAjD;AAEA,MAAMC,KAAK,GAAG,IAAIL,YAAJ,CAAiBE,QAAjB,CAAd;;AAIA,MAAMI,iBAAiB,GAAG,YAAY;EAEpC,MAAMC,MAAM,GAAG,IAAIR,YAAJ,CAAiB;IAAES,IAAI,EAAE;EAAR,CAAjB,CAAf,CAFoC,CAGpC;;EACAH,KAAK,CAACI,iBAAN,CAAwBF,MAAxB;EACAG,YAAY,GAAGH,MAAf;EACA,OAAOG,YAAP;AACD,CAPD;;AASA,OAAO,MAAMC,OAAO,GAAG,YAAY;EACjC,MAAMC,eAAe,EAArB;EACAC,YAAY;AACb,CAHM;AAKP,OAAO,MAAMD,eAAe,GAAG,YAAY;EACzCE,OAAO,CAACC,GAAR,CAAY,sBAAZ;EACA,MAAMR,MAAM,GAAG,MAAMD,iBAAiB,EAAtC;EACAQ,OAAO,CAACC,GAAR,CAAYR,MAAZ;;EAEA,IAAI,MAAMA,MAAM,CAACS,MAAP,CAAcC,gBAAd,EAAV,EAA4C;IACzC;IACD,OAAOV,MAAP;EACD,CARwC,CAUzC;;;EACA,MAAMA,MAAM,CAACW,kBAAP,EAAN;EAEA,OAAOX,MAAP;AACD,CAdM;AAgBP,OAAO,MAAMY,oBAAoB,GAAG,YAAY;EAC9C,MAAMZ,MAAM,GAAG,MAAMD,iBAAiB,EAAtC;EACA,MAAMC,MAAM,CAACa,kBAAP,EAAN;AACD,CAHM;AAKP,OAAO,MAAMP,YAAY,GAAG,YAAY;EACtC,MAAMN,MAAM,GAAG,MAAMD,iBAAiB,EAAtC;EACA,MAAMe,aAAa,GAAG,MAAMd,MAAM,CAACS,MAAP,CAAcC,gBAAd,EAA5B;EACA,OAAOI,aAAa,EAAEC,OAAf,IAA0B,EAAjC;AACD,CAJM;AAMP,OAAO,MAAMC,SAAS,GAAG,YAAY;EAEnC,MAAMhB,MAAM,GAAG,MAAMD,iBAAiB,EAAtC;EACA,MAAMe,aAAa,GAAG,MAAMd,MAAM,CAACS,MAAP,CAAcC,gBAAd,EAA5B;EACA,MAAMO,gBAAgB,GAAGH,aAAa,EAAEC,OAAf,IAA0B,EAAnD;EACA,OAAOE,gBAAP;AACD,CANM;AASP,OAAO,MAAMC,WAAW,GAAG,YAAW;EACpC,MAAMC,aAAa,GAAG,CAAtB;EACA,MAAMC,QAAQ,GAAG,MAAMtB,KAAK,CAACE,MAAN,CAAaqB,EAAb,CAAgBzB,YAAhB,CAAvB;EACA,MAAM0B,OAAO,GAAG,MAAMF,QAAQ,CAACE,OAAT,EAAtB;EACA,MAAMC,kBAAkB,GAAG,MAAMD,OAAO,CAACE,cAAzC;EACA,MAAMC,mBAAmB,GAAG,MAAMF,kBAAkB,CAACG,GAAnB,CAAuBP,aAAvB,CAAlC;EACAZ,OAAO,CAACC,GAAR,CAAYiB,mBAAZ;EACA,MAAME,oBAAoB,GAAG,MAAMF,mBAAmB,CAACG,UAApB,CAA+BC,QAAlE;EACAtB,OAAO,CAACC,GAAR,CAAYmB,oBAAZ;EACA,MAAMG,wBAAwB,GAAG,MAAMH,oBAAoB,CAACD,GAArB,CAAyB7B,QAAzB,CAAvC;EACAU,OAAO,CAACC,GAAR,CAAYsB,wBAAZ;EACA,MAAMC,SAAS,GAAGrC,UAAU,CAACoC,wBAAD,CAA5B;EACA,OAAOC,SAAP;AACD,CAbM;AAeP,OAAO,MAAMC,UAAU,GAAG,YAAW;EACnC,MAAMC,EAAE,GAAG,aAAX;EACA,OAAOA,EAAP;AACD,CAHM"},"metadata":{},"sourceType":"module"}