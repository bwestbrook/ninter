{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscription,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nexport function bufferToggle(openings, closingSelector) {\n  return function bufferToggleOperatorFunction(source) {\n    return source.lift(new BufferToggleOperator(openings, closingSelector));\n  };\n}\n\nvar BufferToggleOperator = /*@__PURE__*/function () {\n  function BufferToggleOperator(openings, closingSelector) {\n    this.openings = openings;\n    this.closingSelector = closingSelector;\n  }\n\n  BufferToggleOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  };\n\n  return BufferToggleOperator;\n}();\n\nvar BufferToggleSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(BufferToggleSubscriber, _super);\n\n  function BufferToggleSubscriber(destination, openings, closingSelector) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.closingSelector = closingSelector;\n    _this.contexts = [];\n\n    _this.add(subscribeToResult(_this, openings));\n\n    return _this;\n  }\n\n  BufferToggleSubscriber.prototype._next = function (value) {\n    var contexts = this.contexts;\n    var len = contexts.length;\n\n    for (var i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  };\n\n  BufferToggleSubscriber.prototype._error = function (err) {\n    var contexts = this.contexts;\n\n    while (contexts.length > 0) {\n      var context_1 = contexts.shift();\n      context_1.subscription.unsubscribe();\n      context_1.buffer = null;\n      context_1.subscription = null;\n    }\n\n    this.contexts = null;\n\n    _super.prototype._error.call(this, err);\n  };\n\n  BufferToggleSubscriber.prototype._complete = function () {\n    var contexts = this.contexts;\n\n    while (contexts.length > 0) {\n      var context_2 = contexts.shift();\n      this.destination.next(context_2.buffer);\n      context_2.subscription.unsubscribe();\n      context_2.buffer = null;\n      context_2.subscription = null;\n    }\n\n    this.contexts = null;\n\n    _super.prototype._complete.call(this);\n  };\n\n  BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue) {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  };\n\n  BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {\n    this.closeBuffer(innerSub.context);\n  };\n\n  BufferToggleSubscriber.prototype.openBuffer = function (value) {\n    try {\n      var closingSelector = this.closingSelector;\n      var closingNotifier = closingSelector.call(this, value);\n\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  };\n\n  BufferToggleSubscriber.prototype.closeBuffer = function (context) {\n    var contexts = this.contexts;\n\n    if (contexts && context) {\n      var buffer = context.buffer,\n          subscription = context.subscription;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  };\n\n  BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {\n    var contexts = this.contexts;\n    var buffer = [];\n    var subscription = new Subscription();\n    var context = {\n      buffer: buffer,\n      subscription: subscription\n    };\n    contexts.push(context);\n    var innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      innerSubscription.context = context;\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  };\n\n  return BufferToggleSubscriber;\n}(OuterSubscriber);","map":{"version":3,"mappings":";AAGA,OAAO,KAAEA,OAAT,MAAuB,OAAvB;AACA,SAASC,YAAT,QAA4B,iBAA5B;AACA,SAASC,iBAAT,QAAgC,2BAAhC;AAkDA,SAAMC,eAAN,QACE,oBADF;OAIE,SAAOC,YAAP,CAAgBC,QAAhB,EAAgBC,eAAhB,EAAkE;SAChE,SAAOC,4BAAP,CAAuBC,MAAvB,EAAkD;IAClD;EACH;AAED;;IAEEC,oCAAsD,YAClC;WADAA,qBAAkCJ;IAClC;IACnB;EAED;;sBACgB,WAAUK,OAAI,sBAAuBF,MAAvB,EAAmC;IAChE;EACH;;EATA,OASCC,oBATD;AAqBA,CAnBwD;;IAmBbE,gDAAqBC,MAArB,EAAqB;EAG9DZ,0CAAYY,MAAZ;;WAAAD,uBAGEE,aAAiBR,UAElBC;IAHmB,8CAAgE,IAAhE;;IAJZQ,wBAAuCR,eAAvC;IAMNQ,KAAI,CAACC,QAAL,GAAS,EAAT;;;;IACD;EAES;;wBACS,CAAIC,UAAUC;IAC/B,IAAMF,QAAM,QAASA,QAArB;IACA,OAAK,GAAKA,QAAO,OAAjB;;SACE,QAAS,GAAGG,SAAOA,KAAK;MACzBH;IACF;EAES;;wBACS,CAAIC,UAAUG;IAC/B,YAAO,GAAQ,KAACJ,QAAhB;;WACEA,QAAM,OAAN,GAAgB,GAAQ;MACxB,aAAQ,WAAa,MAAb,EAAR;MACAK,SAAO,CAACC,YAAR,CAAsBC,WAAtB;MACAF,SAAO,CAACG,MAAR,GAAQ,IAAR;MACDH;IACD;;IACA;;IACDR;EAES;;wBACS,CAAII,UAAUQ;IAC/B,YAAO,GAAQ,KAACT,QAAhB;;WACEA,QAAM,OAAN,GAAgB,GAAQ;MACxB,IAAIU,SAAC,GAAWV,QAAO,MAAP,EAAhB;MACA,iBAAQW,IAAR,CAAoBD,SAAC,OAArB;MACAA,SAAO,CAACJ,YAAR,CAAsBC,WAAtB;MACAG,SAAO,CAACF,MAAR,GAAQ,IAAR;MACDE;IACD;;IACA;;IACDb;EAED;;wBACoB,WAAWe,aAAa,UAAOC,UAAP,EAAkBC,UAAlB,EAA8B;IACzED;EAED;;wBAC0B,WAAUE,iBAAS;IAC5C;EAEO;;wBACF;QACF;MACA,IAAMxB,eAAe,GAAG,oBAAxB;MACA,IAAIyB,eAAe,GAAEzB,iCAArB;;UACEyB,iBAAiB;QAClB;MACF;IAAC,SACAC,KAAK;MACN;IACF;EAEO;;wBACW,CAAIhB,UAAUiB;IAE/B,IAAIlB,QAAQ,QAAIA,QAAhB;;QACUA;MACR,IAAIQ,MAAC,UAAY,CAAKA,MAAtB;MAAA,IAA8BF,YAAC,uBAA/B;MACA,iBAAgBK,IAAhB,CAAgBH,MAAhB;MACAR,QAAK,OAAL,CAAYA,QAAY,CAACmB,OAAb,CAAcC,OAAd,CAAZ,EAA0B,CAA1B;MACA,YAAYd,YAAZ;MACDA;IACF;EAEO;;wBACW,CAAIL,UAAUoB;IAE/B,IAAMrB,QAAM,GAAe,KAACA,QAA5B;IACA,IAAMQ,WAAN;IACA,IAAMF,YAAY,OAAMpB,YAAN,EAAlB;IACA,WAAS,GAAK;MAAAsB,MAAQ,EAACA,MAAT;MAASF;IAAT,CAAd;IAEAN,QAAM,KAAN,CAAMoB,OAAN;IAEA,IAAIE,iBAAC,GAAiBnC,iBAAI,OAAkB6B,eAAlB,EAA0BI,OAA1B,CAA1B;;QACE,sBAAiBE,iBAAS;MAC3B;WACE;MAEDA,iBAAS,QAAT,GAA4BF,OAA5B;MACA;MACDd;IACF;EACH;;EA9F2C;CAAA","names":["tslib_1","Subscription","subscribeToResult","OuterSubscriber","bufferToggle","openings","closingSelector","bufferToggleOperatorFunction","source","BufferToggleOperator","call","BufferToggleSubscriber","_super","destination","_this","contexts","prototype","_next","i","_error","context_1","subscription","unsubscribe","buffer","_complete","context_2","next","notifyNext","outerValue","innerValue","notifyComplete","closingNotifier","err","closeBuffer","indexOf","context","trySubscribe","innerSubscription"],"sources":["../../../src/internal/operators/bufferToggle.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}