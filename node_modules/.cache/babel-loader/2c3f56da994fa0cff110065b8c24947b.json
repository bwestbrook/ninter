{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_observable_from,_util_isArray,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { from } from '../observable/from';\nimport { isArray } from '../util/isArray';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function onErrorResumeNext() {\n  var nextSources = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    nextSources[_i] = arguments[_i];\n  }\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = nextSources[0];\n  }\n\n  return function (source) {\n    return source.lift(new OnErrorResumeNextOperator(nextSources));\n  };\n}\nexport function onErrorResumeNextStatic() {\n  var nextSources = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    nextSources[_i] = arguments[_i];\n  }\n\n  var source = undefined;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = nextSources[0];\n  }\n\n  source = nextSources.shift();\n  return from(source).lift(new OnErrorResumeNextOperator(nextSources));\n}\n\nvar OnErrorResumeNextOperator = /*@__PURE__*/function () {\n  function OnErrorResumeNextOperator(nextSources) {\n    this.nextSources = nextSources;\n  }\n\n  OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  };\n\n  return OnErrorResumeNextOperator;\n}();\n\nvar OnErrorResumeNextSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(OnErrorResumeNextSubscriber, _super);\n\n  function OnErrorResumeNextSubscriber(destination, nextSources) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.destination = destination;\n    _this.nextSources = nextSources;\n    return _this;\n  }\n\n  OnErrorResumeNextSubscriber.prototype.notifyError = function () {\n    this.subscribeToNextSource();\n  };\n\n  OnErrorResumeNextSubscriber.prototype.notifyComplete = function () {\n    this.subscribeToNextSource();\n  };\n\n  OnErrorResumeNextSubscriber.prototype._error = function (err) {\n    this.subscribeToNextSource();\n    this.unsubscribe();\n  };\n\n  OnErrorResumeNextSubscriber.prototype._complete = function () {\n    this.subscribeToNextSource();\n    this.unsubscribe();\n  };\n\n  OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {\n    var next = this.nextSources.shift();\n\n    if (!!next) {\n      var innerSubscriber = new SimpleInnerSubscriber(this);\n      var destination = this.destination;\n      destination.add(innerSubscriber);\n      var innerSubscription = innerSubscribe(next, innerSubscriber);\n\n      if (innerSubscription !== innerSubscriber) {\n        destination.add(innerSubscription);\n      }\n    } else {\n      this.destination.complete();\n    }\n  };\n\n  return OnErrorResumeNextSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"mappings":";AACA,OAAO,KAAEA,OAAT,MAAqB,OAArB;AAIA,SAASC,IAAT,QAAkB,oBAAlB;AAEA,SAASC,OAAT,QAAS,iBAAT;AAmFA,SAAMC,qBAAN,EAAgBC,qBAAhB,EAAiCC,cAAjC,QAAiC,mBAAjC;OAAwC,6BAC2C;iBAAA,GAD3C;;OAAA,mCAC2CC;;EACjF;;MACEC,WAAW,OAAX,KAAsC,CAAtC,IAAoDL,OAAC;IACtDK;EAED;;EACD;IAAA;EAAA;AAaD;OAA8C,mCAEb;iBAAA,GAFa;;OAAA,mCAEbD;;EAC/B;;EAEA,IAAIE,kBAAJ;;MACED,WAAW,OAAX,KAAc,CAAd,IAAsDL,OAAC;IACxDK;EAED;;EAEAC,SAAOD,WAAa,MAAb,EAAP;EACD;AAED;;IACEE,yCAAoB,YAAwC;WAAxCA,0BAAwCF;IAC3D;EAED;;2BACgB,WAAcG,6BAA4BF,MAA5B,EAAwC;IACrE;EACH;;EAPA,OAOCC,yBAPD;AASA,CARsB;;IAQ0BE,qDAA2BC,MAA3B,EAA2B;EACzEZ,+CAAsBY,MAAtB;;WAAAD,4BAEQE,aAAYN,aACnB;IAHqB,kBAAW,KAAX,uBAA0B,IAA1B;;IACFO;;IAEnB;EAED;;6BACO,WAAwBC;IAC9B;EAED;;6BACO,WAAwBC;IAC9B;EAES;;6BACH,WAAwBC;IAC7B,KAAKC,qBAAL;IACD;EAES;;6BACH,WAAwBC;IAC7B,KAAKD,qBAAL;IACD;EAEO;;6BACY,WAAiBA,wBAAG;IACtC,IAAIE,IAAE,GAAI,KAAEb,WAAF,CAAEc,KAAF,EAAV;;QACE,QAAM;MACN,IAAMC,eAAc,GAAI,IAAClB,qBAAD,CAA6B,IAA7B,CAAxB;MACA,eAAe,GAAC,gBAAhB;MACAS,WAAM,IAAN,CAAMS,eAAN;MAIA,IAAIC,iBAAiB,iBAAK,OAAiBD,eAAjB,CAA1B;;UACEC,iBAAgB,sBAAmB;QACpCV;MACF;WACC;MACD;IACF;EACH;;EAzCgD;CAAA","names":["tslib_1","from","isArray","SimpleOuterSubscriber","SimpleInnerSubscriber","innerSubscribe","_i","nextSources","source","OnErrorResumeNextOperator","call","OnErrorResumeNextSubscriber","_super","destination","_this","notifyError","notifyComplete","_error","subscribeToNextSource","_complete","next","shift","innerSubscriber","innerSubscription"],"sources":["../../../src/internal/operators/onErrorResumeNext.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}