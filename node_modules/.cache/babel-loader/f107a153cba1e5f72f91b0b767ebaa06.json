{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.error.cause.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport * as bs58check from 'bs58check';\nimport { ready, crypto_generichash, crypto_sign_seed_keypair, from_string, randombytes_buf, crypto_secretbox_NONCEBYTES, crypto_secretbox_easy, crypto_secretbox_open_easy, crypto_sign_ed25519_pk_to_curve25519, crypto_sign_ed25519_sk_to_curve25519, crypto_box_seal, crypto_box_seal_open } from 'libsodium-wrappers';\n/* eslint-disable prefer-arrow/prefer-arrow-functions */\n\n/**\n * Convert a value to hex\n *\n * @param value\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nexport function toHex(value) {\n  return Buffer.from(value).toString('hex');\n}\n/**\n * Get the hex hash of a value\n *\n * @param key\n */\n\nexport function getHexHash(key) {\n  return __awaiter(this, void 0, void 0, function* () {\n    yield ready;\n    return toHex(crypto_generichash(32, key));\n  });\n}\n/**\n * Get a keypair from a seed\n *\n * @param seed\n */\n\nexport function getKeypairFromSeed(seed) {\n  return __awaiter(this, void 0, void 0, function* () {\n    yield ready;\n    return crypto_sign_seed_keypair(crypto_generichash(32, from_string(seed)));\n  });\n}\n/**\n * Encrypt a message with a shared key\n *\n * @param message\n * @param sharedKey\n */\n\nexport function encryptCryptoboxPayload(message, sharedKey) {\n  return __awaiter(this, void 0, void 0, function* () {\n    yield ready;\n    const nonce = Buffer.from(randombytes_buf(crypto_secretbox_NONCEBYTES));\n    const combinedPayload = Buffer.concat([nonce, Buffer.from(crypto_secretbox_easy(Buffer.from(message, 'utf8'), nonce, sharedKey))]);\n    return toHex(combinedPayload);\n  });\n}\n/**\n * Decrypt a message with a shared key\n *\n * @param payload\n * @param sharedKey\n */\n\nexport function decryptCryptoboxPayload(payload, sharedKey) {\n  return __awaiter(this, void 0, void 0, function* () {\n    yield ready;\n    const nonce = payload.slice(0, crypto_secretbox_NONCEBYTES);\n    const ciphertext = payload.slice(crypto_secretbox_NONCEBYTES);\n    return Buffer.from(crypto_secretbox_open_easy(ciphertext, nonce, sharedKey)).toString('utf8');\n  });\n}\n/**\n * Encrypt a message with a public key\n *\n * @param payload\n * @param publicKey\n */\n\nexport function sealCryptobox(payload, publicKey) {\n  return __awaiter(this, void 0, void 0, function* () {\n    yield ready;\n    const kxSelfPublicKey = crypto_sign_ed25519_pk_to_curve25519(Buffer.from(publicKey)); // Secret bytes to scalar bytes\n\n    const encryptedMessage = crypto_box_seal(payload, kxSelfPublicKey);\n    return toHex(encryptedMessage);\n  });\n}\n/**\n * Decrypt a message with public + private key\n *\n * @param encryptedPayload\n * @param publicKey\n * @param privateKey\n */\n\nexport function openCryptobox(encryptedPayload, publicKey, privateKey) {\n  return __awaiter(this, void 0, void 0, function* () {\n    yield ready;\n    const kxSelfPrivateKey = crypto_sign_ed25519_sk_to_curve25519(Buffer.from(privateKey)); // Secret bytes to scalar bytes\n\n    const kxSelfPublicKey = crypto_sign_ed25519_pk_to_curve25519(Buffer.from(publicKey)); // Secret bytes to scalar bytes\n\n    const decryptedMessage = crypto_box_seal_open(encryptedPayload, kxSelfPublicKey, kxSelfPrivateKey);\n    return Buffer.from(decryptedMessage).toString();\n  });\n}\n/**\n * Get an address from the public key\n *\n * @param publicKey\n */\n\nexport function getAddressFromPublicKey(publicKey) {\n  return __awaiter(this, void 0, void 0, function* () {\n    yield ready;\n    const prefixes = {\n      // tz1...\n      edpk: {\n        length: 54,\n        prefix: Buffer.from(new Uint8Array([6, 161, 159]))\n      },\n      // tz2...\n      sppk: {\n        length: 55,\n        prefix: Buffer.from(new Uint8Array([6, 161, 161]))\n      },\n      // tz3...\n      p2pk: {\n        length: 55,\n        prefix: Buffer.from(new Uint8Array([6, 161, 164]))\n      }\n    };\n    let prefix;\n    let plainPublicKey;\n\n    if (publicKey.length === 64) {\n      prefix = prefixes.edpk.prefix;\n      plainPublicKey = publicKey;\n    } else {\n      const entries = Object.entries(prefixes);\n\n      for (let index = 0; index < entries.length; index++) {\n        const [key, value] = entries[index];\n\n        if (publicKey.startsWith(key) && publicKey.length === value.length) {\n          prefix = value.prefix;\n          const decoded = bs58check.decode(publicKey);\n          plainPublicKey = decoded.slice(key.length, decoded.length).toString('hex');\n          break;\n        }\n      }\n    }\n\n    if (!prefix || !plainPublicKey) {\n      throw new Error(`invalid publicKey: ${publicKey}`);\n    }\n\n    const payload = crypto_generichash(20, Buffer.from(plainPublicKey, 'hex'));\n    return bs58check.encode(Buffer.concat([prefix, Buffer.from(payload)]));\n  });\n}\n/**\n * Get the recipient string used in the matrix message\n *\n * @param recipientHash\n * @param relayServer\n */\n\nexport function recipientString(recipientHash, relayServer) {\n  return `@${recipientHash}:${relayServer}`;\n}\n/* eslint-enable prefer-arrow/prefer-arrow-functions */","map":{"version":3,"mappings":"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","names":["bs58check","ready","crypto_generichash","crypto_sign_seed_keypair","from_string","randombytes_buf","crypto_secretbox_NONCEBYTES","crypto_secretbox_easy","crypto_secretbox_open_easy","crypto_sign_ed25519_pk_to_curve25519","crypto_sign_ed25519_sk_to_curve25519","crypto_box_seal","crypto_box_seal_open","toHex","value","Buffer","from","toString","getHexHash","key","getKeypairFromSeed","seed","encryptCryptoboxPayload","message","sharedKey","nonce","combinedPayload","concat","decryptCryptoboxPayload","payload","slice","ciphertext","sealCryptobox","publicKey","kxSelfPublicKey","encryptedMessage","openCryptobox","encryptedPayload","privateKey","kxSelfPrivateKey","decryptedMessage","getAddressFromPublicKey","prefixes","edpk","length","prefix","Uint8Array","sppk","p2pk","plainPublicKey","entries","Object","index","startsWith","decoded","decode","Error","encode","recipientString","recipientHash","relayServer"],"sourceRoot":"","sources":["../../../src/utils/crypto.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}