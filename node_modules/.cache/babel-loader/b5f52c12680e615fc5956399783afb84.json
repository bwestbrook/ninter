{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { TransportStatus, StorageKey } from '@airgap/beacon-types';\nimport { Logger } from '@airgap/beacon-core';\nimport { PostMessageTransport } from '@airgap/beacon-transport-postmessage';\nconst logger = new Logger('DappPostMessageTransport');\n/**\n * @internalapi\n *\n *\n */\n\nexport class DappPostMessageTransport extends PostMessageTransport {\n  constructor(name, keyPair, storage) {\n    super(name, keyPair, storage, StorageKey.TRANSPORT_POSTMESSAGE_PEERS_DAPP);\n  }\n\n  startOpenChannelListener() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.client.listenForChannelOpening(peer => __awaiter(this, void 0, void 0, function* () {\n        logger.log('connect', `received PostMessagePairingResponse`, peer);\n        yield this.addPeer(peer);\n        this._isConnected = TransportStatus.CONNECTED;\n\n        if (this.newPeerListener) {\n          this.newPeerListener(peer);\n          this.newPeerListener = undefined; // TODO: Remove this once we use the id\n        }\n      }));\n    });\n  }\n\n  listenForNewPeer(newPeerListener) {\n    return __awaiter(this, void 0, void 0, function* () {\n      logger.log('listenForNewPeer');\n      this.newPeerListener = newPeerListener;\n    });\n  }\n\n  stopListeningForNewPeers() {\n    return __awaiter(this, void 0, void 0, function* () {\n      logger.log('stopListeningForNewPeers');\n      this.newPeerListener = undefined;\n    });\n  }\n\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SACEA,eADF,EAEEC,UAFF,QAKO,sBALP;AAMA,SAASC,MAAT,QAAuB,qBAAvB;AACA,SAASC,oBAAT,QAAqC,sCAArC;AAEA,MAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAW,0BAAX,CAAf;AAEA;;;;;;AAKA,OAAM,MAAOG,wBAAP,SAAwCF,oBAAxC,CAGL;EACCG,YAAYC,IAAZ,EAA0BC,OAA1B,EAA4CC,OAA5C,EAA4D;IAC1D,MAAMF,IAAN,EAAYC,OAAZ,EAAqBC,OAArB,EAA8BR,UAAU,CAACS,gCAAzC;EACD;;EAEYC,wBAAwB;;MACnC,OAAO,KAAKC,MAAL,CAAYC,uBAAZ,CAA2CC,IAAP,IAAmDC;QAC5FX,MAAM,CAACY,GAAP,CAAW,SAAX,EAAsB,qCAAtB,EAA6DF,IAA7D;QAEA,MAAM,KAAKG,OAAL,CAAaH,IAAb,CAAN;QAEA,KAAKI,YAAL,GAAoBlB,eAAe,CAACmB,SAApC;;QAEA,IAAI,KAAKC,eAAT,EAA0B;UACxB,KAAKA,eAAL,CAAqBN,IAArB;UACA,KAAKM,eAAL,GAAuBC,SAAvB,CAFwB,CAES;QAClC;MACF,CAX6F,CAAvF,CAAP;IAYD;EAAA;;EAEYC,gBAAgB,CAC3BF,eAD2B,EACwC;;MAEnEhB,MAAM,CAACY,GAAP,CAAW,kBAAX;MACA,KAAKI,eAAL,GAAuBA,eAAvB;IACD;EAAA;;EAEYG,wBAAwB;;MACnCnB,MAAM,CAACY,GAAP,CAAW,0BAAX;MACA,KAAKI,eAAL,GAAuBC,SAAvB;IACD;EAAA;;AA9BF","names":["TransportStatus","StorageKey","Logger","PostMessageTransport","logger","DappPostMessageTransport","constructor","name","keyPair","storage","TRANSPORT_POSTMESSAGE_PEERS_DAPP","startOpenChannelListener","client","listenForChannelOpening","peer","__awaiter","log","addPeer","_isConnected","CONNECTED","newPeerListener","undefined","listenForNewPeer","stopListeningForNewPeers"],"sourceRoot":"","sources":["../../../src/transports/DappPostMessageTransport.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}