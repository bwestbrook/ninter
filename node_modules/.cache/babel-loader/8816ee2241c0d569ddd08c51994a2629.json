{"ast":null,"code":"import \"core-js/modules/es.array.at.js\";\nimport \"core-js/modules/es.string.at-alternative.js\";\nimport { BeaconWallet } from '@taquito/beacon-wallet';\nimport { TezosToolkit } from '@taquito/taquito';\nimport { bytes2Char } from '@taquito/utils';\nimport { NODE_URL, NFT_CONTRACT, NULL_STR } from '../constants';\nconst Tezos = new TezosToolkit(NODE_URL);\nconst wallet_options = {\n  name: 'TXLWallet'\n}; //let globalWallet: BeaconWallet | undefined\n\nlet globalWallet = undefined;\n\nconst getBeaconInstance = async () => {\n  if (!globalWallet) {\n    // Create a new BeaconWallet instance. The options will be passed to the DAppClient constructor.\n    const wallet = new BeaconWallet({\n      name: \"txl\"\n    }); // Setting the wallet as the wallet provider for Taquito.\n\n    Tezos.setWalletProvider(wallet);\n    globalWallet = wallet;\n  }\n\n  return globalWallet;\n};\n\nexport const connectToBeacon = async () => {\n  console.log('CONNECTING TO BEACON NOW');\n  const wallet = await getBeaconInstance();\n\n  if (await wallet.client.getActiveAccount()) {\n    // Check if we already have an account connected, so we can skip requestPermissions.\n    return wallet;\n  } // Send permission request to the connected wallet. This will either be the browser extension, or a wallet over the P2P network.\n\n\n  await wallet.requestPermissions();\n  return wallet;\n};\nexport const disconnectFromBeacon = async () => {\n  const wallet = await getBeaconInstance();\n  await wallet.clearActiveAccount();\n};\nexport const getMyAddress = async () => {\n  const wallet = await getBeaconInstance();\n  const activeAccount = await wallet.client.getActiveAccount();\n  return activeAccount?.address ?? '';\n};\nexport const getMyNfts = async () => {\n  const wallet = await getBeaconInstance();\n  const activeAccount = await wallet.client.getActiveAccount();\n  const activeAccountStr = activeAccount?.address ?? '';\n  return activeAccountStr;\n};\nexport const getIpfsLink = async () => {\n  const user_token_id = 0;\n  const contract = await Tezos.wallet.at(NFT_CONTRACT);\n  const storage = await contract.storage();\n  const all_token_metadata = await storage.token_metadata;\n  const user_token_metadata = await all_token_metadata.get(user_token_id);\n  console.log(user_token_metadata);\n  const user_token_ipfs_dict = await user_token_metadata.token_info.valueMap;\n  console.log(user_token_ipfs_dict);\n  const user_token_ipfs_as_bytes = await user_token_ipfs_dict.get(NULL_STR);\n  console.log(user_token_ipfs_as_bytes);\n  const ipfs_data = bytes2Char(user_token_ipfs_as_bytes);\n  return ipfs_data;\n};\nexport const helloWorld = async () => {\n  const hw = 'hello world';\n  return hw;\n};","map":{"version":3,"names":["BeaconWallet","TezosToolkit","bytes2Char","NODE_URL","NFT_CONTRACT","NULL_STR","Tezos","wallet_options","name","globalWallet","undefined","getBeaconInstance","wallet","setWalletProvider","connectToBeacon","console","log","client","getActiveAccount","requestPermissions","disconnectFromBeacon","clearActiveAccount","getMyAddress","activeAccount","address","getMyNfts","activeAccountStr","getIpfsLink","user_token_id","contract","at","storage","all_token_metadata","token_metadata","user_token_metadata","get","user_token_ipfs_dict","token_info","valueMap","user_token_ipfs_as_bytes","ipfs_data","helloWorld","hw"],"sources":["/Users/benjaminwestbrook/Repositories/ninter/src/services/beacon-services.js"],"sourcesContent":["import { BeaconWallet } from '@taquito/beacon-wallet'\nimport { TezosToolkit } from '@taquito/taquito'\nimport { bytes2Char } from '@taquito/utils'\nimport { NODE_URL, NFT_CONTRACT, NULL_STR } from '../constants'\n\nconst Tezos = new TezosToolkit(NODE_URL);\n\nconst wallet_options = {\n  name: 'TXLWallet',\n};\n\n//let globalWallet: BeaconWallet | undefined\n\nlet globalWallet = undefined\n\nconst getBeaconInstance = async () => {\n  if (!globalWallet) {\n    // Create a new BeaconWallet instance. The options will be passed to the DAppClient constructor.\n    const wallet = new BeaconWallet({name: \"txl\"})\n\n    // Setting the wallet as the wallet provider for Taquito.\n    Tezos.setWalletProvider(wallet)\n    globalWallet = wallet\n  }\n  return globalWallet\n}\n\nexport const connectToBeacon = async () => {\n  console.log('CONNECTING TO BEACON NOW')\n  const wallet = await getBeaconInstance()\n\n  if (await wallet.client.getActiveAccount()) {\n    // Check if we already have an account connected, so we can skip requestPermissions.\n    return wallet\n  }\n\n  // Send permission request to the connected wallet. This will either be the browser extension, or a wallet over the P2P network.\n  await wallet.requestPermissions()\n\n  return wallet\n}\n\nexport const disconnectFromBeacon = async () => {\n  const wallet = await getBeaconInstance()\n  await wallet.clearActiveAccount()\n}\n\nexport const getMyAddress = async () => {\n  const wallet = await getBeaconInstance()\n  const activeAccount = await wallet.client.getActiveAccount()\n  return activeAccount?.address ?? ''\n}\n\nexport const getMyNfts = async () => {\n  const wallet = await getBeaconInstance()\n  const activeAccount = await wallet.client.getActiveAccount()\n  const activeAccountStr = activeAccount?.address ?? ''\n  return activeAccountStr\n}\n\n\nexport const getIpfsLink = async() => {\n  const user_token_id = 0\n  const contract = await Tezos.wallet.at(NFT_CONTRACT)\n  const storage = await contract.storage()\n  const all_token_metadata = await storage.token_metadata\n  const user_token_metadata = await all_token_metadata.get(user_token_id)\n  console.log(user_token_metadata)\n  const user_token_ipfs_dict = await user_token_metadata.token_info.valueMap\n  console.log(user_token_ipfs_dict) \n  const user_token_ipfs_as_bytes = await user_token_ipfs_dict.get(NULL_STR)\n  console.log(user_token_ipfs_as_bytes)\n  const ipfs_data = bytes2Char(user_token_ipfs_as_bytes)\n  return ipfs_data\n}\n\nexport const helloWorld = async() => {\n  const hw = 'hello world'\n  return hw\n}\n\n\n\n"],"mappings":";;AAAA,SAASA,YAAT,QAA6B,wBAA7B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAASC,QAAT,EAAmBC,YAAnB,EAAiCC,QAAjC,QAAiD,cAAjD;AAEA,MAAMC,KAAK,GAAG,IAAIL,YAAJ,CAAiBE,QAAjB,CAAd;AAEA,MAAMI,cAAc,GAAG;EACrBC,IAAI,EAAE;AADe,CAAvB,C,CAIA;;AAEA,IAAIC,YAAY,GAAGC,SAAnB;;AAEA,MAAMC,iBAAiB,GAAG,YAAY;EACpC,IAAI,CAACF,YAAL,EAAmB;IACjB;IACA,MAAMG,MAAM,GAAG,IAAIZ,YAAJ,CAAiB;MAACQ,IAAI,EAAE;IAAP,CAAjB,CAAf,CAFiB,CAIjB;;IACAF,KAAK,CAACO,iBAAN,CAAwBD,MAAxB;IACAH,YAAY,GAAGG,MAAf;EACD;;EACD,OAAOH,YAAP;AACD,CAVD;;AAYA,OAAO,MAAMK,eAAe,GAAG,YAAY;EACzCC,OAAO,CAACC,GAAR,CAAY,0BAAZ;EACA,MAAMJ,MAAM,GAAG,MAAMD,iBAAiB,EAAtC;;EAEA,IAAI,MAAMC,MAAM,CAACK,MAAP,CAAcC,gBAAd,EAAV,EAA4C;IAC1C;IACA,OAAON,MAAP;EACD,CAPwC,CASzC;;;EACA,MAAMA,MAAM,CAACO,kBAAP,EAAN;EAEA,OAAOP,MAAP;AACD,CAbM;AAeP,OAAO,MAAMQ,oBAAoB,GAAG,YAAY;EAC9C,MAAMR,MAAM,GAAG,MAAMD,iBAAiB,EAAtC;EACA,MAAMC,MAAM,CAACS,kBAAP,EAAN;AACD,CAHM;AAKP,OAAO,MAAMC,YAAY,GAAG,YAAY;EACtC,MAAMV,MAAM,GAAG,MAAMD,iBAAiB,EAAtC;EACA,MAAMY,aAAa,GAAG,MAAMX,MAAM,CAACK,MAAP,CAAcC,gBAAd,EAA5B;EACA,OAAOK,aAAa,EAAEC,OAAf,IAA0B,EAAjC;AACD,CAJM;AAMP,OAAO,MAAMC,SAAS,GAAG,YAAY;EACnC,MAAMb,MAAM,GAAG,MAAMD,iBAAiB,EAAtC;EACA,MAAMY,aAAa,GAAG,MAAMX,MAAM,CAACK,MAAP,CAAcC,gBAAd,EAA5B;EACA,MAAMQ,gBAAgB,GAAGH,aAAa,EAAEC,OAAf,IAA0B,EAAnD;EACA,OAAOE,gBAAP;AACD,CALM;AAQP,OAAO,MAAMC,WAAW,GAAG,YAAW;EACpC,MAAMC,aAAa,GAAG,CAAtB;EACA,MAAMC,QAAQ,GAAG,MAAMvB,KAAK,CAACM,MAAN,CAAakB,EAAb,CAAgB1B,YAAhB,CAAvB;EACA,MAAM2B,OAAO,GAAG,MAAMF,QAAQ,CAACE,OAAT,EAAtB;EACA,MAAMC,kBAAkB,GAAG,MAAMD,OAAO,CAACE,cAAzC;EACA,MAAMC,mBAAmB,GAAG,MAAMF,kBAAkB,CAACG,GAAnB,CAAuBP,aAAvB,CAAlC;EACAb,OAAO,CAACC,GAAR,CAAYkB,mBAAZ;EACA,MAAME,oBAAoB,GAAG,MAAMF,mBAAmB,CAACG,UAApB,CAA+BC,QAAlE;EACAvB,OAAO,CAACC,GAAR,CAAYoB,oBAAZ;EACA,MAAMG,wBAAwB,GAAG,MAAMH,oBAAoB,CAACD,GAArB,CAAyB9B,QAAzB,CAAvC;EACAU,OAAO,CAACC,GAAR,CAAYuB,wBAAZ;EACA,MAAMC,SAAS,GAAGtC,UAAU,CAACqC,wBAAD,CAA5B;EACA,OAAOC,SAAP;AACD,CAbM;AAeP,OAAO,MAAMC,UAAU,GAAG,YAAW;EACnC,MAAMC,EAAE,GAAG,aAAX;EACA,OAAOA,EAAP;AACD,CAHM"},"metadata":{},"sourceType":"module"}