{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { MatrixRoomStatus } from '../models/MatrixRoom';\n/**\n * A service to help with matrix room management\n */\n\nexport class MatrixRoomService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  /**\n   * Create a room\n   *\n   * @param accessToken\n   * @param config\n   */\n\n\n  createRoom(accessToken, config = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.httpClient.post('/createRoom', config, {\n        accessToken\n      });\n    });\n  }\n  /**\n   * Invite a user to a room\n   *\n   * @param accessToken\n   * @param user\n   * @param room\n   */\n\n\n  inviteToRoom(accessToken, user, room) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (room.status !== MatrixRoomStatus.JOINED && room.status !== MatrixRoomStatus.UNKNOWN) {\n        return Promise.reject(`User is not a member of room ${room.id}.`);\n      }\n\n      return this.httpClient.post(`/rooms/${encodeURIComponent(room.id)}/invite`, {\n        user_id: user\n      }, {\n        accessToken\n      });\n    });\n  }\n  /**\n   * Join a specific room\n   *\n   * @param accessToken\n   * @param room\n   */\n\n\n  joinRoom(accessToken, room) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (room.status === MatrixRoomStatus.JOINED) {\n        return Promise.resolve({\n          room_id: room.id\n        });\n      }\n\n      return this.httpClient.post(`/rooms/${encodeURIComponent(room.id)}/join`, {}, {\n        accessToken\n      });\n    });\n  }\n  /**\n   * Get all joined rooms\n   *\n   * @param accessToken\n   */\n\n\n  getJoinedRooms(accessToken) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.httpClient.get(`/joined_rooms`, undefined, {\n        accessToken\n      });\n    });\n  }\n\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAAqBA,gBAArB,QAA6C,sBAA7C;AAMA;;;;AAGA,OAAM,MAAOC,iBAAP,CAAwB;EAC5BC,YAA6BC,UAA7B,EAAyD;IAA5B;EAAgC;EAE7D;;;;;;;;EAMaC,UAAU,CACrBC,WADqB,EAErBC,SAAkC,EAFb,EAEe;;MAEpC,OAAO,KAAKH,UAAL,CAAgBI,IAAhB,CAAqB,aAArB,EAAoCD,MAApC,EAA4C;QAAED;MAAF,CAA5C,CAAP;IACD;EAAA;EAED;;;;;;;;;EAOaG,YAAY,CACvBH,WADuB,EAEvBI,IAFuB,EAGvBC,IAHuB,EAGP;;MAEhB,IAAIA,IAAI,CAACC,MAAL,KAAgBX,gBAAgB,CAACY,MAAjC,IAA2CF,IAAI,CAACC,MAAL,KAAgBX,gBAAgB,CAACa,OAAhF,EAAyF;QACvF,OAAOC,OAAO,CAACC,MAAR,CAAe,gCAAgCL,IAAI,CAACM,EAAE,GAAtD,CAAP;MACD;;MAED,OAAO,KAAKb,UAAL,CAAgBI,IAAhB,CACL,UAAUU,kBAAkB,CAACP,IAAI,CAACM,EAAN,CAAS,SADhC,EAEL;QAAEE,OAAO,EAAET;MAAX,CAFK,EAGL;QAAEJ;MAAF,CAHK,CAAP;IAKD;EAAA;EAED;;;;;;;;EAMac,QAAQ,CAACd,WAAD,EAAsBK,IAAtB,EAAsC;;MACzD,IAAIA,IAAI,CAACC,MAAL,KAAgBX,gBAAgB,CAACY,MAArC,EAA6C;QAC3C,OAAOE,OAAO,CAACM,OAAR,CAAgB;UAAEC,OAAO,EAAEX,IAAI,CAACM;QAAhB,CAAhB,CAAP;MACD;;MAED,OAAO,KAAKb,UAAL,CAAgBI,IAAhB,CAAqB,UAAUU,kBAAkB,CAACP,IAAI,CAACM,EAAN,CAAS,OAA1D,EAAmE,EAAnE,EAAuE;QAAEX;MAAF,CAAvE,CAAP;IACD;EAAA;EAED;;;;;;;EAKaiB,cAAc,CAACjB,WAAD,EAAoB;;MAC7C,OAAO,KAAKF,UAAL,CAAgBoB,GAAhB,CAAoB,eAApB,EAAqCC,SAArC,EAAgD;QAAEnB;MAAF,CAAhD,CAAP;IACD;EAAA;;AA5D2B","names":["MatrixRoomStatus","MatrixRoomService","constructor","httpClient","createRoom","accessToken","config","post","inviteToRoom","user","room","status","JOINED","UNKNOWN","Promise","reject","id","encodeURIComponent","user_id","joinRoom","resolve","room_id","getJoinedRooms","get","undefined"],"sourceRoot":"","sources":["../../../../src/matrix-client/services/MatrixRoomService.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}