{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { crypto_secretbox_NONCEBYTES, crypto_secretbox_MACBYTES } from 'libsodium-wrappers';\nimport { windowRef, Serializer, getSenderId, MessageBasedClient } from '@airgap/beacon-core';\nimport { openCryptobox } from '@airgap/beacon-utils';\nimport { ExtensionMessageTarget, Origin } from '@airgap/beacon-types';\n/**\n * @internalapi\n *\n *\n */\n\nexport class PostMessageClient extends MessageBasedClient {\n  constructor() {\n    super(...arguments);\n    this.activeListeners = new Map();\n  }\n\n  init() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.subscribeToMessages().catch(console.error);\n    });\n  }\n\n  listenForEncryptedMessage(senderPublicKey, messageCallback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.activeListeners.has(senderPublicKey)) {\n        return;\n      }\n\n      const callbackFunction = (message, context) => __awaiter(this, void 0, void 0, function* () {\n        try {\n          const decryptedMessage = yield this.decryptMessage(senderPublicKey, message.encryptedPayload); // console.log('calculated sender ID', await getSenderId(senderPublicKey))\n          // TODO: Add check for correct decryption key / sender ID\n\n          messageCallback(decryptedMessage, context);\n        } catch (decryptionError) {\n          /* NO-OP. We try to decode every message, but some might not be addressed to us. */\n        }\n      });\n\n      this.activeListeners.set(senderPublicKey, callbackFunction);\n    });\n  }\n\n  sendMessage(message, peer) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const payload = yield this.encryptMessage(peer.publicKey, message);\n      const targetId = (_a = peer) === null || _a === void 0 ? void 0 : _a.extensionId; // if no targetId, we remove peer\n\n      const msg = {\n        target: ExtensionMessageTarget.EXTENSION,\n        encryptedPayload: payload,\n        targetId\n      }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      windowRef.postMessage(msg, windowRef.location.origin);\n    });\n  }\n\n  listenForChannelOpening(messageCallback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const fn = event => __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n\n        if (event.source !== windowRef || event.origin !== windowRef.location.origin) {\n          // TODO: Add to error handler: console.debug('[Beacon]: Event received from untrusted origin')\n          return;\n        }\n\n        const data = (_a = event === null || event === void 0 ? void 0 : event.data) === null || _a === void 0 ? void 0 : _a.message;\n\n        if (data && data.target === ExtensionMessageTarget.PAGE && (yield this.isChannelOpenMessage(data))) {\n          const payload = Buffer.from(data.payload, 'hex');\n\n          if (payload.length >= crypto_secretbox_NONCEBYTES + crypto_secretbox_MACBYTES) {\n            try {\n              const pairingResponse = JSON.parse(yield openCryptobox(payload, this.keyPair.publicKey, this.keyPair.privateKey));\n              messageCallback(Object.assign(Object.assign({}, pairingResponse), {\n                senderId: yield getSenderId(pairingResponse.publicKey),\n                extensionId: (_b = event === null || event === void 0 ? void 0 : event.data) === null || _b === void 0 ? void 0 : _b.sender.id\n              }));\n            } catch (decryptionError) {\n              /* NO-OP. We try to decode every message, but some might not be addressed to us. */\n            }\n          }\n        }\n      });\n\n      windowRef.addEventListener('message', fn);\n    });\n  }\n\n  sendPairingRequest(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const message = {\n        target: ExtensionMessageTarget.EXTENSION,\n        payload: yield new Serializer().serialize(yield this.getPairingRequestInfo()),\n        targetId: id\n      }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      windowRef.postMessage(message, windowRef.location.origin);\n    });\n  }\n\n  isChannelOpenMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return typeof message === 'object' && message.hasOwnProperty('payload');\n    });\n  }\n\n  subscribeToMessages() {\n    return __awaiter(this, void 0, void 0, function* () {\n      windowRef.addEventListener('message', message => {\n        if (message.source !== windowRef || message.origin !== windowRef.location.origin) {\n          // TODO: Add to error handler: console.debug('[Beacon]: Event received from untrusted origin')\n          return;\n        }\n\n        if (typeof message === 'object' && message) {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          const data = message.data;\n\n          if (data.message && data.message.target === ExtensionMessageTarget.PAGE) {\n            this.activeListeners.forEach(listener => {\n              listener(data.message, {\n                origin: Origin.EXTENSION,\n                id: data.sender.id || ''\n              });\n            });\n          }\n        }\n      });\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["crypto_secretbox_NONCEBYTES","crypto_secretbox_MACBYTES","windowRef","Serializer","getSenderId","MessageBasedClient","openCryptobox","ExtensionMessageTarget","Origin","PostMessageClient","constructor","Map","init","subscribeToMessages","catch","console","error","listenForEncryptedMessage","senderPublicKey","messageCallback","activeListeners","has","callbackFunction","message","context","__awaiter","decryptedMessage","decryptMessage","encryptedPayload","decryptionError","set","sendMessage","peer","payload","encryptMessage","publicKey","targetId","_a","extensionId","msg","target","EXTENSION","postMessage","location","origin","listenForChannelOpening","fn","event","source","data","PAGE","isChannelOpenMessage","Buffer","from","length","pairingResponse","JSON","parse","keyPair","privateKey","senderId","_b","sender","id","addEventListener","sendPairingRequest","serialize","getPairingRequestInfo","hasOwnProperty","forEach","listener"],"sourceRoot":"","sources":["../../src/PostMessageClient.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}