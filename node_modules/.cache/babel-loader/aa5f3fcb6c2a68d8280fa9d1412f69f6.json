{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { StorageKey } from '@airgap/beacon-types';\nimport { StorageManager } from './StorageManager';\nimport { PermissionValidator } from './PermissionValidator';\n/**\n * @internalapi\n *\n * The AccountManager provides CRUD functionality for account entities and persists them to the provided storage.\n */\n\nexport class AccountManager {\n  constructor(storage) {\n    this.storageManager = new StorageManager(storage, StorageKey.ACCOUNTS);\n  }\n\n  getAccounts() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.getAll();\n    });\n  }\n\n  getAccount(accountIdentifier) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.getOne(account => account.accountIdentifier === accountIdentifier);\n    });\n  }\n\n  addAccount(accountInfo) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.addOne(accountInfo, account => account.accountIdentifier === accountInfo.accountIdentifier);\n    });\n  }\n\n  removeAccount(accountIdentifier) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.remove(account => account.accountIdentifier === accountIdentifier);\n    });\n  }\n\n  removeAccounts(accountIdentifiers) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.remove(account => accountIdentifiers.includes(account.accountIdentifier));\n    });\n  }\n\n  removeAllAccounts() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.removeAll();\n    });\n  }\n\n  hasPermission(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return PermissionValidator.hasPermission(message, this.getAccount.bind(this), this.getAccounts.bind(this));\n    });\n  }\n\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAkBA,UAAlB,QAAgE,sBAAhE;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,mBAAT,QAAoC,uBAApC;AAEA;;;;;;AAKA,OAAM,MAAOC,cAAP,CAAqB;EAGzBC,YAAYC,OAAZ,EAA4B;IAC1B,KAAKC,cAAL,GAAsB,IAAIL,cAAJ,CAAmBI,OAAnB,EAA4BL,UAAU,CAACO,QAAvC,CAAtB;EACD;;EAEYC,WAAW;;MACtB,OAAO,KAAKF,cAAL,CAAoBG,MAApB,EAAP;IACD;EAAA;;EAEYC,UAAU,CAACC,iBAAD,EAA0B;;MAC/C,OAAO,KAAKL,cAAL,CAAoBM,MAApB,CAA4BC,OAAD,IAAaA,OAAO,CAACF,iBAAR,KAA8BA,iBAAtE,CAAP;IACD;EAAA;;EAEYG,UAAU,CAACC,WAAD,EAAyB;;MAC9C,OAAO,KAAKT,cAAL,CAAoBU,MAApB,CACLD,WADK,EAEJF,OAAD,IAAaA,OAAO,CAACF,iBAAR,KAA8BI,WAAW,CAACJ,iBAFlD,CAAP;IAID;EAAA;;EAEYM,aAAa,CAACN,iBAAD,EAA0B;;MAClD,OAAO,KAAKL,cAAL,CAAoBY,MAApB,CAA4BL,OAAD,IAAaA,OAAO,CAACF,iBAAR,KAA8BA,iBAAtE,CAAP;IACD;EAAA;;EAEYQ,cAAc,CAACC,kBAAD,EAA6B;;MACtD,OAAO,KAAKd,cAAL,CAAoBY,MAApB,CAA4BL,OAAD,IAChCO,kBAAkB,CAACC,QAAnB,CAA4BR,OAAO,CAACF,iBAApC,CADK,CAAP;IAGD;EAAA;;EAEYW,iBAAiB;;MAC5B,OAAO,KAAKhB,cAAL,CAAoBiB,SAApB,EAAP;IACD;EAAA;;EAEYC,aAAa,CAACC,OAAD,EAAuB;;MAC/C,OAAOvB,mBAAmB,CAACsB,aAApB,CACLC,OADK,EAEL,KAAKf,UAAL,CAAgBgB,IAAhB,CAAqB,IAArB,CAFK,EAGL,KAAKlB,WAAL,CAAiBkB,IAAjB,CAAsB,IAAtB,CAHK,CAAP;IAKD;EAAA;;AA1CwB","names":["StorageKey","StorageManager","PermissionValidator","AccountManager","constructor","storage","storageManager","ACCOUNTS","getAccounts","getAll","getAccount","accountIdentifier","getOne","account","addAccount","accountInfo","addOne","removeAccount","remove","removeAccounts","accountIdentifiers","includes","removeAllAccounts","removeAll","hasPermission","message","bind"],"sourceRoot":"","sources":["../../../src/managers/AccountManager.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}