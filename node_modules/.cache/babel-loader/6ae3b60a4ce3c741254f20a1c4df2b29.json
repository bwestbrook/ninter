{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isScheduler,_util_isArray PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { map } from '../operators/map';\nimport { canReportError } from '../util/canReportError';\nimport { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\nexport function bindNodeCallback(callbackFunc, resultSelector, scheduler) {\n  if (resultSelector) {\n    if (isScheduler(resultSelector)) {\n      scheduler = resultSelector;\n    } else {\n      return function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        return bindNodeCallback(callbackFunc, scheduler).apply(void 0, args).pipe(map(function (args) {\n          return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args);\n        }));\n      };\n    }\n  }\n\n  return function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var params = {\n      subject: undefined,\n      args: args,\n      callbackFunc: callbackFunc,\n      scheduler: scheduler,\n      context: this\n    };\n    return new Observable(function (subscriber) {\n      var context = params.context;\n      var subject = params.subject;\n\n      if (!scheduler) {\n        if (!subject) {\n          subject = params.subject = new AsyncSubject();\n\n          var handler = function () {\n            var innerArgs = [];\n\n            for (var _i = 0; _i < arguments.length; _i++) {\n              innerArgs[_i] = arguments[_i];\n            }\n\n            var err = innerArgs.shift();\n\n            if (err) {\n              subject.error(err);\n              return;\n            }\n\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          };\n\n          try {\n            callbackFunc.apply(context, args.concat([handler]));\n          } catch (err) {\n            if (canReportError(subject)) {\n              subject.error(err);\n            } else {\n              console.warn(err);\n            }\n          }\n        }\n\n        return subject.subscribe(subscriber);\n      } else {\n        return scheduler.schedule(dispatch, 0, {\n          params: params,\n          subscriber: subscriber,\n          context: context\n        });\n      }\n    });\n  };\n}\n\nfunction dispatch(state) {\n  var _this = this;\n\n  var params = state.params,\n      subscriber = state.subscriber,\n      context = state.context;\n  var callbackFunc = params.callbackFunc,\n      args = params.args,\n      scheduler = params.scheduler;\n  var subject = params.subject;\n\n  if (!subject) {\n    subject = params.subject = new AsyncSubject();\n\n    var handler = function () {\n      var innerArgs = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        innerArgs[_i] = arguments[_i];\n      }\n\n      var err = innerArgs.shift();\n\n      if (err) {\n        _this.add(scheduler.schedule(dispatchError, 0, {\n          err: err,\n          subject: subject\n        }));\n      } else {\n        var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n\n        _this.add(scheduler.schedule(dispatchNext, 0, {\n          value: value,\n          subject: subject\n        }));\n      }\n    };\n\n    try {\n      callbackFunc.apply(context, args.concat([handler]));\n    } catch (err) {\n      this.add(scheduler.schedule(dispatchError, 0, {\n        err: err,\n        subject: subject\n      }));\n    }\n  }\n\n  this.add(subject.subscribe(subscriber));\n}\n\nfunction dispatchNext(arg) {\n  var value = arg.value,\n      subject = arg.subject;\n  subject.next(value);\n  subject.complete();\n}\n\nfunction dispatchError(arg) {\n  var err = arg.err,\n      subject = arg.subject;\n  subject.error(err);\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,UAAT,QAAuB,eAAvB;AAGA,SAASC,YAAT,QAAoB,iBAApB;AACA,SAASC,GAAT,QAAS,kBAAT;AACA,SAASC,cAAT,QAA4B,wBAA5B;AACA,SAASC,WAAT,QAAwB,qBAAxB;AAoJA,SAAMC,OAAN,QAAgB,iBAAhB;OAME,SAAIC,gBAAJ,CAAoBC,YAApB,EAAoBC,cAApB,EAAoBC,SAApB,EAAoB;MAClBD,gBAAgB;QACdJ,WAAS,CAAGI,cAAH,GAAkB;MAC5BC;WAEC;aAAQ,YAAc;gBAAd;;aAAA,0BAAc;;QAAK;;QAEzB;UAAA;QAAA;MACH;IACF;EAED;;SAA2B,YAAc;YAAd;;SAAA,0BAAc;;IACvC;;QACEC,SAAS;MACTC,OAAI,WADK;MAETC,UAFS;MAGTL,YAAS,cAHA;MAITE,SAAS,WAJA;MAKTI;IALS;WAOD,yBAAOC,UAAP,EAAmB;MACrB;MACN,IAAIH,OAAC,GAASD,MAAE,QAAhB;;UACE,YAAY;YACV,UAAU;UACVC,OAAM,SAAU,QAAV,GAAU,kBAAhB;;cAAiBI,sBAAmB;yBAAnB,GAAmB;;iBAAnB,mCAAmBC;;YAClC;;YAEA,IAAIC,GAAG,GAAEC,iBAAT;;gBACED;cACAN,OAAO,MAAP,CAAOM,GAAP;cACD;YAED;;YACAN,OAAO,CAACQ,IAAR,CAAQD,SAAW,OAAX,IAAW,CAAX,GAAWA,YAAX,GAAWA,SAAnB;YACAP;UAEF;;cACE;YACDJ;UAAC,SACAU,KAAI;gBACFd,cAAc,WAAK;cACpBQ;mBACC;cACDS;YACF;UACF;QACD;;QACD;aACC;QACD;UAAAV;UAAAI;UAAAD;QAAA;MACA;IACH,CAhCU;EAiCb;AAgBD;;SAAAQ,gBA0BC;EAzBS;;EACA;EAAA,iBAAcC,gBAAd;EAAA,IAAkBT,OAAE,gBAApB;EACR,IAAIN,YAAU,SAAO,aAArB;EAAA,IAA6BK,kBAA7B;EAAA,IAA6BH,4BAA7B;EAEA,IAAIE,OAAC,GAASD,cAAd;;MACE,UAAU;IAEVC,OAAM,SAAU,QAAV,GAAU,kBAAhB;;QAAiBI,sBAAmB;mBAAnB,GAAmB;;WAAnB,mCAAmBC;;MAClC;;MACA,IAAIC,GAAG,GAAEC,iBAAT;;UACED,KAAI;QACLM;UAAAN;UAAAN;QAAA;aACC;QACA,SAAQ,GAACO,SAAU,OAAV,IAAuC,CAAvC,GAAuCA,SAAe,CAAE,CAAF,CAAtD,GAA0DA,SAAnE;;QACDK;UAAAC;UAAAb;QAAA;MACD;IAEF;;QACE;MACDJ;IAAC,SACAU,KAAQ;MACT;QAAAA;QAAAN;MAAA;IACF;EAED;;EACD;AAOD;;SACUc,kBAAO;EACf,SAAQ,GAAIC,GAAC,MAAb;EAAA,IAAoBf,qBAApB;EACAA,OAAO,CAACQ,IAAR,CAAQK,KAAR;EACDb;AAOD;;SACUgB,cAAKD;EACb,OAAO,GAACA,GAAK,CAACT,GAAd;EAAA,IAAmBN,qBAAnB;EACDA","names":["Observable","AsyncSubject","map","canReportError","isScheduler","isArray","bindNodeCallback","callbackFunc","resultSelector","scheduler","params","subject","args","context","subscriber","handler","_i","err","innerArgs","next","console","dispatch","state","_this","value","dispatchNext","arg","dispatchError"],"sources":["../../../src/internal/observable/bindNodeCallback.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}