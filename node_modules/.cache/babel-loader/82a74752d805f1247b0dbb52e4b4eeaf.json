{"ast":null,"code":"\"use strict\"; // Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar system_1 = require(\"./source/system\");\n\nvar binary_1 = require(\"@stablelib/binary\");\n\nvar wipe_1 = require(\"@stablelib/wipe\");\n\nexports.defaultRandomSource = new system_1.SystemRandomSource();\n\nfunction randomBytes(length, prng) {\n  if (prng === void 0) {\n    prng = exports.defaultRandomSource;\n  }\n\n  return prng.randomBytes(length);\n}\n\nexports.randomBytes = randomBytes;\n/**\n * Returns a uniformly random unsigned 32-bit integer.\n */\n\nfunction randomUint32(prng) {\n  if (prng === void 0) {\n    prng = exports.defaultRandomSource;\n  } // Generate 4-byte random buffer.\n\n\n  var buf = randomBytes(4, prng); // Convert bytes from buffer into a 32-bit integer.\n  // It's not important which byte order to use, since\n  // the result is random.\n\n  var result = binary_1.readUint32LE(buf); // Clean the buffer.\n\n  wipe_1.wipe(buf);\n  return result;\n}\n\nexports.randomUint32 = randomUint32;\n/** 62 alphanumeric characters for default charset of randomString() */\n\nvar ALPHANUMERIC = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n/**\n * Returns a uniform random string of the given length\n * with characters from the given charset.\n *\n * Charset must not have more than 256 characters.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */\n\nfunction randomString(length, charset, prng) {\n  if (charset === void 0) {\n    charset = ALPHANUMERIC;\n  }\n\n  if (prng === void 0) {\n    prng = exports.defaultRandomSource;\n  }\n\n  if (charset.length < 2) {\n    throw new Error(\"randomString charset is too short\");\n  }\n\n  if (charset.length > 256) {\n    throw new Error(\"randomString charset is too long\");\n  }\n\n  var out = '';\n  var charsLen = charset.length;\n  var maxByte = 256 - 256 % charsLen;\n\n  while (length > 0) {\n    var buf = randomBytes(Math.ceil(length * 256 / maxByte), prng);\n\n    for (var i = 0; i < buf.length && length > 0; i++) {\n      var randomByte = buf[i];\n\n      if (randomByte < maxByte) {\n        out += charset.charAt(randomByte % charsLen);\n        length--;\n      }\n    }\n\n    wipe_1.wipe(buf);\n  }\n\n  return out;\n}\n\nexports.randomString = randomString;\n/**\n * Returns uniform random string containing at least the given\n * number of bits of entropy.\n *\n * For example, randomStringForEntropy(128) will return a 22-character\n * alphanumeric string, while randomStringForEntropy(128, \"0123456789\")\n * will return a 39-character numeric string, both will contain at\n * least 128 bits of entropy.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */\n\nfunction randomStringForEntropy(bits, charset, prng) {\n  if (charset === void 0) {\n    charset = ALPHANUMERIC;\n  }\n\n  if (prng === void 0) {\n    prng = exports.defaultRandomSource;\n  }\n\n  var length = Math.ceil(bits / (Math.log(charset.length) / Math.LN2));\n  return randomString(length, charset, prng);\n}\n\nexports.randomStringForEntropy = randomStringForEntropy;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;;;AAQA;;AACA;;AACA;;AAIaA,8BAAsB,IAAIC,2BAAJ,EAAtB;;AAEb,SAAgBC,WAAhB,CAA4BC,MAA5B,EAA4CC,IAA5C,EAAoF;EAAxC;IAAAA,OAAqBJ,2BAArB;EAAwC;;EAChF,OAAOI,IAAI,CAACF,WAAL,CAAiBC,MAAjB,CAAP;AACH;;AAFDH;AAIA;;;;AAGA,SAAgBK,YAAhB,CAA6BD,IAA7B,EAAqE;EAAxC;IAAAA,OAAqBJ,2BAArB;EAAwC,EACjE;;;EACA,IAAMM,GAAG,GAAGJ,WAAW,CAAC,CAAD,EAAIE,IAAJ,CAAvB,CAFiE,CAIjE;EACA;EACA;;EACA,IAAMG,MAAM,GAAGC,sBAAaF,GAAb,CAAf,CAPiE,CASjE;;EACAG,YAAKH,GAAL;EAEA,OAAOC,MAAP;AACH;;AAbDP;AAeA;;AACA,IAAMU,YAAY,GAAG,gEAArB;AAEA;;;;;;;;;;AASA,SAAgBC,YAAhB,CACIR,MADJ,EAEIS,OAFJ,EAGIR,IAHJ,EAG4C;EADxC;IAAAQ;EAAsB;;EACtB;IAAAR,OAAqBJ,2BAArB;EAAwC;;EAExC,IAAIY,OAAO,CAACT,MAAR,GAAiB,CAArB,EAAwB;IACpB,MAAM,IAAIU,KAAJ,CAAU,mCAAV,CAAN;EACH;;EACD,IAAID,OAAO,CAACT,MAAR,GAAiB,GAArB,EAA0B;IACtB,MAAM,IAAIU,KAAJ,CAAU,kCAAV,CAAN;EACH;;EACD,IAAIC,GAAG,GAAG,EAAV;EACA,IAAMC,QAAQ,GAAGH,OAAO,CAACT,MAAzB;EACA,IAAMa,OAAO,GAAG,MAAO,MAAMD,QAA7B;;EACA,OAAOZ,MAAM,GAAG,CAAhB,EAAmB;IACf,IAAMG,GAAG,GAAGJ,WAAW,CAACe,IAAI,CAACC,IAAL,CAAUf,MAAM,GAAG,GAAT,GAAea,OAAzB,CAAD,EAAoCZ,IAApC,CAAvB;;IACA,KAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,GAAG,CAACH,MAAR,IAAkBA,MAAM,GAAG,CAA3C,EAA8CgB,CAAC,EAA/C,EAAmD;MAC/C,IAAMC,UAAU,GAAGd,GAAG,CAACa,CAAD,CAAtB;;MACA,IAAIC,UAAU,GAAGJ,OAAjB,EAA0B;QACtBF,GAAG,IAAIF,OAAO,CAACS,MAAR,CAAeD,UAAU,GAAGL,QAA5B,CAAP;QACAZ,MAAM;MACT;IACJ;;IACDM,YAAKH,GAAL;EACH;;EACD,OAAOQ,GAAP;AACH;;AA1BDd;AA4BA;;;;;;;;;;;;;AAYA,SAAgBsB,sBAAhB,CACIC,IADJ,EAEIX,OAFJ,EAGIR,IAHJ,EAG4C;EADxC;IAAAQ;EAAsB;;EACtB;IAAAR,OAAqBJ,2BAArB;EAAwC;;EAExC,IAAMG,MAAM,GAAGc,IAAI,CAACC,IAAL,CAAUK,IAAI,IAAIN,IAAI,CAACO,GAAL,CAASZ,OAAO,CAACT,MAAjB,IAA2Bc,IAAI,CAACQ,GAApC,CAAd,CAAf;EACA,OAAOd,YAAY,CAACR,MAAD,EAASS,OAAT,EAAkBR,IAAlB,CAAnB;AACH;;AAPDJ","names":["exports","system_1","randomBytes","length","prng","randomUint32","buf","result","binary_1","wipe_1","ALPHANUMERIC","randomString","charset","Error","out","charsLen","maxByte","Math","ceil","i","randomByte","charAt","randomStringForEntropy","bits","log","LN2"],"sourceRoot":"","sources":["../random.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}