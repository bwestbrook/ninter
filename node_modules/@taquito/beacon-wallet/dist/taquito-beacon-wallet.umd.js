(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@airgap/beacon-dapp'), require('@taquito/taquito')) :
    typeof define === 'function' && define.amd ? define(['exports', '@airgap/beacon-dapp', '@taquito/taquito'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.taquitoBeaconWallet = {}, global.beaconDapp, global.taquito));
})(this, (function (exports, beaconDapp, taquito) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    // IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!
    const VERSION = {
        "commitHash": "cbdd0af87e400489076259d065e2d328feb8e1b4",
        "version": "12.1.0"
    };

    /**
     * @packageDocumentation
     * @module @taquito/beacon-wallet
     */
    /**
     *  @category Error
     *  @description Error that indicates the Beacon wallet not being initialized
     */
    class BeaconWalletNotInitialized extends Error {
        constructor() {
            super('You need to initialize BeaconWallet by calling beaconWallet.requestPermissions first');
            this.name = 'BeaconWalletNotInitialized';
        }
    }
    /**
     *  @category Error
     *  @description Error that indicates missing required persmission scopes
     */
    class MissingRequiredScopes extends Error {
        constructor(requiredScopes) {
            super(`Required permissions scopes were not granted: ${requiredScopes.join(',')}`);
            this.requiredScopes = requiredScopes;
            this.name = 'MissingRequiredScopes';
        }
    }
    class BeaconWallet {
        constructor(options) {
            this.client = new beaconDapp.DAppClient(options);
        }
        validateRequiredScopesOrFail(permissionScopes, requiredScopes) {
            const mandatoryScope = new Set(requiredScopes);
            for (const scope of permissionScopes) {
                if (mandatoryScope.has(scope)) {
                    mandatoryScope.delete(scope);
                }
            }
            if (mandatoryScope.size > 0) {
                throw new MissingRequiredScopes(Array.from(mandatoryScope));
            }
        }
        requestPermissions(request) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.client.requestPermissions(request);
            });
        }
        getPKH() {
            return __awaiter(this, void 0, void 0, function* () {
                const account = yield this.client.getActiveAccount();
                if (!account) {
                    throw new BeaconWalletNotInitialized();
                }
                return account.address;
            });
        }
        mapTransferParamsToWalletParams(params) {
            return __awaiter(this, void 0, void 0, function* () {
                let walletParams;
                yield this.client.showPrepare();
                try {
                    walletParams = yield params();
                }
                catch (err) {
                    yield this.client.hideUI();
                    throw err;
                }
                return this.removeDefaultParams(walletParams, yield taquito.createTransferOperation(this.formatParameters(walletParams)));
            });
        }
        mapOriginateParamsToWalletParams(params) {
            return __awaiter(this, void 0, void 0, function* () {
                let walletParams;
                yield this.client.showPrepare();
                try {
                    walletParams = yield params();
                }
                catch (err) {
                    yield this.client.hideUI();
                    throw err;
                }
                return this.removeDefaultParams(walletParams, yield taquito.createOriginationOperation(this.formatParameters(walletParams)));
            });
        }
        mapDelegateParamsToWalletParams(params) {
            return __awaiter(this, void 0, void 0, function* () {
                let walletParams;
                yield this.client.showPrepare();
                try {
                    walletParams = yield params();
                }
                catch (err) {
                    yield this.client.hideUI();
                    throw err;
                }
                return this.removeDefaultParams(walletParams, yield taquito.createSetDelegateOperation(this.formatParameters(walletParams)));
            });
        }
        formatParameters(params) {
            if (params.fee) {
                params.fee = params.fee.toString();
            }
            if (params.storageLimit) {
                params.storageLimit = params.storageLimit.toString();
            }
            if (params.gasLimit) {
                params.gasLimit = params.gasLimit.toString();
            }
            return params;
        }
        removeDefaultParams(params, operatedParams) {
            // If fee, storageLimit or gasLimit is undefined by user
            // in case of beacon wallet, dont override it by
            // defaults.
            if (!params.fee) {
                delete operatedParams.fee;
            }
            if (!params.storageLimit) {
                delete operatedParams.storage_limit;
            }
            if (!params.gasLimit) {
                delete operatedParams.gas_limit;
            }
            return operatedParams;
        }
        sendOperations(params) {
            return __awaiter(this, void 0, void 0, function* () {
                const account = yield this.client.getActiveAccount();
                if (!account) {
                    throw new BeaconWalletNotInitialized();
                }
                const permissions = account.scopes;
                this.validateRequiredScopesOrFail(permissions, [beaconDapp.PermissionScope.OPERATION_REQUEST]);
                const { transactionHash } = yield this.client.requestOperation({ operationDetails: params });
                return transactionHash;
            });
        }
        /**
         *
         * @description Removes all beacon values from the storage. After using this method, this instance is no longer usable.
         * You will have to instanciate a new BeaconWallet.
         */
        disconnect() {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.client.destroy();
            });
        }
        /**
         *
         * @description This method removes the active account from local storage by setting it to undefined.
         */
        clearActiveAccount() {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.client.setActiveAccount();
            });
        }
    }

    exports.BeaconWallet = BeaconWallet;
    exports.BeaconWalletNotInitialized = BeaconWalletNotInitialized;
    exports.MissingRequiredScopes = MissingRequiredScopes;
    exports.VERSION = VERSION;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=taquito-beacon-wallet.umd.js.map
