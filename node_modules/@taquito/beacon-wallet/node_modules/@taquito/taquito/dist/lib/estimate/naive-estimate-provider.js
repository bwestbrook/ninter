"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NaiveEstimateProvider = void 0;
const constants_1 = require("../constants");
const estimate_1 = require("./estimate");
const utils_1 = require("@taquito/utils");
/**
 * @description Na√Øve implementation of an estimate provider. Will work for basic transaction but your operation risk to fail if they are more complex (smart contract interaction)
 *
 * @deprecated Deprecated in favor of RPCEstimateProvider
 */
class NaiveEstimateProvider {
    constructor(protocol) {
        this.protocol = protocol;
        this._costPerByte = 250;
    }
    registerGlobalConstant(params) {
        throw new utils_1.InvalidOperationKindError(params.kind);
    }
    /**
     *
     * @description Estimate gasLimit, storageLimit and fees for an origination operation
     *
     * @returns An estimation of gasLimit, storageLimit and fees for the operation
     *
     * @param OriginationOperation Originate operation parameter
     */
    originate({ fee = constants_1.DEFAULT_FEE.ORIGINATION, storageLimit = constants_1.DEFAULT_STORAGE_LIMIT.ORIGINATION, gasLimit = constants_1.DEFAULT_GAS_LIMIT.ORIGINATION * 1000, }) {
        return __awaiter(this, void 0, void 0, function* () {
            return new estimate_1.Estimate(gasLimit, storageLimit, 185, this._costPerByte, fee);
        });
    }
    /**
     *
     * @description Estimate gasLimit, storageLimit and fees for an transfer operation
     *
     * @returns An estimation of gasLimit, storageLimit and fees for the operation
     *
     * @param TransferOperation Originate operation parameter
     */
    transfer({ fee = constants_1.DEFAULT_FEE.TRANSFER, storageLimit = constants_1.DEFAULT_STORAGE_LIMIT.TRANSFER, gasLimit = constants_1.DEFAULT_GAS_LIMIT.TRANSFER * 1000, }) {
        return __awaiter(this, void 0, void 0, function* () {
            return new estimate_1.Estimate(gasLimit, storageLimit, 162, this._costPerByte, fee);
        });
    }
    /**
     *
     * @description Estimate gasLimit, storageLimit and fees for a delegate operation
     *
     * @returns An estimation of gasLimit, storageLimit and fees for the operation
     *
     * @param Estimate
     */
    setDelegate({ fee = constants_1.DEFAULT_FEE.DELEGATION, gasLimit = constants_1.DEFAULT_GAS_LIMIT.DELEGATION * 1000, }) {
        return __awaiter(this, void 0, void 0, function* () {
            return new estimate_1.Estimate(gasLimit, 0, 157, this._costPerByte, fee);
        });
    }
    /**
     *
     * @description Estimate gasLimit, storageLimit and fees for a delegate operation
     *
     * @returns An estimation of gasLimit, storageLimit and fees for the operation
     *
     * @param Estimate
     */
    registerDelegate({ fee = constants_1.DEFAULT_FEE.DELEGATION, gasLimit = constants_1.DEFAULT_GAS_LIMIT.DELEGATION * 1000, }) {
        return __awaiter(this, void 0, void 0, function* () {
            return new estimate_1.Estimate(gasLimit, 0, 157, this._costPerByte, fee);
        });
    }
    /**
     *
     * @description Estimate gasLimit, storageLimit and fees for a reveal operation
     *
     * @returns An estimation of gasLimit, storageLimit and fees for the operation
     *
     * @param Estimate
     */
    reveal() {
        return __awaiter(this, void 0, void 0, function* () {
            return new estimate_1.Estimate(constants_1.DEFAULT_GAS_LIMIT.REVEAL * 1000, constants_1.DEFAULT_STORAGE_LIMIT.REVEAL, 64, this._costPerByte, constants_1.DEFAULT_FEE.REVEAL);
        });
    }
    batch(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const estimates = [];
            for (const param of params) {
                switch (param.kind) {
                    case 'transaction':
                        estimates.push(yield this.transfer(param));
                        break;
                    case 'origination':
                        estimates.push(yield this.originate(param));
                        break;
                    case 'delegation':
                        estimates.push(yield this.setDelegate(param));
                        break;
                    case 'activate_account':
                        estimates.push(new estimate_1.Estimate(0, 0, 0, this._costPerByte, 0));
                        break;
                    default:
                        throw new utils_1.InvalidOperationKindError(params.kind);
                }
            }
            return estimates;
        });
    }
}
exports.NaiveEstimateProvider = NaiveEstimateProvider;
//# sourceMappingURL=naive-estimate-provider.js.map