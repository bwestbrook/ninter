"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.schemaDecoder = exports.schemaEncoder = exports.operationDecoder = exports.operationEncoder = exports.RegisterGlobalConstantSchema = exports.ProposalsSchema = exports.SeedNonceRevelationSchema = exports.EndorsementSchema = exports.BallotSchema = exports.OriginationSchema = exports.TransactionSchema = exports.DelegationSchema = exports.RevealSchema = exports.ActivationSchema = exports.ManagerOperationSchema = void 0;
const constants_1 = require("../constants");
const utils_1 = require("@taquito/utils");
const error_1 = require("../error");
exports.ManagerOperationSchema = {
    branch: 'branch',
    contents: ['operation'],
};
exports.ActivationSchema = {
    pkh: 'tz1',
    secret: 'secret',
};
exports.RevealSchema = {
    source: 'pkh',
    fee: 'zarith',
    counter: 'zarith',
    gas_limit: 'zarith',
    storage_limit: 'zarith',
    public_key: 'public_key',
};
exports.DelegationSchema = {
    source: 'pkh',
    fee: 'zarith',
    counter: 'zarith',
    gas_limit: 'zarith',
    storage_limit: 'zarith',
    delegate: 'delegate',
};
exports.TransactionSchema = {
    source: 'pkh',
    fee: 'zarith',
    counter: 'zarith',
    gas_limit: 'zarith',
    storage_limit: 'zarith',
    amount: 'zarith',
    destination: 'address',
    parameters: 'parameters',
};
exports.OriginationSchema = {
    source: 'pkh',
    fee: 'zarith',
    counter: 'zarith',
    gas_limit: 'zarith',
    storage_limit: 'zarith',
    balance: 'zarith',
    delegate: 'delegate',
    script: 'script',
};
exports.BallotSchema = {
    source: 'pkh',
    period: 'int32',
    proposal: 'proposal',
    ballot: 'ballotStmt',
};
exports.EndorsementSchema = {
    level: 'int32',
};
exports.SeedNonceRevelationSchema = {
    level: 'int32',
    nonce: 'raw',
};
exports.ProposalsSchema = {
    source: 'pkh',
    period: 'int32',
    proposals: 'proposalArr',
};
exports.RegisterGlobalConstantSchema = {
    source: 'pkh',
    fee: 'zarith',
    counter: 'zarith',
    gas_limit: 'zarith',
    storage_limit: 'zarith',
    value: 'value',
};
const operationEncoder = (encoders) => (operation) => {
    if (!(operation.kind in encoders) || !(operation.kind in constants_1.kindMappingReverse)) {
        throw new utils_1.InvalidOperationKindError(operation.kind);
    }
    return constants_1.kindMappingReverse[operation.kind] + encoders[operation.kind](operation);
};
exports.operationEncoder = operationEncoder;
const operationDecoder = (decoders) => (value) => {
    const op = value.consume(1);
    const operationName = constants_1.kindMapping[op[0]];
    if (operationName === undefined) {
        throw new error_1.UnsupportedOperationError(op[0].toString());
    }
    const decodedObj = decoders[operationName](value);
    if (typeof decodedObj !== 'object') {
        throw new error_1.OperationDecodingError('Decoded invalid operation');
    }
    return Object.assign({ kind: operationName }, decodedObj);
};
exports.operationDecoder = operationDecoder;
const schemaEncoder = (encoders) => (schema) => (value) => {
    const keys = Object.keys(schema);
    return keys.reduce((prev, key) => {
        const valueToEncode = schema[key];
        if (Array.isArray(valueToEncode)) {
            const encoder = encoders[valueToEncode[0]];
            const values = value[key];
            if (!Array.isArray(values)) {
                throw new error_1.OperationEncodingError(`Expected value to be Array ${JSON.stringify(values)}`);
            }
            return prev + values.reduce((prevBytes, current) => prevBytes + encoder(current), '');
        }
        else {
            const encoder = encoders[valueToEncode];
            return prev + encoder(value[key]);
        }
    }, '');
};
exports.schemaEncoder = schemaEncoder;
const schemaDecoder = (decoders) => (schema) => (value) => {
    const keys = Object.keys(schema);
    return keys.reduce((prev, key) => {
        const valueToEncode = schema[key];
        if (Array.isArray(valueToEncode)) {
            const decoder = decoders[valueToEncode[0]];
            const decoded = [];
            const lastLength = value.length();
            while (value.length() > 0) {
                decoded.push(decoder(value));
                if (lastLength === value.length()) {
                    throw new error_1.OperationDecodingError('Unable to decode value');
                }
            }
            return Object.assign(Object.assign({}, prev), { [key]: decoded });
        }
        else {
            const decoder = decoders[valueToEncode];
            const result = decoder(value);
            if (typeof result !== 'undefined') {
                return Object.assign(Object.assign({}, prev), { [key]: result });
            }
            else {
                return Object.assign({}, prev);
            }
        }
    }, {});
};
exports.schemaDecoder = schemaDecoder;
//# sourceMappingURL=operation.js.map